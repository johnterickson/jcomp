v2.0 raw
# (":adder", 24)
# (":adder__EPILOGUE", 77)
# (":main", 87)
# (":main__EPILOGUE", 148)
# # set stack to 0xff
8f # @00 LoadLo(Constant(15))
06 # @01 StoreReg(SP)
# # call main
8f # @02 LoadLo(Constant(15))
5e # @03 Add(SP)
06 # @04 StoreReg(SP)
# begin resolving macro: 'call :main'
8f # @05 LoadLo(Constant(15))
5e # @06 Add(SP)
06 # @07 StoreReg(SP)
85 # @08 LoadLo(Constant(5))
5f # @09 Add(PC)
0e # @0a StoreMem(SP)
87 # @0b LoadLo(Label(":main")) LoadLo(Constant(7))
95 # @0c LoadHi(Label(":main")) LoadHi(Constant(5))
07 # @0d StoreReg(PC)
81 # @0e LoadLo(Constant(1))
5e # @0f Add(SP)
06 # @10 StoreReg(SP)
# end resolving macro: 'call :main'
# begin resolving macro: 'pop b'
7e # @11 LoadMem(SP)
01 # @12 StoreReg(B)
81 # @13 LoadLo(Constant(1))
5e # @14 Add(SP)
06 # @15 StoreReg(SP)
# end resolving macro: 'pop b'
# begin resolving macro: 'halt'
8f # @16 LoadLo(Constant(15))
07 # @17 StoreReg(PC)
# end resolving macro: 'halt'
# # Function: adder
# ":adder"
# # sp+5 -> RESULT
# # sp+4 -> x
# # sp+3 -> y
# # sp+2 -> RETURN_ADDRESS
# # sp+1 -> saved c
# # sp+0 -> result
# # save registers
# begin resolving macro: 'push c'
8f # @18 LoadLo(Constant(15))
5e # @19 Add(SP)
06 # @1a StoreReg(SP)
72 # @1b LoadReg(C)
0e # @1c StoreMem(SP)
# end resolving macro: 'push c'
# # create stack space
8f # @1d LoadLo(Constant(15))
5e # @1e Add(SP)
06 # @1f StoreReg(SP)
# # Assign { local: "result", value: Operation(Add, Ident("x"), Ident("y")) }
80 # @20 LoadLo(Constant(0))
5e # @21 Add(SP)
02 # @22 StoreReg(C)
# begin resolving macro: 'push c'
8f # @23 LoadLo(Constant(15))
5e # @24 Add(SP)
06 # @25 StoreReg(SP)
72 # @26 LoadReg(C)
0e # @27 StoreMem(SP)
# end resolving macro: 'push c'
85 # @28 LoadLo(Constant(5))
5e # @29 Add(SP)
78 # @2a LoadMem(ACC)
01 # @2b StoreReg(B)
# begin resolving macro: 'push b'
8f # @2c LoadLo(Constant(15))
5e # @2d Add(SP)
06 # @2e StoreReg(SP)
71 # @2f LoadReg(B)
0e # @30 StoreMem(SP)
# end resolving macro: 'push b'
85 # @31 LoadLo(Constant(5))
5e # @32 Add(SP)
78 # @33 LoadMem(ACC)
01 # @34 StoreReg(B)
# begin resolving macro: 'pop c'
7e # @35 LoadMem(SP)
02 # @36 StoreReg(C)
81 # @37 LoadLo(Constant(1))
5e # @38 Add(SP)
06 # @39 StoreReg(SP)
# end resolving macro: 'pop c'
71 # @3a LoadReg(B)
5a # @3b Add(C)
01 # @3c StoreReg(B)
# begin resolving macro: 'pop c'
7e # @3d LoadMem(SP)
02 # @3e StoreReg(C)
81 # @3f LoadLo(Constant(1))
5e # @40 Add(SP)
06 # @41 StoreReg(SP)
# end resolving macro: 'pop c'
71 # @42 LoadReg(B)
0a # @43 StoreMem(C)
# # Return { local: "result" }
85 # @44 LoadLo(Constant(5))
5e # @45 Add(SP)
01 # @46 StoreReg(B)
80 # @47 LoadLo(Constant(0))
5e # @48 Add(SP)
02 # @49 StoreReg(C)
7a # @4a LoadMem(C)
09 # @4b StoreMem(B)
a1 # @4c Jmp(Label(":adder__EPILOGUE")) Jmp(Constant(1))
# ":adder__EPILOGUE"
81 # @4d LoadLo(Constant(1))
5e # @4e Add(SP)
06 # @4f StoreReg(SP)
# begin resolving macro: 'pop c'
7e # @50 LoadMem(SP)
02 # @51 StoreReg(C)
81 # @52 LoadLo(Constant(1))
5e # @53 Add(SP)
06 # @54 StoreReg(SP)
# end resolving macro: 'pop c'
# begin resolving macro: 'ret'
7e # @55 LoadMem(SP)
07 # @56 StoreReg(PC)
# end resolving macro: 'ret'
# # Function: main
# ":main"
# # sp+3 -> RESULT
# # sp+2 -> RETURN_ADDRESS
# # sp+1 -> saved c
# # sp+0 -> result
# # save registers
# begin resolving macro: 'push c'
8f # @57 LoadLo(Constant(15))
5e # @58 Add(SP)
06 # @59 StoreReg(SP)
72 # @5a LoadReg(C)
0e # @5b StoreMem(SP)
# end resolving macro: 'push c'
# # create stack space
8f # @5c LoadLo(Constant(15))
5e # @5d Add(SP)
06 # @5e StoreReg(SP)
# # Call { local: "result", function: "adder", parameters: [Number(4), Number(5)] }
# begin resolving macro: 'dec sp'
8f # @5f LoadLo(Constant(15))
5e # @60 Add(SP)
06 # @61 StoreReg(SP)
# end resolving macro: 'dec sp'
84 # @62 LoadLo(Constant(4))
90 # @63 LoadHi(Constant(0))
01 # @64 StoreReg(B)
# begin resolving macro: 'push b'
8f # @65 LoadLo(Constant(15))
5e # @66 Add(SP)
06 # @67 StoreReg(SP)
71 # @68 LoadReg(B)
0e # @69 StoreMem(SP)
# end resolving macro: 'push b'
85 # @6a LoadLo(Constant(5))
90 # @6b LoadHi(Constant(0))
01 # @6c StoreReg(B)
# begin resolving macro: 'push b'
8f # @6d LoadLo(Constant(15))
5e # @6e Add(SP)
06 # @6f StoreReg(SP)
71 # @70 LoadReg(B)
0e # @71 StoreMem(SP)
# end resolving macro: 'push b'
# begin resolving macro: 'call :adder'
8f # @72 LoadLo(Constant(15))
5e # @73 Add(SP)
06 # @74 StoreReg(SP)
85 # @75 LoadLo(Constant(5))
5f # @76 Add(PC)
0e # @77 StoreMem(SP)
88 # @78 LoadLo(Label(":adder")) LoadLo(Constant(8))
91 # @79 LoadHi(Label(":adder")) LoadHi(Constant(1))
07 # @7a StoreReg(PC)
81 # @7b LoadLo(Constant(1))
5e # @7c Add(SP)
06 # @7d StoreReg(SP)
# end resolving macro: 'call :adder'
82 # @7e LoadLo(Constant(2))
5e # @7f Add(SP)
06 # @80 StoreReg(SP)
# begin resolving macro: 'pop b'
7e # @81 LoadMem(SP)
01 # @82 StoreReg(B)
81 # @83 LoadLo(Constant(1))
5e # @84 Add(SP)
06 # @85 StoreReg(SP)
# end resolving macro: 'pop b'
80 # @86 LoadLo(Constant(0))
5e # @87 Add(SP)
02 # @88 StoreReg(C)
71 # @89 LoadReg(B)
0a # @8a StoreMem(C)
# # Return { local: "result" }
83 # @8b LoadLo(Constant(3))
5e # @8c Add(SP)
01 # @8d StoreReg(B)
80 # @8e LoadLo(Constant(0))
5e # @8f Add(SP)
02 # @90 StoreReg(C)
7a # @91 LoadMem(C)
09 # @92 StoreMem(B)
a1 # @93 Jmp(Label(":main__EPILOGUE")) Jmp(Constant(1))
# ":main__EPILOGUE"
81 # @94 LoadLo(Constant(1))
5e # @95 Add(SP)
06 # @96 StoreReg(SP)
# begin resolving macro: 'pop c'
7e # @97 LoadMem(SP)
02 # @98 StoreReg(C)
81 # @99 LoadLo(Constant(1))
5e # @9a Add(SP)
06 # @9b StoreReg(SP)
# end resolving macro: 'pop c'
# begin resolving macro: 'ret'
7e # @9c LoadMem(SP)
07 # @9d StoreReg(PC)
# end resolving macro: 'ret'
# begin simulation
# PC:00 [0, 0, 0, 0, 0, 0, 0, 0] LoadLo(Constant(15)) [255, 0, 0, 0, 0, 0, 0, 0]
# PC:01 [255, 0, 0, 0, 0, 0, 0, 1] StoreReg(SP) [255, 0, 0, 0, 0, 0, 255, 1]
# PC:02 [255, 0, 0, 0, 0, 0, 255, 2] LoadLo(Constant(15)) [255, 0, 0, 0, 0, 0, 255, 2]
# PC:03 [255, 0, 0, 0, 0, 0, 255, 3] Add(SP) [254, 0, 0, 0, 0, 1, 255, 3]
# PC:04 [254, 0, 0, 0, 0, 1, 255, 4] StoreReg(SP) [254, 0, 0, 0, 0, 1, 254, 4]
# PC:05 [254, 0, 0, 0, 0, 1, 254, 5] LoadLo(Constant(15)) [255, 0, 0, 0, 0, 1, 254, 5]
# PC:06 [255, 0, 0, 0, 0, 1, 254, 6] Add(SP) [253, 0, 0, 0, 0, 1, 254, 6]
# PC:07 [253, 0, 0, 0, 0, 1, 254, 7] StoreReg(SP) [253, 0, 0, 0, 0, 1, 253, 7]
# PC:08 [253, 0, 0, 0, 0, 1, 253, 8] LoadLo(Constant(5)) [5, 0, 0, 0, 0, 1, 253, 8]
# PC:09 [5, 0, 0, 0, 0, 1, 253, 9] Add(PC) [14, 0, 0, 0, 0, 0, 253, 9]
# PC:0a [14, 0, 0, 0, 0, 0, 253, 10] StoreMem(SP) [14, 0, 0, 0, 0, 0, 253, 10]
# PC:0b [14, 0, 0, 0, 0, 0, 253, 11] LoadLo(Constant(7)) [7, 0, 0, 0, 0, 0, 253, 11]
# PC:0c [7, 0, 0, 0, 0, 0, 253, 12] LoadHi(Constant(5)) [87, 0, 0, 0, 0, 0, 253, 12]
# PC:0d [87, 0, 0, 0, 0, 0, 253, 13] StoreReg(PC) [87, 0, 0, 0, 0, 0, 253, 87]
# PC:57 [87, 0, 0, 0, 0, 0, 253, 87] LoadLo(Constant(15)) [255, 0, 0, 0, 0, 0, 253, 87]
# PC:58 [255, 0, 0, 0, 0, 0, 253, 88] Add(SP) [252, 0, 0, 0, 0, 1, 253, 88]
# PC:59 [252, 0, 0, 0, 0, 1, 253, 89] StoreReg(SP) [252, 0, 0, 0, 0, 1, 252, 89]
# PC:5a [252, 0, 0, 0, 0, 1, 252, 90] LoadReg(C) [0, 0, 0, 0, 0, 1, 252, 90]
# PC:5b [0, 0, 0, 0, 0, 1, 252, 91] StoreMem(SP) [0, 0, 0, 0, 0, 1, 252, 91]
# PC:5c [0, 0, 0, 0, 0, 1, 252, 92] LoadLo(Constant(15)) [255, 0, 0, 0, 0, 1, 252, 92]
# PC:5d [255, 0, 0, 0, 0, 1, 252, 93] Add(SP) [251, 0, 0, 0, 0, 1, 252, 93]
# PC:5e [251, 0, 0, 0, 0, 1, 252, 94] StoreReg(SP) [251, 0, 0, 0, 0, 1, 251, 94]
# PC:5f [251, 0, 0, 0, 0, 1, 251, 95] LoadLo(Constant(15)) [255, 0, 0, 0, 0, 1, 251, 95]
# PC:60 [255, 0, 0, 0, 0, 1, 251, 96] Add(SP) [250, 0, 0, 0, 0, 1, 251, 96]
# PC:61 [250, 0, 0, 0, 0, 1, 251, 97] StoreReg(SP) [250, 0, 0, 0, 0, 1, 250, 97]
# PC:62 [250, 0, 0, 0, 0, 1, 250, 98] LoadLo(Constant(4)) [4, 0, 0, 0, 0, 1, 250, 98]
# PC:63 [4, 0, 0, 0, 0, 1, 250, 99] LoadHi(Constant(0)) [4, 0, 0, 0, 0, 1, 250, 99]
# PC:64 [4, 0, 0, 0, 0, 1, 250, 100] StoreReg(B) [4, 4, 0, 0, 0, 1, 250, 100]
# PC:65 [4, 4, 0, 0, 0, 1, 250, 101] LoadLo(Constant(15)) [255, 4, 0, 0, 0, 1, 250, 101]
# PC:66 [255, 4, 0, 0, 0, 1, 250, 102] Add(SP) [249, 4, 0, 0, 0, 1, 250, 102]
# PC:67 [249, 4, 0, 0, 0, 1, 250, 103] StoreReg(SP) [249, 4, 0, 0, 0, 1, 249, 103]
# PC:68 [249, 4, 0, 0, 0, 1, 249, 104] LoadReg(B) [4, 4, 0, 0, 0, 1, 249, 104]
# PC:69 [4, 4, 0, 0, 0, 1, 249, 105] StoreMem(SP) [4, 4, 0, 0, 0, 1, 249, 105]
# PC:6a [4, 4, 0, 0, 0, 1, 249, 106] LoadLo(Constant(5)) [5, 4, 0, 0, 0, 1, 249, 106]
# PC:6b [5, 4, 0, 0, 0, 1, 249, 107] LoadHi(Constant(0)) [5, 4, 0, 0, 0, 1, 249, 107]
# PC:6c [5, 4, 0, 0, 0, 1, 249, 108] StoreReg(B) [5, 5, 0, 0, 0, 1, 249, 108]
# PC:6d [5, 5, 0, 0, 0, 1, 249, 109] LoadLo(Constant(15)) [255, 5, 0, 0, 0, 1, 249, 109]
# PC:6e [255, 5, 0, 0, 0, 1, 249, 110] Add(SP) [248, 5, 0, 0, 0, 1, 249, 110]
# PC:6f [248, 5, 0, 0, 0, 1, 249, 111] StoreReg(SP) [248, 5, 0, 0, 0, 1, 248, 111]
# PC:70 [248, 5, 0, 0, 0, 1, 248, 112] LoadReg(B) [5, 5, 0, 0, 0, 1, 248, 112]
# PC:71 [5, 5, 0, 0, 0, 1, 248, 113] StoreMem(SP) [5, 5, 0, 0, 0, 1, 248, 113]
# PC:72 [5, 5, 0, 0, 0, 1, 248, 114] LoadLo(Constant(15)) [255, 5, 0, 0, 0, 1, 248, 114]
# PC:73 [255, 5, 0, 0, 0, 1, 248, 115] Add(SP) [247, 5, 0, 0, 0, 1, 248, 115]
# PC:74 [247, 5, 0, 0, 0, 1, 248, 116] StoreReg(SP) [247, 5, 0, 0, 0, 1, 247, 116]
# PC:75 [247, 5, 0, 0, 0, 1, 247, 117] LoadLo(Constant(5)) [5, 5, 0, 0, 0, 1, 247, 117]
# PC:76 [5, 5, 0, 0, 0, 1, 247, 118] Add(PC) [123, 5, 0, 0, 0, 0, 247, 118]
# PC:77 [123, 5, 0, 0, 0, 0, 247, 119] StoreMem(SP) [123, 5, 0, 0, 0, 0, 247, 119]
# PC:78 [123, 5, 0, 0, 0, 0, 247, 120] LoadLo(Constant(8)) [248, 5, 0, 0, 0, 0, 247, 120]
# PC:79 [248, 5, 0, 0, 0, 0, 247, 121] LoadHi(Constant(1)) [24, 5, 0, 0, 0, 0, 247, 121]
# PC:7a [24, 5, 0, 0, 0, 0, 247, 122] StoreReg(PC) [24, 5, 0, 0, 0, 0, 247, 24]
# PC:18 [24, 5, 0, 0, 0, 0, 247, 24] LoadLo(Constant(15)) [255, 5, 0, 0, 0, 0, 247, 24]
# PC:19 [255, 5, 0, 0, 0, 0, 247, 25] Add(SP) [246, 5, 0, 0, 0, 1, 247, 25]
# PC:1a [246, 5, 0, 0, 0, 1, 247, 26] StoreReg(SP) [246, 5, 0, 0, 0, 1, 246, 26]
# PC:1b [246, 5, 0, 0, 0, 1, 246, 27] LoadReg(C) [0, 5, 0, 0, 0, 1, 246, 27]
# PC:1c [0, 5, 0, 0, 0, 1, 246, 28] StoreMem(SP) [0, 5, 0, 0, 0, 1, 246, 28]
# PC:1d [0, 5, 0, 0, 0, 1, 246, 29] LoadLo(Constant(15)) [255, 5, 0, 0, 0, 1, 246, 29]
# PC:1e [255, 5, 0, 0, 0, 1, 246, 30] Add(SP) [245, 5, 0, 0, 0, 1, 246, 30]
# PC:1f [245, 5, 0, 0, 0, 1, 246, 31] StoreReg(SP) [245, 5, 0, 0, 0, 1, 245, 31]
# PC:20 [245, 5, 0, 0, 0, 1, 245, 32] LoadLo(Constant(0)) [0, 5, 0, 0, 0, 1, 245, 32]
# PC:21 [0, 5, 0, 0, 0, 1, 245, 33] Add(SP) [245, 5, 0, 0, 0, 0, 245, 33]
# PC:22 [245, 5, 0, 0, 0, 0, 245, 34] StoreReg(C) [245, 5, 245, 0, 0, 0, 245, 34]
# PC:23 [245, 5, 245, 0, 0, 0, 245, 35] LoadLo(Constant(15)) [255, 5, 245, 0, 0, 0, 245, 35]
# PC:24 [255, 5, 245, 0, 0, 0, 245, 36] Add(SP) [244, 5, 245, 0, 0, 1, 245, 36]
# PC:25 [244, 5, 245, 0, 0, 1, 245, 37] StoreReg(SP) [244, 5, 245, 0, 0, 1, 244, 37]
# PC:26 [244, 5, 245, 0, 0, 1, 244, 38] LoadReg(C) [245, 5, 245, 0, 0, 1, 244, 38]
# PC:27 [245, 5, 245, 0, 0, 1, 244, 39] StoreMem(SP) [245, 5, 245, 0, 0, 1, 244, 39]
# PC:28 [245, 5, 245, 0, 0, 1, 244, 40] LoadLo(Constant(5)) [5, 5, 245, 0, 0, 1, 244, 40]
# PC:29 [5, 5, 245, 0, 0, 1, 244, 41] Add(SP) [249, 5, 245, 0, 0, 0, 244, 41]
# PC:2a [249, 5, 245, 0, 0, 0, 244, 42] LoadMem(ACC) [4, 5, 245, 0, 0, 0, 244, 42]
# PC:2b [4, 5, 245, 0, 0, 0, 244, 43] StoreReg(B) [4, 4, 245, 0, 0, 0, 244, 43]
# PC:2c [4, 4, 245, 0, 0, 0, 244, 44] LoadLo(Constant(15)) [255, 4, 245, 0, 0, 0, 244, 44]
# PC:2d [255, 4, 245, 0, 0, 0, 244, 45] Add(SP) [243, 4, 245, 0, 0, 1, 244, 45]
# PC:2e [243, 4, 245, 0, 0, 1, 244, 46] StoreReg(SP) [243, 4, 245, 0, 0, 1, 243, 46]
# PC:2f [243, 4, 245, 0, 0, 1, 243, 47] LoadReg(B) [4, 4, 245, 0, 0, 1, 243, 47]
# PC:30 [4, 4, 245, 0, 0, 1, 243, 48] StoreMem(SP) [4, 4, 245, 0, 0, 1, 243, 48]
# PC:31 [4, 4, 245, 0, 0, 1, 243, 49] LoadLo(Constant(5)) [5, 4, 245, 0, 0, 1, 243, 49]
# PC:32 [5, 4, 245, 0, 0, 1, 243, 50] Add(SP) [248, 4, 245, 0, 0, 0, 243, 50]
# PC:33 [248, 4, 245, 0, 0, 0, 243, 51] LoadMem(ACC) [5, 4, 245, 0, 0, 0, 243, 51]
# PC:34 [5, 4, 245, 0, 0, 0, 243, 52] StoreReg(B) [5, 5, 245, 0, 0, 0, 243, 52]
# PC:35 [5, 5, 245, 0, 0, 0, 243, 53] LoadMem(SP) [4, 5, 245, 0, 0, 0, 243, 53]
# PC:36 [4, 5, 245, 0, 0, 0, 243, 54] StoreReg(C) [4, 5, 4, 0, 0, 0, 243, 54]
# PC:37 [4, 5, 4, 0, 0, 0, 243, 55] LoadLo(Constant(1)) [1, 5, 4, 0, 0, 0, 243, 55]
# PC:38 [1, 5, 4, 0, 0, 0, 243, 56] Add(SP) [244, 5, 4, 0, 0, 0, 243, 56]
# PC:39 [244, 5, 4, 0, 0, 0, 243, 57] StoreReg(SP) [244, 5, 4, 0, 0, 0, 244, 57]
# PC:3a [244, 5, 4, 0, 0, 0, 244, 58] LoadReg(B) [5, 5, 4, 0, 0, 0, 244, 58]
# PC:3b [5, 5, 4, 0, 0, 0, 244, 59] Add(C) [9, 5, 4, 0, 0, 0, 244, 59]
# PC:3c [9, 5, 4, 0, 0, 0, 244, 60] StoreReg(B) [9, 9, 4, 0, 0, 0, 244, 60]
# PC:3d [9, 9, 4, 0, 0, 0, 244, 61] LoadMem(SP) [245, 9, 4, 0, 0, 0, 244, 61]
# PC:3e [245, 9, 4, 0, 0, 0, 244, 62] StoreReg(C) [245, 9, 245, 0, 0, 0, 244, 62]
# PC:3f [245, 9, 245, 0, 0, 0, 244, 63] LoadLo(Constant(1)) [1, 9, 245, 0, 0, 0, 244, 63]
# PC:40 [1, 9, 245, 0, 0, 0, 244, 64] Add(SP) [245, 9, 245, 0, 0, 0, 244, 64]
# PC:41 [245, 9, 245, 0, 0, 0, 244, 65] StoreReg(SP) [245, 9, 245, 0, 0, 0, 245, 65]
# PC:42 [245, 9, 245, 0, 0, 0, 245, 66] LoadReg(B) [9, 9, 245, 0, 0, 0, 245, 66]
# PC:43 [9, 9, 245, 0, 0, 0, 245, 67] StoreMem(C) [9, 9, 245, 0, 0, 0, 245, 67]
# PC:44 [9, 9, 245, 0, 0, 0, 245, 68] LoadLo(Constant(5)) [5, 9, 245, 0, 0, 0, 245, 68]
# PC:45 [5, 9, 245, 0, 0, 0, 245, 69] Add(SP) [250, 9, 245, 0, 0, 0, 245, 69]
# PC:46 [250, 9, 245, 0, 0, 0, 245, 70] StoreReg(B) [250, 250, 245, 0, 0, 0, 245, 70]
# PC:47 [250, 250, 245, 0, 0, 0, 245, 71] LoadLo(Constant(0)) [0, 250, 245, 0, 0, 0, 245, 71]
# PC:48 [0, 250, 245, 0, 0, 0, 245, 72] Add(SP) [245, 250, 245, 0, 0, 0, 245, 72]
# PC:49 [245, 250, 245, 0, 0, 0, 245, 73] StoreReg(C) [245, 250, 245, 0, 0, 0, 245, 73]
# PC:4a [245, 250, 245, 0, 0, 0, 245, 74] LoadMem(C) [9, 250, 245, 0, 0, 0, 245, 74]
# PC:4b [9, 250, 245, 0, 0, 0, 245, 75] StoreMem(B) [9, 250, 245, 0, 0, 0, 245, 75]
# PC:4c [9, 250, 245, 0, 0, 0, 245, 76] Jmp(Constant(1)) [9, 250, 245, 0, 0, 0, 245, 77]
# PC:4d [9, 250, 245, 0, 0, 0, 245, 77] LoadLo(Constant(1)) [1, 250, 245, 0, 0, 0, 245, 77]
# PC:4e [1, 250, 245, 0, 0, 0, 245, 78] Add(SP) [246, 250, 245, 0, 0, 0, 245, 78]
# PC:4f [246, 250, 245, 0, 0, 0, 245, 79] StoreReg(SP) [246, 250, 245, 0, 0, 0, 246, 79]
# PC:50 [246, 250, 245, 0, 0, 0, 246, 80] LoadMem(SP) [0, 250, 245, 0, 0, 0, 246, 80]
# PC:51 [0, 250, 245, 0, 0, 0, 246, 81] StoreReg(C) [0, 250, 0, 0, 0, 0, 246, 81]
# PC:52 [0, 250, 0, 0, 0, 0, 246, 82] LoadLo(Constant(1)) [1, 250, 0, 0, 0, 0, 246, 82]
# PC:53 [1, 250, 0, 0, 0, 0, 246, 83] Add(SP) [247, 250, 0, 0, 0, 0, 246, 83]
# PC:54 [247, 250, 0, 0, 0, 0, 246, 84] StoreReg(SP) [247, 250, 0, 0, 0, 0, 247, 84]
# PC:55 [247, 250, 0, 0, 0, 0, 247, 85] LoadMem(SP) [123, 250, 0, 0, 0, 0, 247, 85]
# PC:56 [123, 250, 0, 0, 0, 0, 247, 86] StoreReg(PC) [123, 250, 0, 0, 0, 0, 247, 123]
# PC:7b [123, 250, 0, 0, 0, 0, 247, 123] LoadLo(Constant(1)) [1, 250, 0, 0, 0, 0, 247, 123]
# PC:7c [1, 250, 0, 0, 0, 0, 247, 124] Add(SP) [248, 250, 0, 0, 0, 0, 247, 124]
# PC:7d [248, 250, 0, 0, 0, 0, 247, 125] StoreReg(SP) [248, 250, 0, 0, 0, 0, 248, 125]
# PC:7e [248, 250, 0, 0, 0, 0, 248, 126] LoadLo(Constant(2)) [2, 250, 0, 0, 0, 0, 248, 126]
# PC:7f [2, 250, 0, 0, 0, 0, 248, 127] Add(SP) [250, 250, 0, 0, 0, 0, 248, 127]
# PC:80 [250, 250, 0, 0, 0, 0, 248, 128] StoreReg(SP) [250, 250, 0, 0, 0, 0, 250, 128]
# PC:81 [250, 250, 0, 0, 0, 0, 250, 129] LoadMem(SP) [9, 250, 0, 0, 0, 0, 250, 129]
# PC:82 [9, 250, 0, 0, 0, 0, 250, 130] StoreReg(B) [9, 9, 0, 0, 0, 0, 250, 130]
# PC:83 [9, 9, 0, 0, 0, 0, 250, 131] LoadLo(Constant(1)) [1, 9, 0, 0, 0, 0, 250, 131]
# PC:84 [1, 9, 0, 0, 0, 0, 250, 132] Add(SP) [251, 9, 0, 0, 0, 0, 250, 132]
# PC:85 [251, 9, 0, 0, 0, 0, 250, 133] StoreReg(SP) [251, 9, 0, 0, 0, 0, 251, 133]
# PC:86 [251, 9, 0, 0, 0, 0, 251, 134] LoadLo(Constant(0)) [0, 9, 0, 0, 0, 0, 251, 134]
# PC:87 [0, 9, 0, 0, 0, 0, 251, 135] Add(SP) [251, 9, 0, 0, 0, 0, 251, 135]
# PC:88 [251, 9, 0, 0, 0, 0, 251, 136] StoreReg(C) [251, 9, 251, 0, 0, 0, 251, 136]
# PC:89 [251, 9, 251, 0, 0, 0, 251, 137] LoadReg(B) [9, 9, 251, 0, 0, 0, 251, 137]
# PC:8a [9, 9, 251, 0, 0, 0, 251, 138] StoreMem(C) [9, 9, 251, 0, 0, 0, 251, 138]
# PC:8b [9, 9, 251, 0, 0, 0, 251, 139] LoadLo(Constant(3)) [3, 9, 251, 0, 0, 0, 251, 139]
# PC:8c [3, 9, 251, 0, 0, 0, 251, 140] Add(SP) [254, 9, 251, 0, 0, 0, 251, 140]
# PC:8d [254, 9, 251, 0, 0, 0, 251, 141] StoreReg(B) [254, 254, 251, 0, 0, 0, 251, 141]
# PC:8e [254, 254, 251, 0, 0, 0, 251, 142] LoadLo(Constant(0)) [0, 254, 251, 0, 0, 0, 251, 142]
# PC:8f [0, 254, 251, 0, 0, 0, 251, 143] Add(SP) [251, 254, 251, 0, 0, 0, 251, 143]
# PC:90 [251, 254, 251, 0, 0, 0, 251, 144] StoreReg(C) [251, 254, 251, 0, 0, 0, 251, 144]
# PC:91 [251, 254, 251, 0, 0, 0, 251, 145] LoadMem(C) [9, 254, 251, 0, 0, 0, 251, 145]
# PC:92 [9, 254, 251, 0, 0, 0, 251, 146] StoreMem(B) [9, 254, 251, 0, 0, 0, 251, 146]
# PC:93 [9, 254, 251, 0, 0, 0, 251, 147] Jmp(Constant(1)) [9, 254, 251, 0, 0, 0, 251, 148]
# PC:94 [9, 254, 251, 0, 0, 0, 251, 148] LoadLo(Constant(1)) [1, 254, 251, 0, 0, 0, 251, 148]
# PC:95 [1, 254, 251, 0, 0, 0, 251, 149] Add(SP) [252, 254, 251, 0, 0, 0, 251, 149]
# PC:96 [252, 254, 251, 0, 0, 0, 251, 150] StoreReg(SP) [252, 254, 251, 0, 0, 0, 252, 150]
# PC:97 [252, 254, 251, 0, 0, 0, 252, 151] LoadMem(SP) [0, 254, 251, 0, 0, 0, 252, 151]
# PC:98 [0, 254, 251, 0, 0, 0, 252, 152] StoreReg(C) [0, 254, 0, 0, 0, 0, 252, 152]
# PC:99 [0, 254, 0, 0, 0, 0, 252, 153] LoadLo(Constant(1)) [1, 254, 0, 0, 0, 0, 252, 153]
# PC:9a [1, 254, 0, 0, 0, 0, 252, 154] Add(SP) [253, 254, 0, 0, 0, 0, 252, 154]
# PC:9b [253, 254, 0, 0, 0, 0, 252, 155] StoreReg(SP) [253, 254, 0, 0, 0, 0, 253, 155]
# PC:9c [253, 254, 0, 0, 0, 0, 253, 156] LoadMem(SP) [14, 254, 0, 0, 0, 0, 253, 156]
# PC:9d [14, 254, 0, 0, 0, 0, 253, 157] StoreReg(PC) [14, 254, 0, 0, 0, 0, 253, 14]
# PC:0e [14, 254, 0, 0, 0, 0, 253, 14] LoadLo(Constant(1)) [1, 254, 0, 0, 0, 0, 253, 14]
# PC:0f [1, 254, 0, 0, 0, 0, 253, 15] Add(SP) [254, 254, 0, 0, 0, 0, 253, 15]
# PC:10 [254, 254, 0, 0, 0, 0, 253, 16] StoreReg(SP) [254, 254, 0, 0, 0, 0, 254, 16]
# PC:11 [254, 254, 0, 0, 0, 0, 254, 17] LoadMem(SP) [9, 254, 0, 0, 0, 0, 254, 17]
# PC:12 [9, 254, 0, 0, 0, 0, 254, 18] StoreReg(B) [9, 9, 0, 0, 0, 0, 254, 18]
# PC:13 [9, 9, 0, 0, 0, 0, 254, 19] LoadLo(Constant(1)) [1, 9, 0, 0, 0, 0, 254, 19]
# PC:14 [1, 9, 0, 0, 0, 0, 254, 20] Add(SP) [255, 9, 0, 0, 0, 0, 254, 20]
# PC:15 [255, 9, 0, 0, 0, 0, 254, 21] StoreReg(SP) [255, 9, 0, 0, 0, 0, 255, 21]
# PC:16 [255, 9, 0, 0, 0, 0, 255, 22] LoadLo(Constant(15)) [255, 9, 0, 0, 0, 0, 255, 22]
# PC:17 [255, 9, 0, 0, 0, 0, 255, 23] StoreReg(PC) [255, 9, 0, 0, 0, 0, 255, 255]
# simulation completed
