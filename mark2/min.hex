v2.0 raw
# (":increment", 24)
# (":increment__EPILOGUE", 76)
# (":main", 86)
# (":main__EPILOGUE", 139)
# # set stack to 0xff
8f # @00 LoadLo(Constant(15))
06 # @01 StoreReg(SP)
# # call main
8f # @02 LoadLo(Constant(15))
5e # @03 Add(SP)
06 # @04 StoreReg(SP)
# begin resolving macro: 'call :main'
8f # @05 LoadLo(Constant(15))
5e # @06 Add(SP)
06 # @07 StoreReg(SP)
85 # @08 LoadLo(Constant(5))
5f # @09 Add(PC)
0e # @0a StoreMem(SP)
86 # @0b LoadLo(Label(":main")) LoadLo(Constant(6))
95 # @0c LoadHi(Label(":main")) LoadHi(Constant(5))
07 # @0d StoreReg(PC)
81 # @0e LoadLo(Constant(1))
5e # @0f Add(SP)
06 # @10 StoreReg(SP)
# end resolving macro: 'call :main'
# begin resolving macro: 'pop b'
7e # @11 LoadMem(SP)
01 # @12 StoreReg(B)
81 # @13 LoadLo(Constant(1))
5e # @14 Add(SP)
06 # @15 StoreReg(SP)
# end resolving macro: 'pop b'
# begin resolving macro: 'halt'
8f # @16 LoadLo(Constant(15))
07 # @17 StoreReg(PC)
# end resolving macro: 'halt'
# # Function: increment
# ":increment"
# # sp+4 -> RESULT
# # sp+3 -> n
# # sp+2 -> RETURN_ADDRESS
# # sp+1 -> saved c
# # sp+0 -> result
# # save registers
# begin resolving macro: 'push c'
8f # @18 LoadLo(Constant(15))
5e # @19 Add(SP)
06 # @1a StoreReg(SP)
72 # @1b LoadReg(C)
0e # @1c StoreMem(SP)
# end resolving macro: 'push c'
# # create stack space
8f # @1d LoadLo(Constant(15))
5e # @1e Add(SP)
06 # @1f StoreReg(SP)
# # Assign { local: "result", value: Operation(Add, Ident("n"), Number(1)) }
80 # @20 LoadLo(Constant(0))
5e # @21 Add(SP)
02 # @22 StoreReg(C)
# begin resolving macro: 'push c'
8f # @23 LoadLo(Constant(15))
5e # @24 Add(SP)
06 # @25 StoreReg(SP)
72 # @26 LoadReg(C)
0e # @27 StoreMem(SP)
# end resolving macro: 'push c'
84 # @28 LoadLo(Constant(4))
5e # @29 Add(SP)
78 # @2a LoadMem(ACC)
01 # @2b StoreReg(B)
# begin resolving macro: 'push b'
8f # @2c LoadLo(Constant(15))
5e # @2d Add(SP)
06 # @2e StoreReg(SP)
71 # @2f LoadReg(B)
0e # @30 StoreMem(SP)
# end resolving macro: 'push b'
81 # @31 LoadLo(Constant(1))
90 # @32 LoadHi(Constant(0))
01 # @33 StoreReg(B)
# begin resolving macro: 'pop c'
7e # @34 LoadMem(SP)
02 # @35 StoreReg(C)
81 # @36 LoadLo(Constant(1))
5e # @37 Add(SP)
06 # @38 StoreReg(SP)
# end resolving macro: 'pop c'
71 # @39 LoadReg(B)
5a # @3a Add(C)
01 # @3b StoreReg(B)
# begin resolving macro: 'pop c'
7e # @3c LoadMem(SP)
02 # @3d StoreReg(C)
81 # @3e LoadLo(Constant(1))
5e # @3f Add(SP)
06 # @40 StoreReg(SP)
# end resolving macro: 'pop c'
71 # @41 LoadReg(B)
0a # @42 StoreMem(C)
# # Return { local: "result" }
84 # @43 LoadLo(Constant(4))
5e # @44 Add(SP)
01 # @45 StoreReg(B)
80 # @46 LoadLo(Constant(0))
5e # @47 Add(SP)
02 # @48 StoreReg(C)
7a # @49 LoadMem(C)
09 # @4a StoreMem(B)
a1 # @4b Jmp(Label(":increment__EPILOGUE")) Jmp(Constant(1))
# ":increment__EPILOGUE"
81 # @4c LoadLo(Constant(1))
5e # @4d Add(SP)
06 # @4e StoreReg(SP)
# begin resolving macro: 'pop c'
7e # @4f LoadMem(SP)
02 # @50 StoreReg(C)
81 # @51 LoadLo(Constant(1))
5e # @52 Add(SP)
06 # @53 StoreReg(SP)
# end resolving macro: 'pop c'
# begin resolving macro: 'ret'
7e # @54 LoadMem(SP)
07 # @55 StoreReg(PC)
# end resolving macro: 'ret'
# # Function: main
# ":main"
# # sp+3 -> RESULT
# # sp+2 -> RETURN_ADDRESS
# # sp+1 -> saved c
# # sp+0 -> result
# # save registers
# begin resolving macro: 'push c'
8f # @56 LoadLo(Constant(15))
5e # @57 Add(SP)
06 # @58 StoreReg(SP)
72 # @59 LoadReg(C)
0e # @5a StoreMem(SP)
# end resolving macro: 'push c'
# # create stack space
8f # @5b LoadLo(Constant(15))
5e # @5c Add(SP)
06 # @5d StoreReg(SP)
# # Call { local: "result", function: "increment", parameters: [Number(5)] }
# begin resolving macro: 'dec sp'
8f # @5e LoadLo(Constant(15))
5e # @5f Add(SP)
06 # @60 StoreReg(SP)
# end resolving macro: 'dec sp'
85 # @61 LoadLo(Constant(5))
90 # @62 LoadHi(Constant(0))
01 # @63 StoreReg(B)
# begin resolving macro: 'push b'
8f # @64 LoadLo(Constant(15))
5e # @65 Add(SP)
06 # @66 StoreReg(SP)
71 # @67 LoadReg(B)
0e # @68 StoreMem(SP)
# end resolving macro: 'push b'
# begin resolving macro: 'call :increment'
8f # @69 LoadLo(Constant(15))
5e # @6a Add(SP)
06 # @6b StoreReg(SP)
85 # @6c LoadLo(Constant(5))
5f # @6d Add(PC)
0e # @6e StoreMem(SP)
88 # @6f LoadLo(Label(":increment")) LoadLo(Constant(8))
91 # @70 LoadHi(Label(":increment")) LoadHi(Constant(1))
07 # @71 StoreReg(PC)
81 # @72 LoadLo(Constant(1))
5e # @73 Add(SP)
06 # @74 StoreReg(SP)
# end resolving macro: 'call :increment'
81 # @75 LoadLo(Constant(1))
5e # @76 Add(SP)
06 # @77 StoreReg(SP)
# begin resolving macro: 'pop b'
7e # @78 LoadMem(SP)
01 # @79 StoreReg(B)
81 # @7a LoadLo(Constant(1))
5e # @7b Add(SP)
06 # @7c StoreReg(SP)
# end resolving macro: 'pop b'
80 # @7d LoadLo(Constant(0))
5e # @7e Add(SP)
02 # @7f StoreReg(C)
71 # @80 LoadReg(B)
0a # @81 StoreMem(C)
# # Return { local: "result" }
83 # @82 LoadLo(Constant(3))
5e # @83 Add(SP)
01 # @84 StoreReg(B)
80 # @85 LoadLo(Constant(0))
5e # @86 Add(SP)
02 # @87 StoreReg(C)
7a # @88 LoadMem(C)
09 # @89 StoreMem(B)
a1 # @8a Jmp(Label(":main__EPILOGUE")) Jmp(Constant(1))
# ":main__EPILOGUE"
81 # @8b LoadLo(Constant(1))
5e # @8c Add(SP)
06 # @8d StoreReg(SP)
# begin resolving macro: 'pop c'
7e # @8e LoadMem(SP)
02 # @8f StoreReg(C)
81 # @90 LoadLo(Constant(1))
5e # @91 Add(SP)
06 # @92 StoreReg(SP)
# end resolving macro: 'pop c'
# begin resolving macro: 'ret'
7e # @93 LoadMem(SP)
07 # @94 StoreReg(PC)
# end resolving macro: 'ret'
# begin simulation
# PC:00 [0, 0, 0, 0, 0, 0, 0, 0] LoadLo(Constant(15)) [255, 0, 0, 0, 0, 0, 0, 0]
# PC:01 [255, 0, 0, 0, 0, 0, 0, 1] StoreReg(SP) [255, 0, 0, 0, 0, 0, 255, 1]
# PC:02 [255, 0, 0, 0, 0, 0, 255, 2] LoadLo(Constant(15)) [255, 0, 0, 0, 0, 0, 255, 2]
# PC:03 [255, 0, 0, 0, 0, 0, 255, 3] Add(SP) [254, 0, 0, 0, 0, 1, 255, 3]
# PC:04 [254, 0, 0, 0, 0, 1, 255, 4] StoreReg(SP) [254, 0, 0, 0, 0, 1, 254, 4]
# PC:05 [254, 0, 0, 0, 0, 1, 254, 5] LoadLo(Constant(15)) [255, 0, 0, 0, 0, 1, 254, 5]
# PC:06 [255, 0, 0, 0, 0, 1, 254, 6] Add(SP) [253, 0, 0, 0, 0, 1, 254, 6]
# PC:07 [253, 0, 0, 0, 0, 1, 254, 7] StoreReg(SP) [253, 0, 0, 0, 0, 1, 253, 7]
# PC:08 [253, 0, 0, 0, 0, 1, 253, 8] LoadLo(Constant(5)) [5, 0, 0, 0, 0, 1, 253, 8]
# PC:09 [5, 0, 0, 0, 0, 1, 253, 9] Add(PC) [14, 0, 0, 0, 0, 0, 253, 9]
# PC:0a [14, 0, 0, 0, 0, 0, 253, 10] StoreMem(SP) [14, 0, 0, 0, 0, 0, 253, 10]
# PC:0b [14, 0, 0, 0, 0, 0, 253, 11] LoadLo(Constant(6)) [6, 0, 0, 0, 0, 0, 253, 11]
# PC:0c [6, 0, 0, 0, 0, 0, 253, 12] LoadHi(Constant(5)) [86, 0, 0, 0, 0, 0, 253, 12]
# PC:0d [86, 0, 0, 0, 0, 0, 253, 13] StoreReg(PC) [86, 0, 0, 0, 0, 0, 253, 86]
# PC:56 [86, 0, 0, 0, 0, 0, 253, 86] LoadLo(Constant(15)) [255, 0, 0, 0, 0, 0, 253, 86]
# PC:57 [255, 0, 0, 0, 0, 0, 253, 87] Add(SP) [252, 0, 0, 0, 0, 1, 253, 87]
# PC:58 [252, 0, 0, 0, 0, 1, 253, 88] StoreReg(SP) [252, 0, 0, 0, 0, 1, 252, 88]
# PC:59 [252, 0, 0, 0, 0, 1, 252, 89] LoadReg(C) [0, 0, 0, 0, 0, 1, 252, 89]
# PC:5a [0, 0, 0, 0, 0, 1, 252, 90] StoreMem(SP) [0, 0, 0, 0, 0, 1, 252, 90]
# PC:5b [0, 0, 0, 0, 0, 1, 252, 91] LoadLo(Constant(15)) [255, 0, 0, 0, 0, 1, 252, 91]
# PC:5c [255, 0, 0, 0, 0, 1, 252, 92] Add(SP) [251, 0, 0, 0, 0, 1, 252, 92]
# PC:5d [251, 0, 0, 0, 0, 1, 252, 93] StoreReg(SP) [251, 0, 0, 0, 0, 1, 251, 93]
# PC:5e [251, 0, 0, 0, 0, 1, 251, 94] LoadLo(Constant(15)) [255, 0, 0, 0, 0, 1, 251, 94]
# PC:5f [255, 0, 0, 0, 0, 1, 251, 95] Add(SP) [250, 0, 0, 0, 0, 1, 251, 95]
# PC:60 [250, 0, 0, 0, 0, 1, 251, 96] StoreReg(SP) [250, 0, 0, 0, 0, 1, 250, 96]
# PC:61 [250, 0, 0, 0, 0, 1, 250, 97] LoadLo(Constant(5)) [5, 0, 0, 0, 0, 1, 250, 97]
# PC:62 [5, 0, 0, 0, 0, 1, 250, 98] LoadHi(Constant(0)) [5, 0, 0, 0, 0, 1, 250, 98]
# PC:63 [5, 0, 0, 0, 0, 1, 250, 99] StoreReg(B) [5, 5, 0, 0, 0, 1, 250, 99]
# PC:64 [5, 5, 0, 0, 0, 1, 250, 100] LoadLo(Constant(15)) [255, 5, 0, 0, 0, 1, 250, 100]
# PC:65 [255, 5, 0, 0, 0, 1, 250, 101] Add(SP) [249, 5, 0, 0, 0, 1, 250, 101]
# PC:66 [249, 5, 0, 0, 0, 1, 250, 102] StoreReg(SP) [249, 5, 0, 0, 0, 1, 249, 102]
# PC:67 [249, 5, 0, 0, 0, 1, 249, 103] LoadReg(B) [5, 5, 0, 0, 0, 1, 249, 103]
# PC:68 [5, 5, 0, 0, 0, 1, 249, 104] StoreMem(SP) [5, 5, 0, 0, 0, 1, 249, 104]
# PC:69 [5, 5, 0, 0, 0, 1, 249, 105] LoadLo(Constant(15)) [255, 5, 0, 0, 0, 1, 249, 105]
# PC:6a [255, 5, 0, 0, 0, 1, 249, 106] Add(SP) [248, 5, 0, 0, 0, 1, 249, 106]
# PC:6b [248, 5, 0, 0, 0, 1, 249, 107] StoreReg(SP) [248, 5, 0, 0, 0, 1, 248, 107]
# PC:6c [248, 5, 0, 0, 0, 1, 248, 108] LoadLo(Constant(5)) [5, 5, 0, 0, 0, 1, 248, 108]
# PC:6d [5, 5, 0, 0, 0, 1, 248, 109] Add(PC) [114, 5, 0, 0, 0, 0, 248, 109]
# PC:6e [114, 5, 0, 0, 0, 0, 248, 110] StoreMem(SP) [114, 5, 0, 0, 0, 0, 248, 110]
# PC:6f [114, 5, 0, 0, 0, 0, 248, 111] LoadLo(Constant(8)) [248, 5, 0, 0, 0, 0, 248, 111]
# PC:70 [248, 5, 0, 0, 0, 0, 248, 112] LoadHi(Constant(1)) [24, 5, 0, 0, 0, 0, 248, 112]
# PC:71 [24, 5, 0, 0, 0, 0, 248, 113] StoreReg(PC) [24, 5, 0, 0, 0, 0, 248, 24]
# PC:18 [24, 5, 0, 0, 0, 0, 248, 24] LoadLo(Constant(15)) [255, 5, 0, 0, 0, 0, 248, 24]
# PC:19 [255, 5, 0, 0, 0, 0, 248, 25] Add(SP) [247, 5, 0, 0, 0, 1, 248, 25]
# PC:1a [247, 5, 0, 0, 0, 1, 248, 26] StoreReg(SP) [247, 5, 0, 0, 0, 1, 247, 26]
# PC:1b [247, 5, 0, 0, 0, 1, 247, 27] LoadReg(C) [0, 5, 0, 0, 0, 1, 247, 27]
# PC:1c [0, 5, 0, 0, 0, 1, 247, 28] StoreMem(SP) [0, 5, 0, 0, 0, 1, 247, 28]
# PC:1d [0, 5, 0, 0, 0, 1, 247, 29] LoadLo(Constant(15)) [255, 5, 0, 0, 0, 1, 247, 29]
# PC:1e [255, 5, 0, 0, 0, 1, 247, 30] Add(SP) [246, 5, 0, 0, 0, 1, 247, 30]
# PC:1f [246, 5, 0, 0, 0, 1, 247, 31] StoreReg(SP) [246, 5, 0, 0, 0, 1, 246, 31]
# PC:20 [246, 5, 0, 0, 0, 1, 246, 32] LoadLo(Constant(0)) [0, 5, 0, 0, 0, 1, 246, 32]
# PC:21 [0, 5, 0, 0, 0, 1, 246, 33] Add(SP) [246, 5, 0, 0, 0, 0, 246, 33]
# PC:22 [246, 5, 0, 0, 0, 0, 246, 34] StoreReg(C) [246, 5, 246, 0, 0, 0, 246, 34]
# PC:23 [246, 5, 246, 0, 0, 0, 246, 35] LoadLo(Constant(15)) [255, 5, 246, 0, 0, 0, 246, 35]
# PC:24 [255, 5, 246, 0, 0, 0, 246, 36] Add(SP) [245, 5, 246, 0, 0, 1, 246, 36]
# PC:25 [245, 5, 246, 0, 0, 1, 246, 37] StoreReg(SP) [245, 5, 246, 0, 0, 1, 245, 37]
# PC:26 [245, 5, 246, 0, 0, 1, 245, 38] LoadReg(C) [246, 5, 246, 0, 0, 1, 245, 38]
# PC:27 [246, 5, 246, 0, 0, 1, 245, 39] StoreMem(SP) [246, 5, 246, 0, 0, 1, 245, 39]
# PC:28 [246, 5, 246, 0, 0, 1, 245, 40] LoadLo(Constant(4)) [4, 5, 246, 0, 0, 1, 245, 40]
# PC:29 [4, 5, 246, 0, 0, 1, 245, 41] Add(SP) [249, 5, 246, 0, 0, 0, 245, 41]
# PC:2a [249, 5, 246, 0, 0, 0, 245, 42] LoadMem(ACC) [5, 5, 246, 0, 0, 0, 245, 42]
# PC:2b [5, 5, 246, 0, 0, 0, 245, 43] StoreReg(B) [5, 5, 246, 0, 0, 0, 245, 43]
# PC:2c [5, 5, 246, 0, 0, 0, 245, 44] LoadLo(Constant(15)) [255, 5, 246, 0, 0, 0, 245, 44]
# PC:2d [255, 5, 246, 0, 0, 0, 245, 45] Add(SP) [244, 5, 246, 0, 0, 1, 245, 45]
# PC:2e [244, 5, 246, 0, 0, 1, 245, 46] StoreReg(SP) [244, 5, 246, 0, 0, 1, 244, 46]
# PC:2f [244, 5, 246, 0, 0, 1, 244, 47] LoadReg(B) [5, 5, 246, 0, 0, 1, 244, 47]
# PC:30 [5, 5, 246, 0, 0, 1, 244, 48] StoreMem(SP) [5, 5, 246, 0, 0, 1, 244, 48]
# PC:31 [5, 5, 246, 0, 0, 1, 244, 49] LoadLo(Constant(1)) [1, 5, 246, 0, 0, 1, 244, 49]
# PC:32 [1, 5, 246, 0, 0, 1, 244, 50] LoadHi(Constant(0)) [1, 5, 246, 0, 0, 1, 244, 50]
# PC:33 [1, 5, 246, 0, 0, 1, 244, 51] StoreReg(B) [1, 1, 246, 0, 0, 1, 244, 51]
# PC:34 [1, 1, 246, 0, 0, 1, 244, 52] LoadMem(SP) [5, 1, 246, 0, 0, 1, 244, 52]
# PC:35 [5, 1, 246, 0, 0, 1, 244, 53] StoreReg(C) [5, 1, 5, 0, 0, 1, 244, 53]
# PC:36 [5, 1, 5, 0, 0, 1, 244, 54] LoadLo(Constant(1)) [1, 1, 5, 0, 0, 1, 244, 54]
# PC:37 [1, 1, 5, 0, 0, 1, 244, 55] Add(SP) [245, 1, 5, 0, 0, 0, 244, 55]
# PC:38 [245, 1, 5, 0, 0, 0, 244, 56] StoreReg(SP) [245, 1, 5, 0, 0, 0, 245, 56]
# PC:39 [245, 1, 5, 0, 0, 0, 245, 57] LoadReg(B) [1, 1, 5, 0, 0, 0, 245, 57]
# PC:3a [1, 1, 5, 0, 0, 0, 245, 58] Add(C) [6, 1, 5, 0, 0, 0, 245, 58]
# PC:3b [6, 1, 5, 0, 0, 0, 245, 59] StoreReg(B) [6, 6, 5, 0, 0, 0, 245, 59]
# PC:3c [6, 6, 5, 0, 0, 0, 245, 60] LoadMem(SP) [246, 6, 5, 0, 0, 0, 245, 60]
# PC:3d [246, 6, 5, 0, 0, 0, 245, 61] StoreReg(C) [246, 6, 246, 0, 0, 0, 245, 61]
# PC:3e [246, 6, 246, 0, 0, 0, 245, 62] LoadLo(Constant(1)) [1, 6, 246, 0, 0, 0, 245, 62]
# PC:3f [1, 6, 246, 0, 0, 0, 245, 63] Add(SP) [246, 6, 246, 0, 0, 0, 245, 63]
# PC:40 [246, 6, 246, 0, 0, 0, 245, 64] StoreReg(SP) [246, 6, 246, 0, 0, 0, 246, 64]
# PC:41 [246, 6, 246, 0, 0, 0, 246, 65] LoadReg(B) [6, 6, 246, 0, 0, 0, 246, 65]
# PC:42 [6, 6, 246, 0, 0, 0, 246, 66] StoreMem(C) [6, 6, 246, 0, 0, 0, 246, 66]
# PC:43 [6, 6, 246, 0, 0, 0, 246, 67] LoadLo(Constant(4)) [4, 6, 246, 0, 0, 0, 246, 67]
# PC:44 [4, 6, 246, 0, 0, 0, 246, 68] Add(SP) [250, 6, 246, 0, 0, 0, 246, 68]
# PC:45 [250, 6, 246, 0, 0, 0, 246, 69] StoreReg(B) [250, 250, 246, 0, 0, 0, 246, 69]
# PC:46 [250, 250, 246, 0, 0, 0, 246, 70] LoadLo(Constant(0)) [0, 250, 246, 0, 0, 0, 246, 70]
# PC:47 [0, 250, 246, 0, 0, 0, 246, 71] Add(SP) [246, 250, 246, 0, 0, 0, 246, 71]
# PC:48 [246, 250, 246, 0, 0, 0, 246, 72] StoreReg(C) [246, 250, 246, 0, 0, 0, 246, 72]
# PC:49 [246, 250, 246, 0, 0, 0, 246, 73] LoadMem(C) [6, 250, 246, 0, 0, 0, 246, 73]
# PC:4a [6, 250, 246, 0, 0, 0, 246, 74] StoreMem(B) [6, 250, 246, 0, 0, 0, 246, 74]
# PC:4b [6, 250, 246, 0, 0, 0, 246, 75] Jmp(Constant(1)) [6, 250, 246, 0, 0, 0, 246, 76]
# PC:4c [6, 250, 246, 0, 0, 0, 246, 76] LoadLo(Constant(1)) [1, 250, 246, 0, 0, 0, 246, 76]
# PC:4d [1, 250, 246, 0, 0, 0, 246, 77] Add(SP) [247, 250, 246, 0, 0, 0, 246, 77]
# PC:4e [247, 250, 246, 0, 0, 0, 246, 78] StoreReg(SP) [247, 250, 246, 0, 0, 0, 247, 78]
# PC:4f [247, 250, 246, 0, 0, 0, 247, 79] LoadMem(SP) [0, 250, 246, 0, 0, 0, 247, 79]
# PC:50 [0, 250, 246, 0, 0, 0, 247, 80] StoreReg(C) [0, 250, 0, 0, 0, 0, 247, 80]
# PC:51 [0, 250, 0, 0, 0, 0, 247, 81] LoadLo(Constant(1)) [1, 250, 0, 0, 0, 0, 247, 81]
# PC:52 [1, 250, 0, 0, 0, 0, 247, 82] Add(SP) [248, 250, 0, 0, 0, 0, 247, 82]
# PC:53 [248, 250, 0, 0, 0, 0, 247, 83] StoreReg(SP) [248, 250, 0, 0, 0, 0, 248, 83]
# PC:54 [248, 250, 0, 0, 0, 0, 248, 84] LoadMem(SP) [114, 250, 0, 0, 0, 0, 248, 84]
# PC:55 [114, 250, 0, 0, 0, 0, 248, 85] StoreReg(PC) [114, 250, 0, 0, 0, 0, 248, 114]
# PC:72 [114, 250, 0, 0, 0, 0, 248, 114] LoadLo(Constant(1)) [1, 250, 0, 0, 0, 0, 248, 114]
# PC:73 [1, 250, 0, 0, 0, 0, 248, 115] Add(SP) [249, 250, 0, 0, 0, 0, 248, 115]
# PC:74 [249, 250, 0, 0, 0, 0, 248, 116] StoreReg(SP) [249, 250, 0, 0, 0, 0, 249, 116]
# PC:75 [249, 250, 0, 0, 0, 0, 249, 117] LoadLo(Constant(1)) [1, 250, 0, 0, 0, 0, 249, 117]
# PC:76 [1, 250, 0, 0, 0, 0, 249, 118] Add(SP) [250, 250, 0, 0, 0, 0, 249, 118]
# PC:77 [250, 250, 0, 0, 0, 0, 249, 119] StoreReg(SP) [250, 250, 0, 0, 0, 0, 250, 119]
# PC:78 [250, 250, 0, 0, 0, 0, 250, 120] LoadMem(SP) [6, 250, 0, 0, 0, 0, 250, 120]
# PC:79 [6, 250, 0, 0, 0, 0, 250, 121] StoreReg(B) [6, 6, 0, 0, 0, 0, 250, 121]
# PC:7a [6, 6, 0, 0, 0, 0, 250, 122] LoadLo(Constant(1)) [1, 6, 0, 0, 0, 0, 250, 122]
# PC:7b [1, 6, 0, 0, 0, 0, 250, 123] Add(SP) [251, 6, 0, 0, 0, 0, 250, 123]
# PC:7c [251, 6, 0, 0, 0, 0, 250, 124] StoreReg(SP) [251, 6, 0, 0, 0, 0, 251, 124]
# PC:7d [251, 6, 0, 0, 0, 0, 251, 125] LoadLo(Constant(0)) [0, 6, 0, 0, 0, 0, 251, 125]
# PC:7e [0, 6, 0, 0, 0, 0, 251, 126] Add(SP) [251, 6, 0, 0, 0, 0, 251, 126]
# PC:7f [251, 6, 0, 0, 0, 0, 251, 127] StoreReg(C) [251, 6, 251, 0, 0, 0, 251, 127]
# PC:80 [251, 6, 251, 0, 0, 0, 251, 128] LoadReg(B) [6, 6, 251, 0, 0, 0, 251, 128]
# PC:81 [6, 6, 251, 0, 0, 0, 251, 129] StoreMem(C) [6, 6, 251, 0, 0, 0, 251, 129]
# PC:82 [6, 6, 251, 0, 0, 0, 251, 130] LoadLo(Constant(3)) [3, 6, 251, 0, 0, 0, 251, 130]
# PC:83 [3, 6, 251, 0, 0, 0, 251, 131] Add(SP) [254, 6, 251, 0, 0, 0, 251, 131]
# PC:84 [254, 6, 251, 0, 0, 0, 251, 132] StoreReg(B) [254, 254, 251, 0, 0, 0, 251, 132]
# PC:85 [254, 254, 251, 0, 0, 0, 251, 133] LoadLo(Constant(0)) [0, 254, 251, 0, 0, 0, 251, 133]
# PC:86 [0, 254, 251, 0, 0, 0, 251, 134] Add(SP) [251, 254, 251, 0, 0, 0, 251, 134]
# PC:87 [251, 254, 251, 0, 0, 0, 251, 135] StoreReg(C) [251, 254, 251, 0, 0, 0, 251, 135]
# PC:88 [251, 254, 251, 0, 0, 0, 251, 136] LoadMem(C) [6, 254, 251, 0, 0, 0, 251, 136]
# PC:89 [6, 254, 251, 0, 0, 0, 251, 137] StoreMem(B) [6, 254, 251, 0, 0, 0, 251, 137]
# PC:8a [6, 254, 251, 0, 0, 0, 251, 138] Jmp(Constant(1)) [6, 254, 251, 0, 0, 0, 251, 139]
# PC:8b [6, 254, 251, 0, 0, 0, 251, 139] LoadLo(Constant(1)) [1, 254, 251, 0, 0, 0, 251, 139]
# PC:8c [1, 254, 251, 0, 0, 0, 251, 140] Add(SP) [252, 254, 251, 0, 0, 0, 251, 140]
# PC:8d [252, 254, 251, 0, 0, 0, 251, 141] StoreReg(SP) [252, 254, 251, 0, 0, 0, 252, 141]
# PC:8e [252, 254, 251, 0, 0, 0, 252, 142] LoadMem(SP) [0, 254, 251, 0, 0, 0, 252, 142]
# PC:8f [0, 254, 251, 0, 0, 0, 252, 143] StoreReg(C) [0, 254, 0, 0, 0, 0, 252, 143]
# PC:90 [0, 254, 0, 0, 0, 0, 252, 144] LoadLo(Constant(1)) [1, 254, 0, 0, 0, 0, 252, 144]
# PC:91 [1, 254, 0, 0, 0, 0, 252, 145] Add(SP) [253, 254, 0, 0, 0, 0, 252, 145]
# PC:92 [253, 254, 0, 0, 0, 0, 252, 146] StoreReg(SP) [253, 254, 0, 0, 0, 0, 253, 146]
# PC:93 [253, 254, 0, 0, 0, 0, 253, 147] LoadMem(SP) [14, 254, 0, 0, 0, 0, 253, 147]
# PC:94 [14, 254, 0, 0, 0, 0, 253, 148] StoreReg(PC) [14, 254, 0, 0, 0, 0, 253, 14]
# PC:0e [14, 254, 0, 0, 0, 0, 253, 14] LoadLo(Constant(1)) [1, 254, 0, 0, 0, 0, 253, 14]
# PC:0f [1, 254, 0, 0, 0, 0, 253, 15] Add(SP) [254, 254, 0, 0, 0, 0, 253, 15]
# PC:10 [254, 254, 0, 0, 0, 0, 253, 16] StoreReg(SP) [254, 254, 0, 0, 0, 0, 254, 16]
# PC:11 [254, 254, 0, 0, 0, 0, 254, 17] LoadMem(SP) [6, 254, 0, 0, 0, 0, 254, 17]
# PC:12 [6, 254, 0, 0, 0, 0, 254, 18] StoreReg(B) [6, 6, 0, 0, 0, 0, 254, 18]
# PC:13 [6, 6, 0, 0, 0, 0, 254, 19] LoadLo(Constant(1)) [1, 6, 0, 0, 0, 0, 254, 19]
# PC:14 [1, 6, 0, 0, 0, 0, 254, 20] Add(SP) [255, 6, 0, 0, 0, 0, 254, 20]
# PC:15 [255, 6, 0, 0, 0, 0, 254, 21] StoreReg(SP) [255, 6, 0, 0, 0, 0, 255, 21]
# PC:16 [255, 6, 0, 0, 0, 0, 255, 22] LoadLo(Constant(15)) [255, 6, 0, 0, 0, 0, 255, 22]
# PC:17 [255, 6, 0, 0, 0, 0, 255, 23] StoreReg(PC) [255, 6, 0, 0, 0, 0, 255, 255]
# simulation completed
