v2.0 raw
# Line 0: Comment("set stack to 0xff")
# Line 1: Instruction(LoadLo(Constant(15)))
# Line 2: Instruction(StoreReg(SP))
# Line 3: Comment("call main")
# Line 4: Instruction(LoadLo(Constant(15)))
# Line 5: Instruction(Add(SP))
# Line 6: Instruction(StoreReg(SP))
# Line 7: Macro("call :main", [LoadLo(Constant(15)), Add(SP), StoreReg(SP), LoadLo(Constant(5)), Add(PC), StoreMem(SP), LoadLo(Label(":main")), LoadHi(Label(":main")), StoreReg(PC), LoadLo(Constant(1)), Add(SP), StoreReg(SP)])
# Line 8: Macro("pop b", [LoadMem(SP), StoreReg(B), LoadLo(Constant(1)), Add(SP), StoreReg(SP)])
# Line 9: Macro("halt", [LoadLo(Constant(15)), StoreReg(PC)])
# Line 10: Comment("Function { name: \"fib\", args: [\"n\"], locals: {\"sum1\", \"sum2\"}, body: [If { predicate: Operation(Equals, Ident(\"n\"), Number(0)), when_true: [Return { value: Number(1) }] }, Assign { local: \"n\", value: Operation(Subtract, Ident(\"n\"), Number(1)) }, If { predicate: Operation(Equals, Ident(\"n\"), Number(0)), when_true: [Return { value: Number(1) }] }, Call { local: \"sum1\", function: \"fib\", parameters: [Ident(\"n\")] }, Assign { local: \"n\", value: Operation(Subtract, Ident(\"n\"), Number(1)) }, Call { local: \"sum2\", function: \"fib\", parameters: [Ident(\"n\")] }, Return { value: Operation(Add, Ident(\"sum1\"), Ident(\"sum2\")) }] }")
# Line 11: Comment("# Function: fib")
# Line 12: Label(":fib")
# Line 13: Comment("# sp+2 -> RESULT")
# Line 14: Comment("# sp+1 -> n")
# Line 15: Comment("# sp+0 -> RETURN_ADDRESS")
# Line 16: Comment("# Register(D) -> sum1")
# Line 17: Comment("# Register(E) -> sum2")
# Line 18: Comment("Begin statement If { predicate: Operation(Equals, Ident(\"n\"), Number(0)), when_true: [Return { value: Number(1) }] }")
# Line 19: Comment("Evaluating expression: Operation(Equals, Ident(\"n\"), Number(0))")
# Line 20: Comment("Evaluating expression: Ident(\"n\")")
# Line 21: Instruction(LoadLo(Constant(1)))
# Line 22: Instruction(Add(SP))
# Line 23: Instruction(LoadMem(ACC))
# Line 24: Instruction(StoreReg(C))
# Line 25: Comment("Evaluated expression: Ident(\"n\")")
# Line 26: Comment("Evaluating expression: Number(0)")
# Line 27: Instruction(LoadLo(Constant(0)))
# Line 28: Instruction(LoadHi(Constant(0)))
# Line 29: Comment("Evaluated expression: Number(0)")
# Line 30: Instruction(Xor(C))
# Line 31: Comment("Evaluated expression: Operation(Equals, Ident(\"n\"), Number(0))")
# Line 32: Instruction(Jnz(Label(":fib_IF_SKIP_0")))
# Line 33: Comment("Begin statement Return { value: Number(1) }")
# Line 34: Comment("Evaluating expression: Number(1)")
# Line 35: Instruction(LoadLo(Constant(1)))
# Line 36: Instruction(LoadHi(Constant(0)))
# Line 37: Instruction(StoreReg(B))
# Line 38: Comment("Evaluated expression: Number(1)")
# Line 39: Instruction(LoadLo(Constant(2)))
# Line 40: Instruction(Add(SP))
# Line 41: Instruction(StoreReg(C))
# Line 42: Instruction(LoadReg(B))
# Line 43: Instruction(StoreMem(C))
# Line 44: Instruction(LoadLo(Label(":fib__EPILOGUE")))
# Line 45: Instruction(LoadHi(Label(":fib__EPILOGUE")))
# Line 46: Instruction(StoreReg(PC))
# Line 47: Comment("Done  statement Return { value: Number(1) }")
# Line 48: Label(":fib_IF_SKIP_0")
# Line 49: Comment("Done  statement If { predicate: Operation(Equals, Ident(\"n\"), Number(0)), when_true: [Return { value: Number(1) }] }")
# Line 50: Comment("Begin statement Assign { local: \"n\", value: Operation(Subtract, Ident(\"n\"), Number(1)) }")
# Line 51: Comment("Evaluating expression: Operation(Subtract, Ident(\"n\"), Number(1))")
# Line 52: Comment("Evaluating expression: Ident(\"n\")")
# Line 53: Instruction(LoadLo(Constant(1)))
# Line 54: Instruction(Add(SP))
# Line 55: Instruction(LoadMem(ACC))
# Line 56: Instruction(StoreReg(C))
# Line 57: Comment("Evaluated expression: Ident(\"n\")")
# Line 58: Comment("Evaluating expression: Number(1)")
# Line 59: Instruction(LoadLo(Constant(1)))
# Line 60: Instruction(LoadHi(Constant(0)))
# Line 61: Comment("Evaluated expression: Number(1)")
# Line 62: Instruction(Not(ACC))
# Line 63: Instruction(StoreReg(B))
# Line 64: Instruction(LoadLo(Constant(1)))
# Line 65: Instruction(Add(B))
# Line 66: Instruction(Add(C))
# Line 67: Instruction(StoreReg(B))
# Line 68: Comment("Evaluated expression: Operation(Subtract, Ident(\"n\"), Number(1))")
# Line 69: Instruction(LoadLo(Constant(1)))
# Line 70: Instruction(Add(SP))
# Line 71: Instruction(StoreReg(C))
# Line 72: Instruction(LoadReg(B))
# Line 73: Instruction(StoreMem(C))
# Line 74: Comment("Done  statement Assign { local: \"n\", value: Operation(Subtract, Ident(\"n\"), Number(1)) }")
# Line 75: Comment("Begin statement If { predicate: Operation(Equals, Ident(\"n\"), Number(0)), when_true: [Return { value: Number(1) }] }")
# Line 76: Comment("Evaluating expression: Operation(Equals, Ident(\"n\"), Number(0))")
# Line 77: Comment("Evaluating expression: Ident(\"n\")")
# Line 78: Instruction(LoadLo(Constant(1)))
# Line 79: Instruction(Add(SP))
# Line 80: Instruction(LoadMem(ACC))
# Line 81: Instruction(StoreReg(C))
# Line 82: Comment("Evaluated expression: Ident(\"n\")")
# Line 83: Comment("Evaluating expression: Number(0)")
# Line 84: Instruction(LoadLo(Constant(0)))
# Line 85: Instruction(LoadHi(Constant(0)))
# Line 86: Comment("Evaluated expression: Number(0)")
# Line 87: Instruction(Xor(C))
# Line 88: Comment("Evaluated expression: Operation(Equals, Ident(\"n\"), Number(0))")
# Line 89: Instruction(Jnz(Label(":fib_IF_SKIP_1")))
# Line 90: Comment("Begin statement Return { value: Number(1) }")
# Line 91: Comment("Evaluating expression: Number(1)")
# Line 92: Instruction(LoadLo(Constant(1)))
# Line 93: Instruction(LoadHi(Constant(0)))
# Line 94: Instruction(StoreReg(B))
# Line 95: Comment("Evaluated expression: Number(1)")
# Line 96: Instruction(LoadLo(Constant(2)))
# Line 97: Instruction(Add(SP))
# Line 98: Instruction(StoreReg(C))
# Line 99: Instruction(LoadReg(B))
# Line 100: Instruction(StoreMem(C))
# Line 101: Instruction(LoadLo(Label(":fib__EPILOGUE")))
# Line 102: Instruction(LoadHi(Label(":fib__EPILOGUE")))
# Line 103: Instruction(StoreReg(PC))
# Line 104: Comment("Done  statement Return { value: Number(1) }")
# Line 105: Label(":fib_IF_SKIP_1")
# Line 106: Comment("Done  statement If { predicate: Operation(Equals, Ident(\"n\"), Number(0)), when_true: [Return { value: Number(1) }] }")
# Line 107: Comment("Begin statement Call { local: \"sum1\", function: \"fib\", parameters: [Ident(\"n\")] }")
# Line 108: Macro("dec sp", [LoadLo(Constant(15)), Add(SP), StoreReg(SP)])
# Line 109: Comment("Evaluating expression: Ident(\"n\")")
# Line 110: Instruction(LoadLo(Constant(2)))
# Line 111: Instruction(Add(SP))
# Line 112: Instruction(LoadMem(ACC))
# Line 113: Instruction(StoreReg(B))
# Line 114: Comment("Evaluated expression: Ident(\"n\")")
# Line 115: Macro("push b", [LoadLo(Constant(15)), Add(SP), StoreReg(SP), LoadReg(B), StoreMem(SP)])
# Line 116: Macro("call :fib", [LoadLo(Constant(15)), Add(SP), StoreReg(SP), LoadLo(Constant(5)), Add(PC), StoreMem(SP), LoadLo(Label(":fib")), LoadHi(Label(":fib")), StoreReg(PC), LoadLo(Constant(1)), Add(SP), StoreReg(SP)])
# Line 117: Instruction(LoadLo(Constant(1)))
# Line 118: Instruction(Add(SP))
# Line 119: Instruction(StoreReg(SP))
# Line 120: Macro("pop b", [LoadMem(SP), StoreReg(B), LoadLo(Constant(1)), Add(SP), StoreReg(SP)])
# Line 121: Instruction(LoadReg(B))
# Line 122: Instruction(StoreReg(D))
# Line 123: Comment("Done  statement Call { local: \"sum1\", function: \"fib\", parameters: [Ident(\"n\")] }")
# Line 124: Comment("Begin statement Assign { local: \"n\", value: Operation(Subtract, Ident(\"n\"), Number(1)) }")
# Line 125: Comment("Evaluating expression: Operation(Subtract, Ident(\"n\"), Number(1))")
# Line 126: Comment("Evaluating expression: Ident(\"n\")")
# Line 127: Instruction(LoadLo(Constant(1)))
# Line 128: Instruction(Add(SP))
# Line 129: Instruction(LoadMem(ACC))
# Line 130: Instruction(StoreReg(C))
# Line 131: Comment("Evaluated expression: Ident(\"n\")")
# Line 132: Comment("Evaluating expression: Number(1)")
# Line 133: Instruction(LoadLo(Constant(1)))
# Line 134: Instruction(LoadHi(Constant(0)))
# Line 135: Comment("Evaluated expression: Number(1)")
# Line 136: Instruction(Not(ACC))
# Line 137: Instruction(StoreReg(B))
# Line 138: Instruction(LoadLo(Constant(1)))
# Line 139: Instruction(Add(B))
# Line 140: Instruction(Add(C))
# Line 141: Instruction(StoreReg(B))
# Line 142: Comment("Evaluated expression: Operation(Subtract, Ident(\"n\"), Number(1))")
# Line 143: Instruction(LoadLo(Constant(1)))
# Line 144: Instruction(Add(SP))
# Line 145: Instruction(StoreReg(C))
# Line 146: Instruction(LoadReg(B))
# Line 147: Instruction(StoreMem(C))
# Line 148: Comment("Done  statement Assign { local: \"n\", value: Operation(Subtract, Ident(\"n\"), Number(1)) }")
# Line 149: Comment("Begin statement Call { local: \"sum2\", function: \"fib\", parameters: [Ident(\"n\")] }")
# Line 150: Macro("dec sp", [LoadLo(Constant(15)), Add(SP), StoreReg(SP)])
# Line 151: Macro("push d", [LoadLo(Constant(15)), Add(SP), StoreReg(SP), LoadReg(D), StoreMem(SP)])
# Line 152: Comment("Evaluating expression: Ident(\"n\")")
# Line 153: Instruction(LoadLo(Constant(3)))
# Line 154: Instruction(Add(SP))
# Line 155: Instruction(LoadMem(ACC))
# Line 156: Instruction(StoreReg(B))
# Line 157: Comment("Evaluated expression: Ident(\"n\")")
# Line 158: Macro("push b", [LoadLo(Constant(15)), Add(SP), StoreReg(SP), LoadReg(B), StoreMem(SP)])
# Line 159: Macro("call :fib", [LoadLo(Constant(15)), Add(SP), StoreReg(SP), LoadLo(Constant(5)), Add(PC), StoreMem(SP), LoadLo(Label(":fib")), LoadHi(Label(":fib")), StoreReg(PC), LoadLo(Constant(1)), Add(SP), StoreReg(SP)])
# Line 160: Instruction(LoadLo(Constant(1)))
# Line 161: Instruction(Add(SP))
# Line 162: Instruction(StoreReg(SP))
# Line 163: Macro("pop d", [LoadMem(SP), StoreReg(D), LoadLo(Constant(1)), Add(SP), StoreReg(SP)])
# Line 164: Macro("pop b", [LoadMem(SP), StoreReg(B), LoadLo(Constant(1)), Add(SP), StoreReg(SP)])
# Line 165: Instruction(LoadReg(B))
# Line 166: Instruction(StoreReg(E))
# Line 167: Comment("Done  statement Call { local: \"sum2\", function: \"fib\", parameters: [Ident(\"n\")] }")
# Line 168: Comment("Begin statement Return { value: Operation(Add, Ident(\"sum1\"), Ident(\"sum2\")) }")
# Line 169: Comment("Evaluating expression: Operation(Add, Ident(\"sum1\"), Ident(\"sum2\"))")
# Line 170: Comment("Evaluating expression: Ident(\"sum1\")")
# Line 171: Instruction(LoadReg(D))
# Line 172: Instruction(StoreReg(C))
# Line 173: Comment("Evaluated expression: Ident(\"sum1\")")
# Line 174: Comment("Evaluating expression: Ident(\"sum2\")")
# Line 175: Instruction(LoadReg(E))
# Line 176: Comment("Evaluated expression: Ident(\"sum2\")")
# Line 177: Instruction(Add(C))
# Line 178: Instruction(StoreReg(B))
# Line 179: Comment("Evaluated expression: Operation(Add, Ident(\"sum1\"), Ident(\"sum2\"))")
# Line 180: Instruction(LoadLo(Constant(2)))
# Line 181: Instruction(Add(SP))
# Line 182: Instruction(StoreReg(C))
# Line 183: Instruction(LoadReg(B))
# Line 184: Instruction(StoreMem(C))
# Line 185: Instruction(LoadLo(Label(":fib__EPILOGUE")))
# Line 186: Instruction(LoadHi(Label(":fib__EPILOGUE")))
# Line 187: Instruction(StoreReg(PC))
# Line 188: Comment("Done  statement Return { value: Operation(Add, Ident(\"sum1\"), Ident(\"sum2\")) }")
# Line 189: Label(":fib__EPILOGUE")
# Line 190: Macro("ret", [LoadMem(SP), StoreReg(PC)])
# Line 191: Comment("Function { name: \"main\", args: [], locals: {\"result\"}, body: [Call { local: \"result\", function: \"fib\", parameters: [Number(5)] }, Return { value: Ident(\"result\") }] }")
# Line 192: Comment("# Function: main")
# Line 193: Label(":main")
# Line 194: Comment("# sp+1 -> RESULT")
# Line 195: Comment("# sp+0 -> RETURN_ADDRESS")
# Line 196: Comment("# Register(D) -> result")
# Line 197: Comment("Begin statement Call { local: \"result\", function: \"fib\", parameters: [Number(5)] }")
# Line 198: Macro("dec sp", [LoadLo(Constant(15)), Add(SP), StoreReg(SP)])
# Line 199: Comment("Evaluating expression: Number(5)")
# Line 200: Instruction(LoadLo(Constant(5)))
# Line 201: Instruction(LoadHi(Constant(0)))
# Line 202: Instruction(StoreReg(B))
# Line 203: Comment("Evaluated expression: Number(5)")
# Line 204: Macro("push b", [LoadLo(Constant(15)), Add(SP), StoreReg(SP), LoadReg(B), StoreMem(SP)])
# Line 205: Macro("call :fib", [LoadLo(Constant(15)), Add(SP), StoreReg(SP), LoadLo(Constant(5)), Add(PC), StoreMem(SP), LoadLo(Label(":fib")), LoadHi(Label(":fib")), StoreReg(PC), LoadLo(Constant(1)), Add(SP), StoreReg(SP)])
# Line 206: Instruction(LoadLo(Constant(1)))
# Line 207: Instruction(Add(SP))
# Line 208: Instruction(StoreReg(SP))
# Line 209: Macro("pop b", [LoadMem(SP), StoreReg(B), LoadLo(Constant(1)), Add(SP), StoreReg(SP)])
# Line 210: Instruction(LoadReg(B))
# Line 211: Instruction(StoreReg(D))
# Line 212: Comment("Done  statement Call { local: \"result\", function: \"fib\", parameters: [Number(5)] }")
# Line 213: Comment("Begin statement Return { value: Ident(\"result\") }")
# Line 214: Comment("Evaluating expression: Ident(\"result\")")
# Line 215: Instruction(LoadReg(D))
# Line 216: Instruction(StoreReg(B))
# Line 217: Comment("Evaluated expression: Ident(\"result\")")
# Line 218: Instruction(LoadLo(Constant(1)))
# Line 219: Instruction(Add(SP))
# Line 220: Instruction(StoreReg(C))
# Line 221: Instruction(LoadReg(B))
# Line 222: Instruction(StoreMem(C))
# Line 223: Instruction(LoadLo(Label(":main__EPILOGUE")))
# Line 224: Instruction(LoadHi(Label(":main__EPILOGUE")))
# Line 225: Instruction(StoreReg(PC))
# Line 226: Comment("Done  statement Return { value: Ident(\"result\") }")
# Line 227: Label(":main__EPILOGUE")
# Line 228: Macro("ret", [LoadMem(SP), StoreReg(PC)])
# (":fib", 24)
# (":fib_IF_SKIP_0", 43)
# (":fib_IF_SKIP_1", 79)
# (":fib__EPILOGUE", 187)
# (":main", 189)
# (":main__EPILOGUE", 232)
# set stack to 0xff
8f # @00 LoadLo(Constant(15))
06 # @01 StoreReg(SP)
# call main
8f # @02 LoadLo(Constant(15))
5e # @03 Add(SP)
06 # @04 StoreReg(SP)
# begin resolving macro: 'call :main'
8f # @05 LoadLo(Constant(15))
5e # @06 Add(SP)
06 # @07 StoreReg(SP)
85 # @08 LoadLo(Constant(5))
5f # @09 Add(PC)
0e # @0a StoreMem(SP)
8d # @0b LoadLo(Label(":main")) LoadLo(Constant(13))
9b # @0c LoadHi(Label(":main")) LoadHi(Constant(11))
07 # @0d StoreReg(PC)
81 # @0e LoadLo(Constant(1))
5e # @0f Add(SP)
06 # @10 StoreReg(SP)
# end resolving macro: 'call :main'
# begin resolving macro: 'pop b'
7e # @11 LoadMem(SP)
01 # @12 StoreReg(B)
81 # @13 LoadLo(Constant(1))
5e # @14 Add(SP)
06 # @15 StoreReg(SP)
# end resolving macro: 'pop b'
# begin resolving macro: 'halt'
8f # @16 LoadLo(Constant(15))
07 # @17 StoreReg(PC)
# end resolving macro: 'halt'
# Function { name: "fib", args: ["n"], locals: {"sum1", "sum2"}, body: [If { predicate: Operation(Equals, Ident("n"), Number(0)), when_true: [Return { value: Number(1) }] }, Assign { local: "n", value: Operation(Subtract, Ident("n"), Number(1)) }, If { predicate: Operation(Equals, Ident("n"), Number(0)), when_true: [Return { value: Number(1) }] }, Call { local: "sum1", function: "fib", parameters: [Ident("n")] }, Assign { local: "n", value: Operation(Subtract, Ident("n"), Number(1)) }, Call { local: "sum2", function: "fib", parameters: [Ident("n")] }, Return { value: Operation(Add, Ident("sum1"), Ident("sum2")) }] }
# # Function: fib
# ":fib"
# # sp+2 -> RESULT
# # sp+1 -> n
# # sp+0 -> RETURN_ADDRESS
# # Register(D) -> sum1
# # Register(E) -> sum2
# Begin statement If { predicate: Operation(Equals, Ident("n"), Number(0)), when_true: [Return { value: Number(1) }] }
# Evaluating expression: Operation(Equals, Ident("n"), Number(0))
# Evaluating expression: Ident("n")
81 # @18 LoadLo(Constant(1))
5e # @19 Add(SP)
78 # @1a LoadMem(ACC)
02 # @1b StoreReg(C)
# Evaluated expression: Ident("n")
# Evaluating expression: Number(0)
80 # @1c LoadLo(Constant(0))
90 # @1d LoadHi(Constant(0))
# Evaluated expression: Number(0)
42 # @1e Xor(C)
# Evaluated expression: Operation(Equals, Ident("n"), Number(0))
ec # @1f Jnz(Label(":fib_IF_SKIP_0")) Jnz(Constant(12))
# Begin statement Return { value: Number(1) }
# Evaluating expression: Number(1)
81 # @20 LoadLo(Constant(1))
90 # @21 LoadHi(Constant(0))
01 # @22 StoreReg(B)
# Evaluated expression: Number(1)
82 # @23 LoadLo(Constant(2))
5e # @24 Add(SP)
02 # @25 StoreReg(C)
71 # @26 LoadReg(B)
0a # @27 StoreMem(C)
8b # @28 LoadLo(Label(":fib__EPILOGUE")) LoadLo(Constant(11))
9b # @29 LoadHi(Label(":fib__EPILOGUE")) LoadHi(Constant(11))
07 # @2a StoreReg(PC)
# Done  statement Return { value: Number(1) }
# ":fib_IF_SKIP_0"
# Done  statement If { predicate: Operation(Equals, Ident("n"), Number(0)), when_true: [Return { value: Number(1) }] }
# Begin statement Assign { local: "n", value: Operation(Subtract, Ident("n"), Number(1)) }
# Evaluating expression: Operation(Subtract, Ident("n"), Number(1))
# Evaluating expression: Ident("n")
81 # @2b LoadLo(Constant(1))
5e # @2c Add(SP)
78 # @2d LoadMem(ACC)
02 # @2e StoreReg(C)
# Evaluated expression: Ident("n")
# Evaluating expression: Number(1)
81 # @2f LoadLo(Constant(1))
90 # @30 LoadHi(Constant(0))
# Evaluated expression: Number(1)
60 # @31 Not(ACC)
01 # @32 StoreReg(B)
81 # @33 LoadLo(Constant(1))
59 # @34 Add(B)
5a # @35 Add(C)
01 # @36 StoreReg(B)
# Evaluated expression: Operation(Subtract, Ident("n"), Number(1))
81 # @37 LoadLo(Constant(1))
5e # @38 Add(SP)
02 # @39 StoreReg(C)
71 # @3a LoadReg(B)
0a # @3b StoreMem(C)
# Done  statement Assign { local: "n", value: Operation(Subtract, Ident("n"), Number(1)) }
# Begin statement If { predicate: Operation(Equals, Ident("n"), Number(0)), when_true: [Return { value: Number(1) }] }
# Evaluating expression: Operation(Equals, Ident("n"), Number(0))
# Evaluating expression: Ident("n")
81 # @3c LoadLo(Constant(1))
5e # @3d Add(SP)
78 # @3e LoadMem(ACC)
02 # @3f StoreReg(C)
# Evaluated expression: Ident("n")
# Evaluating expression: Number(0)
80 # @40 LoadLo(Constant(0))
90 # @41 LoadHi(Constant(0))
# Evaluated expression: Number(0)
42 # @42 Xor(C)
# Evaluated expression: Operation(Equals, Ident("n"), Number(0))
ec # @43 Jnz(Label(":fib_IF_SKIP_1")) Jnz(Constant(12))
# Begin statement Return { value: Number(1) }
# Evaluating expression: Number(1)
81 # @44 LoadLo(Constant(1))
90 # @45 LoadHi(Constant(0))
01 # @46 StoreReg(B)
# Evaluated expression: Number(1)
82 # @47 LoadLo(Constant(2))
5e # @48 Add(SP)
02 # @49 StoreReg(C)
71 # @4a LoadReg(B)
0a # @4b StoreMem(C)
8b # @4c LoadLo(Label(":fib__EPILOGUE")) LoadLo(Constant(11))
9b # @4d LoadHi(Label(":fib__EPILOGUE")) LoadHi(Constant(11))
07 # @4e StoreReg(PC)
# Done  statement Return { value: Number(1) }
# ":fib_IF_SKIP_1"
# Done  statement If { predicate: Operation(Equals, Ident("n"), Number(0)), when_true: [Return { value: Number(1) }] }
# Begin statement Call { local: "sum1", function: "fib", parameters: [Ident("n")] }
# begin resolving macro: 'dec sp'
8f # @4f LoadLo(Constant(15))
5e # @50 Add(SP)
06 # @51 StoreReg(SP)
# end resolving macro: 'dec sp'
# Evaluating expression: Ident("n")
82 # @52 LoadLo(Constant(2))
5e # @53 Add(SP)
78 # @54 LoadMem(ACC)
01 # @55 StoreReg(B)
# Evaluated expression: Ident("n")
# begin resolving macro: 'push b'
8f # @56 LoadLo(Constant(15))
5e # @57 Add(SP)
06 # @58 StoreReg(SP)
71 # @59 LoadReg(B)
0e # @5a StoreMem(SP)
# end resolving macro: 'push b'
# begin resolving macro: 'call :fib'
8f # @5b LoadLo(Constant(15))
5e # @5c Add(SP)
06 # @5d StoreReg(SP)
85 # @5e LoadLo(Constant(5))
5f # @5f Add(PC)
0e # @60 StoreMem(SP)
88 # @61 LoadLo(Label(":fib")) LoadLo(Constant(8))
91 # @62 LoadHi(Label(":fib")) LoadHi(Constant(1))
07 # @63 StoreReg(PC)
81 # @64 LoadLo(Constant(1))
5e # @65 Add(SP)
06 # @66 StoreReg(SP)
# end resolving macro: 'call :fib'
81 # @67 LoadLo(Constant(1))
5e # @68 Add(SP)
06 # @69 StoreReg(SP)
# begin resolving macro: 'pop b'
7e # @6a LoadMem(SP)
01 # @6b StoreReg(B)
81 # @6c LoadLo(Constant(1))
5e # @6d Add(SP)
06 # @6e StoreReg(SP)
# end resolving macro: 'pop b'
71 # @6f LoadReg(B)
03 # @70 StoreReg(D)
# Done  statement Call { local: "sum1", function: "fib", parameters: [Ident("n")] }
# Begin statement Assign { local: "n", value: Operation(Subtract, Ident("n"), Number(1)) }
# Evaluating expression: Operation(Subtract, Ident("n"), Number(1))
# Evaluating expression: Ident("n")
81 # @71 LoadLo(Constant(1))
5e # @72 Add(SP)
78 # @73 LoadMem(ACC)
02 # @74 StoreReg(C)
# Evaluated expression: Ident("n")
# Evaluating expression: Number(1)
81 # @75 LoadLo(Constant(1))
90 # @76 LoadHi(Constant(0))
# Evaluated expression: Number(1)
60 # @77 Not(ACC)
01 # @78 StoreReg(B)
81 # @79 LoadLo(Constant(1))
59 # @7a Add(B)
5a # @7b Add(C)
01 # @7c StoreReg(B)
# Evaluated expression: Operation(Subtract, Ident("n"), Number(1))
81 # @7d LoadLo(Constant(1))
5e # @7e Add(SP)
02 # @7f StoreReg(C)
71 # @80 LoadReg(B)
0a # @81 StoreMem(C)
# Done  statement Assign { local: "n", value: Operation(Subtract, Ident("n"), Number(1)) }
# Begin statement Call { local: "sum2", function: "fib", parameters: [Ident("n")] }
# begin resolving macro: 'dec sp'
8f # @82 LoadLo(Constant(15))
5e # @83 Add(SP)
06 # @84 StoreReg(SP)
# end resolving macro: 'dec sp'
# begin resolving macro: 'push d'
8f # @85 LoadLo(Constant(15))
5e # @86 Add(SP)
06 # @87 StoreReg(SP)
73 # @88 LoadReg(D)
0e # @89 StoreMem(SP)
# end resolving macro: 'push d'
# Evaluating expression: Ident("n")
83 # @8a LoadLo(Constant(3))
5e # @8b Add(SP)
78 # @8c LoadMem(ACC)
01 # @8d StoreReg(B)
# Evaluated expression: Ident("n")
# begin resolving macro: 'push b'
8f # @8e LoadLo(Constant(15))
5e # @8f Add(SP)
06 # @90 StoreReg(SP)
71 # @91 LoadReg(B)
0e # @92 StoreMem(SP)
# end resolving macro: 'push b'
# begin resolving macro: 'call :fib'
8f # @93 LoadLo(Constant(15))
5e # @94 Add(SP)
06 # @95 StoreReg(SP)
85 # @96 LoadLo(Constant(5))
5f # @97 Add(PC)
0e # @98 StoreMem(SP)
88 # @99 LoadLo(Label(":fib")) LoadLo(Constant(8))
91 # @9a LoadHi(Label(":fib")) LoadHi(Constant(1))
07 # @9b StoreReg(PC)
81 # @9c LoadLo(Constant(1))
5e # @9d Add(SP)
06 # @9e StoreReg(SP)
# end resolving macro: 'call :fib'
81 # @9f LoadLo(Constant(1))
5e # @a0 Add(SP)
06 # @a1 StoreReg(SP)
# begin resolving macro: 'pop d'
7e # @a2 LoadMem(SP)
03 # @a3 StoreReg(D)
81 # @a4 LoadLo(Constant(1))
5e # @a5 Add(SP)
06 # @a6 StoreReg(SP)
# end resolving macro: 'pop d'
# begin resolving macro: 'pop b'
7e # @a7 LoadMem(SP)
01 # @a8 StoreReg(B)
81 # @a9 LoadLo(Constant(1))
5e # @aa Add(SP)
06 # @ab StoreReg(SP)
# end resolving macro: 'pop b'
71 # @ac LoadReg(B)
04 # @ad StoreReg(E)
# Done  statement Call { local: "sum2", function: "fib", parameters: [Ident("n")] }
# Begin statement Return { value: Operation(Add, Ident("sum1"), Ident("sum2")) }
# Evaluating expression: Operation(Add, Ident("sum1"), Ident("sum2"))
# Evaluating expression: Ident("sum1")
73 # @ae LoadReg(D)
02 # @af StoreReg(C)
# Evaluated expression: Ident("sum1")
# Evaluating expression: Ident("sum2")
74 # @b0 LoadReg(E)
# Evaluated expression: Ident("sum2")
5a # @b1 Add(C)
01 # @b2 StoreReg(B)
# Evaluated expression: Operation(Add, Ident("sum1"), Ident("sum2"))
82 # @b3 LoadLo(Constant(2))
5e # @b4 Add(SP)
02 # @b5 StoreReg(C)
71 # @b6 LoadReg(B)
0a # @b7 StoreMem(C)
8b # @b8 LoadLo(Label(":fib__EPILOGUE")) LoadLo(Constant(11))
9b # @b9 LoadHi(Label(":fib__EPILOGUE")) LoadHi(Constant(11))
07 # @ba StoreReg(PC)
# Done  statement Return { value: Operation(Add, Ident("sum1"), Ident("sum2")) }
# ":fib__EPILOGUE"
# begin resolving macro: 'ret'
7e # @bb LoadMem(SP)
07 # @bc StoreReg(PC)
# end resolving macro: 'ret'
# Function { name: "main", args: [], locals: {"result"}, body: [Call { local: "result", function: "fib", parameters: [Number(5)] }, Return { value: Ident("result") }] }
# # Function: main
# ":main"
# # sp+1 -> RESULT
# # sp+0 -> RETURN_ADDRESS
# # Register(D) -> result
# Begin statement Call { local: "result", function: "fib", parameters: [Number(5)] }
# begin resolving macro: 'dec sp'
8f # @bd LoadLo(Constant(15))
5e # @be Add(SP)
06 # @bf StoreReg(SP)
# end resolving macro: 'dec sp'
# Evaluating expression: Number(5)
85 # @c0 LoadLo(Constant(5))
90 # @c1 LoadHi(Constant(0))
01 # @c2 StoreReg(B)
# Evaluated expression: Number(5)
# begin resolving macro: 'push b'
8f # @c3 LoadLo(Constant(15))
5e # @c4 Add(SP)
06 # @c5 StoreReg(SP)
71 # @c6 LoadReg(B)
0e # @c7 StoreMem(SP)
# end resolving macro: 'push b'
# begin resolving macro: 'call :fib'
8f # @c8 LoadLo(Constant(15))
5e # @c9 Add(SP)
06 # @ca StoreReg(SP)
85 # @cb LoadLo(Constant(5))
5f # @cc Add(PC)
0e # @cd StoreMem(SP)
88 # @ce LoadLo(Label(":fib")) LoadLo(Constant(8))
91 # @cf LoadHi(Label(":fib")) LoadHi(Constant(1))
07 # @d0 StoreReg(PC)
81 # @d1 LoadLo(Constant(1))
5e # @d2 Add(SP)
06 # @d3 StoreReg(SP)
# end resolving macro: 'call :fib'
81 # @d4 LoadLo(Constant(1))
5e # @d5 Add(SP)
06 # @d6 StoreReg(SP)
# begin resolving macro: 'pop b'
7e # @d7 LoadMem(SP)
01 # @d8 StoreReg(B)
81 # @d9 LoadLo(Constant(1))
5e # @da Add(SP)
06 # @db StoreReg(SP)
# end resolving macro: 'pop b'
71 # @dc LoadReg(B)
03 # @dd StoreReg(D)
# Done  statement Call { local: "result", function: "fib", parameters: [Number(5)] }
# Begin statement Return { value: Ident("result") }
# Evaluating expression: Ident("result")
73 # @de LoadReg(D)
01 # @df StoreReg(B)
# Evaluated expression: Ident("result")
81 # @e0 LoadLo(Constant(1))
5e # @e1 Add(SP)
02 # @e2 StoreReg(C)
71 # @e3 LoadReg(B)
0a # @e4 StoreMem(C)
88 # @e5 LoadLo(Label(":main__EPILOGUE")) LoadLo(Constant(8))
9e # @e6 LoadHi(Label(":main__EPILOGUE")) LoadHi(Constant(14))
07 # @e7 StoreReg(PC)
# Done  statement Return { value: Ident("result") }
# ":main__EPILOGUE"
# begin resolving macro: 'ret'
7e # @e8 LoadMem(SP)
07 # @e9 StoreReg(PC)
# end resolving macro: 'ret'
# begin simulation
# PC:00 [0, 0, 0, 0, 0, 0, 0, 0] LoadLo(Constant(15)) [255, 0, 0, 0, 0, 0, 0, 0]
# PC:01 [255, 0, 0, 0, 0, 0, 0, 1] StoreReg(SP) [255, 0, 0, 0, 0, 0, 255, 1]
# PC:02 [255, 0, 0, 0, 0, 0, 255, 2] LoadLo(Constant(15)) [255, 0, 0, 0, 0, 0, 255, 2]
# PC:03 [255, 0, 0, 0, 0, 0, 255, 3] Add(SP) [254, 0, 0, 0, 0, 1, 255, 3]
# PC:04 [254, 0, 0, 0, 0, 1, 255, 4] StoreReg(SP) [254, 0, 0, 0, 0, 1, 254, 4]
# PC:05 [254, 0, 0, 0, 0, 1, 254, 5] LoadLo(Constant(15)) [255, 0, 0, 0, 0, 1, 254, 5]
# PC:06 [255, 0, 0, 0, 0, 1, 254, 6] Add(SP) [253, 0, 0, 0, 0, 1, 254, 6]
# PC:07 [253, 0, 0, 0, 0, 1, 254, 7] StoreReg(SP) [253, 0, 0, 0, 0, 1, 253, 7]
# PC:08 [253, 0, 0, 0, 0, 1, 253, 8] LoadLo(Constant(5)) [5, 0, 0, 0, 0, 1, 253, 8]
# PC:09 [5, 0, 0, 0, 0, 1, 253, 9] Add(PC) [14, 0, 0, 0, 0, 0, 253, 9]
# PC:0a [14, 0, 0, 0, 0, 0, 253, 10] StoreMem(SP) [14, 0, 0, 0, 0, 0, 253, 10]
# PC:0b [14, 0, 0, 0, 0, 0, 253, 11] LoadLo(Constant(13)) [253, 0, 0, 0, 0, 0, 253, 11]
# PC:0c [253, 0, 0, 0, 0, 0, 253, 12] LoadHi(Constant(11)) [189, 0, 0, 0, 0, 0, 253, 12]
# PC:0d [189, 0, 0, 0, 0, 0, 253, 13] StoreReg(PC) [189, 0, 0, 0, 0, 0, 253, 189]
# PC:bd [189, 0, 0, 0, 0, 0, 253, 189] LoadLo(Constant(15)) [255, 0, 0, 0, 0, 0, 253, 189]
# PC:be [255, 0, 0, 0, 0, 0, 253, 190] Add(SP) [252, 0, 0, 0, 0, 1, 253, 190]
# PC:bf [252, 0, 0, 0, 0, 1, 253, 191] StoreReg(SP) [252, 0, 0, 0, 0, 1, 252, 191]
# PC:c0 [252, 0, 0, 0, 0, 1, 252, 192] LoadLo(Constant(5)) [5, 0, 0, 0, 0, 1, 252, 192]
# PC:c1 [5, 0, 0, 0, 0, 1, 252, 193] LoadHi(Constant(0)) [5, 0, 0, 0, 0, 1, 252, 193]
# PC:c2 [5, 0, 0, 0, 0, 1, 252, 194] StoreReg(B) [5, 5, 0, 0, 0, 1, 252, 194]
# PC:c3 [5, 5, 0, 0, 0, 1, 252, 195] LoadLo(Constant(15)) [255, 5, 0, 0, 0, 1, 252, 195]
# PC:c4 [255, 5, 0, 0, 0, 1, 252, 196] Add(SP) [251, 5, 0, 0, 0, 1, 252, 196]
# PC:c5 [251, 5, 0, 0, 0, 1, 252, 197] StoreReg(SP) [251, 5, 0, 0, 0, 1, 251, 197]
# PC:c6 [251, 5, 0, 0, 0, 1, 251, 198] LoadReg(B) [5, 5, 0, 0, 0, 1, 251, 198]
# PC:c7 [5, 5, 0, 0, 0, 1, 251, 199] StoreMem(SP) [5, 5, 0, 0, 0, 1, 251, 199]
# PC:c8 [5, 5, 0, 0, 0, 1, 251, 200] LoadLo(Constant(15)) [255, 5, 0, 0, 0, 1, 251, 200]
# PC:c9 [255, 5, 0, 0, 0, 1, 251, 201] Add(SP) [250, 5, 0, 0, 0, 1, 251, 201]
# PC:ca [250, 5, 0, 0, 0, 1, 251, 202] StoreReg(SP) [250, 5, 0, 0, 0, 1, 250, 202]
# PC:cb [250, 5, 0, 0, 0, 1, 250, 203] LoadLo(Constant(5)) [5, 5, 0, 0, 0, 1, 250, 203]
# PC:cc [5, 5, 0, 0, 0, 1, 250, 204] Add(PC) [209, 5, 0, 0, 0, 0, 250, 204]
# PC:cd [209, 5, 0, 0, 0, 0, 250, 205] StoreMem(SP) [209, 5, 0, 0, 0, 0, 250, 205]
# PC:ce [209, 5, 0, 0, 0, 0, 250, 206] LoadLo(Constant(8)) [248, 5, 0, 0, 0, 0, 250, 206]
# PC:cf [248, 5, 0, 0, 0, 0, 250, 207] LoadHi(Constant(1)) [24, 5, 0, 0, 0, 0, 250, 207]
# PC:d0 [24, 5, 0, 0, 0, 0, 250, 208] StoreReg(PC) [24, 5, 0, 0, 0, 0, 250, 24]
# PC:18 [24, 5, 0, 0, 0, 0, 250, 24] LoadLo(Constant(1)) [1, 5, 0, 0, 0, 0, 250, 24]
# PC:19 [1, 5, 0, 0, 0, 0, 250, 25] Add(SP) [251, 5, 0, 0, 0, 0, 250, 25]
# PC:1a [251, 5, 0, 0, 0, 0, 250, 26] LoadMem(ACC) [5, 5, 0, 0, 0, 0, 250, 26]
# PC:1b [5, 5, 0, 0, 0, 0, 250, 27] StoreReg(C) [5, 5, 5, 0, 0, 0, 250, 27]
# PC:1c [5, 5, 5, 0, 0, 0, 250, 28] LoadLo(Constant(0)) [0, 5, 5, 0, 0, 0, 250, 28]
# PC:1d [0, 5, 5, 0, 0, 0, 250, 29] LoadHi(Constant(0)) [0, 5, 5, 0, 0, 0, 250, 29]
# PC:1e [0, 5, 5, 0, 0, 0, 250, 30] Xor(C) [5, 5, 5, 0, 0, 0, 250, 30]
# PC:1f [5, 5, 5, 0, 0, 0, 250, 31] Jnz(Constant(12)) [5, 5, 5, 0, 0, 0, 250, 43]
# PC:2b [5, 5, 5, 0, 0, 0, 250, 43] LoadLo(Constant(1)) [1, 5, 5, 0, 0, 0, 250, 43]
# PC:2c [1, 5, 5, 0, 0, 0, 250, 44] Add(SP) [251, 5, 5, 0, 0, 0, 250, 44]
# PC:2d [251, 5, 5, 0, 0, 0, 250, 45] LoadMem(ACC) [5, 5, 5, 0, 0, 0, 250, 45]
# PC:2e [5, 5, 5, 0, 0, 0, 250, 46] StoreReg(C) [5, 5, 5, 0, 0, 0, 250, 46]
# PC:2f [5, 5, 5, 0, 0, 0, 250, 47] LoadLo(Constant(1)) [1, 5, 5, 0, 0, 0, 250, 47]
# PC:30 [1, 5, 5, 0, 0, 0, 250, 48] LoadHi(Constant(0)) [1, 5, 5, 0, 0, 0, 250, 48]
# PC:31 [1, 5, 5, 0, 0, 0, 250, 49] Not(ACC) [254, 5, 5, 0, 0, 0, 250, 49]
# PC:32 [254, 5, 5, 0, 0, 0, 250, 50] StoreReg(B) [254, 254, 5, 0, 0, 0, 250, 50]
# PC:33 [254, 254, 5, 0, 0, 0, 250, 51] LoadLo(Constant(1)) [1, 254, 5, 0, 0, 0, 250, 51]
# PC:34 [1, 254, 5, 0, 0, 0, 250, 52] Add(B) [255, 254, 5, 0, 0, 0, 250, 52]
# PC:35 [255, 254, 5, 0, 0, 0, 250, 53] Add(C) [4, 254, 5, 0, 0, 1, 250, 53]
# PC:36 [4, 254, 5, 0, 0, 1, 250, 54] StoreReg(B) [4, 4, 5, 0, 0, 1, 250, 54]
# PC:37 [4, 4, 5, 0, 0, 1, 250, 55] LoadLo(Constant(1)) [1, 4, 5, 0, 0, 1, 250, 55]
# PC:38 [1, 4, 5, 0, 0, 1, 250, 56] Add(SP) [251, 4, 5, 0, 0, 0, 250, 56]
# PC:39 [251, 4, 5, 0, 0, 0, 250, 57] StoreReg(C) [251, 4, 251, 0, 0, 0, 250, 57]
# PC:3a [251, 4, 251, 0, 0, 0, 250, 58] LoadReg(B) [4, 4, 251, 0, 0, 0, 250, 58]
# PC:3b [4, 4, 251, 0, 0, 0, 250, 59] StoreMem(C) [4, 4, 251, 0, 0, 0, 250, 59]
# PC:3c [4, 4, 251, 0, 0, 0, 250, 60] LoadLo(Constant(1)) [1, 4, 251, 0, 0, 0, 250, 60]
# PC:3d [1, 4, 251, 0, 0, 0, 250, 61] Add(SP) [251, 4, 251, 0, 0, 0, 250, 61]
# PC:3e [251, 4, 251, 0, 0, 0, 250, 62] LoadMem(ACC) [4, 4, 251, 0, 0, 0, 250, 62]
# PC:3f [4, 4, 251, 0, 0, 0, 250, 63] StoreReg(C) [4, 4, 4, 0, 0, 0, 250, 63]
# PC:40 [4, 4, 4, 0, 0, 0, 250, 64] LoadLo(Constant(0)) [0, 4, 4, 0, 0, 0, 250, 64]
# PC:41 [0, 4, 4, 0, 0, 0, 250, 65] LoadHi(Constant(0)) [0, 4, 4, 0, 0, 0, 250, 65]
# PC:42 [0, 4, 4, 0, 0, 0, 250, 66] Xor(C) [4, 4, 4, 0, 0, 0, 250, 66]
# PC:43 [4, 4, 4, 0, 0, 0, 250, 67] Jnz(Constant(12)) [4, 4, 4, 0, 0, 0, 250, 79]
# PC:4f [4, 4, 4, 0, 0, 0, 250, 79] LoadLo(Constant(15)) [255, 4, 4, 0, 0, 0, 250, 79]
# PC:50 [255, 4, 4, 0, 0, 0, 250, 80] Add(SP) [249, 4, 4, 0, 0, 1, 250, 80]
# PC:51 [249, 4, 4, 0, 0, 1, 250, 81] StoreReg(SP) [249, 4, 4, 0, 0, 1, 249, 81]
# PC:52 [249, 4, 4, 0, 0, 1, 249, 82] LoadLo(Constant(2)) [2, 4, 4, 0, 0, 1, 249, 82]
# PC:53 [2, 4, 4, 0, 0, 1, 249, 83] Add(SP) [251, 4, 4, 0, 0, 0, 249, 83]
# PC:54 [251, 4, 4, 0, 0, 0, 249, 84] LoadMem(ACC) [4, 4, 4, 0, 0, 0, 249, 84]
# PC:55 [4, 4, 4, 0, 0, 0, 249, 85] StoreReg(B) [4, 4, 4, 0, 0, 0, 249, 85]
# PC:56 [4, 4, 4, 0, 0, 0, 249, 86] LoadLo(Constant(15)) [255, 4, 4, 0, 0, 0, 249, 86]
# PC:57 [255, 4, 4, 0, 0, 0, 249, 87] Add(SP) [248, 4, 4, 0, 0, 1, 249, 87]
# PC:58 [248, 4, 4, 0, 0, 1, 249, 88] StoreReg(SP) [248, 4, 4, 0, 0, 1, 248, 88]
# PC:59 [248, 4, 4, 0, 0, 1, 248, 89] LoadReg(B) [4, 4, 4, 0, 0, 1, 248, 89]
# PC:5a [4, 4, 4, 0, 0, 1, 248, 90] StoreMem(SP) [4, 4, 4, 0, 0, 1, 248, 90]
# PC:5b [4, 4, 4, 0, 0, 1, 248, 91] LoadLo(Constant(15)) [255, 4, 4, 0, 0, 1, 248, 91]
# PC:5c [255, 4, 4, 0, 0, 1, 248, 92] Add(SP) [247, 4, 4, 0, 0, 1, 248, 92]
# PC:5d [247, 4, 4, 0, 0, 1, 248, 93] StoreReg(SP) [247, 4, 4, 0, 0, 1, 247, 93]
# PC:5e [247, 4, 4, 0, 0, 1, 247, 94] LoadLo(Constant(5)) [5, 4, 4, 0, 0, 1, 247, 94]
# PC:5f [5, 4, 4, 0, 0, 1, 247, 95] Add(PC) [100, 4, 4, 0, 0, 0, 247, 95]
# PC:60 [100, 4, 4, 0, 0, 0, 247, 96] StoreMem(SP) [100, 4, 4, 0, 0, 0, 247, 96]
# PC:61 [100, 4, 4, 0, 0, 0, 247, 97] LoadLo(Constant(8)) [248, 4, 4, 0, 0, 0, 247, 97]
# PC:62 [248, 4, 4, 0, 0, 0, 247, 98] LoadHi(Constant(1)) [24, 4, 4, 0, 0, 0, 247, 98]
# PC:63 [24, 4, 4, 0, 0, 0, 247, 99] StoreReg(PC) [24, 4, 4, 0, 0, 0, 247, 24]
# PC:18 [24, 4, 4, 0, 0, 0, 247, 24] LoadLo(Constant(1)) [1, 4, 4, 0, 0, 0, 247, 24]
# PC:19 [1, 4, 4, 0, 0, 0, 247, 25] Add(SP) [248, 4, 4, 0, 0, 0, 247, 25]
# PC:1a [248, 4, 4, 0, 0, 0, 247, 26] LoadMem(ACC) [4, 4, 4, 0, 0, 0, 247, 26]
# PC:1b [4, 4, 4, 0, 0, 0, 247, 27] StoreReg(C) [4, 4, 4, 0, 0, 0, 247, 27]
# PC:1c [4, 4, 4, 0, 0, 0, 247, 28] LoadLo(Constant(0)) [0, 4, 4, 0, 0, 0, 247, 28]
# PC:1d [0, 4, 4, 0, 0, 0, 247, 29] LoadHi(Constant(0)) [0, 4, 4, 0, 0, 0, 247, 29]
# PC:1e [0, 4, 4, 0, 0, 0, 247, 30] Xor(C) [4, 4, 4, 0, 0, 0, 247, 30]
# PC:1f [4, 4, 4, 0, 0, 0, 247, 31] Jnz(Constant(12)) [4, 4, 4, 0, 0, 0, 247, 43]
# PC:2b [4, 4, 4, 0, 0, 0, 247, 43] LoadLo(Constant(1)) [1, 4, 4, 0, 0, 0, 247, 43]
# PC:2c [1, 4, 4, 0, 0, 0, 247, 44] Add(SP) [248, 4, 4, 0, 0, 0, 247, 44]
# PC:2d [248, 4, 4, 0, 0, 0, 247, 45] LoadMem(ACC) [4, 4, 4, 0, 0, 0, 247, 45]
# PC:2e [4, 4, 4, 0, 0, 0, 247, 46] StoreReg(C) [4, 4, 4, 0, 0, 0, 247, 46]
# PC:2f [4, 4, 4, 0, 0, 0, 247, 47] LoadLo(Constant(1)) [1, 4, 4, 0, 0, 0, 247, 47]
# PC:30 [1, 4, 4, 0, 0, 0, 247, 48] LoadHi(Constant(0)) [1, 4, 4, 0, 0, 0, 247, 48]
# PC:31 [1, 4, 4, 0, 0, 0, 247, 49] Not(ACC) [254, 4, 4, 0, 0, 0, 247, 49]
# PC:32 [254, 4, 4, 0, 0, 0, 247, 50] StoreReg(B) [254, 254, 4, 0, 0, 0, 247, 50]
# PC:33 [254, 254, 4, 0, 0, 0, 247, 51] LoadLo(Constant(1)) [1, 254, 4, 0, 0, 0, 247, 51]
# PC:34 [1, 254, 4, 0, 0, 0, 247, 52] Add(B) [255, 254, 4, 0, 0, 0, 247, 52]
# PC:35 [255, 254, 4, 0, 0, 0, 247, 53] Add(C) [3, 254, 4, 0, 0, 1, 247, 53]
# PC:36 [3, 254, 4, 0, 0, 1, 247, 54] StoreReg(B) [3, 3, 4, 0, 0, 1, 247, 54]
# PC:37 [3, 3, 4, 0, 0, 1, 247, 55] LoadLo(Constant(1)) [1, 3, 4, 0, 0, 1, 247, 55]
# PC:38 [1, 3, 4, 0, 0, 1, 247, 56] Add(SP) [248, 3, 4, 0, 0, 0, 247, 56]
# PC:39 [248, 3, 4, 0, 0, 0, 247, 57] StoreReg(C) [248, 3, 248, 0, 0, 0, 247, 57]
# PC:3a [248, 3, 248, 0, 0, 0, 247, 58] LoadReg(B) [3, 3, 248, 0, 0, 0, 247, 58]
# PC:3b [3, 3, 248, 0, 0, 0, 247, 59] StoreMem(C) [3, 3, 248, 0, 0, 0, 247, 59]
# PC:3c [3, 3, 248, 0, 0, 0, 247, 60] LoadLo(Constant(1)) [1, 3, 248, 0, 0, 0, 247, 60]
# PC:3d [1, 3, 248, 0, 0, 0, 247, 61] Add(SP) [248, 3, 248, 0, 0, 0, 247, 61]
# PC:3e [248, 3, 248, 0, 0, 0, 247, 62] LoadMem(ACC) [3, 3, 248, 0, 0, 0, 247, 62]
# PC:3f [3, 3, 248, 0, 0, 0, 247, 63] StoreReg(C) [3, 3, 3, 0, 0, 0, 247, 63]
# PC:40 [3, 3, 3, 0, 0, 0, 247, 64] LoadLo(Constant(0)) [0, 3, 3, 0, 0, 0, 247, 64]
# PC:41 [0, 3, 3, 0, 0, 0, 247, 65] LoadHi(Constant(0)) [0, 3, 3, 0, 0, 0, 247, 65]
# PC:42 [0, 3, 3, 0, 0, 0, 247, 66] Xor(C) [3, 3, 3, 0, 0, 0, 247, 66]
# PC:43 [3, 3, 3, 0, 0, 0, 247, 67] Jnz(Constant(12)) [3, 3, 3, 0, 0, 0, 247, 79]
# PC:4f [3, 3, 3, 0, 0, 0, 247, 79] LoadLo(Constant(15)) [255, 3, 3, 0, 0, 0, 247, 79]
# PC:50 [255, 3, 3, 0, 0, 0, 247, 80] Add(SP) [246, 3, 3, 0, 0, 1, 247, 80]
# PC:51 [246, 3, 3, 0, 0, 1, 247, 81] StoreReg(SP) [246, 3, 3, 0, 0, 1, 246, 81]
# PC:52 [246, 3, 3, 0, 0, 1, 246, 82] LoadLo(Constant(2)) [2, 3, 3, 0, 0, 1, 246, 82]
# PC:53 [2, 3, 3, 0, 0, 1, 246, 83] Add(SP) [248, 3, 3, 0, 0, 0, 246, 83]
# PC:54 [248, 3, 3, 0, 0, 0, 246, 84] LoadMem(ACC) [3, 3, 3, 0, 0, 0, 246, 84]
# PC:55 [3, 3, 3, 0, 0, 0, 246, 85] StoreReg(B) [3, 3, 3, 0, 0, 0, 246, 85]
# PC:56 [3, 3, 3, 0, 0, 0, 246, 86] LoadLo(Constant(15)) [255, 3, 3, 0, 0, 0, 246, 86]
# PC:57 [255, 3, 3, 0, 0, 0, 246, 87] Add(SP) [245, 3, 3, 0, 0, 1, 246, 87]
# PC:58 [245, 3, 3, 0, 0, 1, 246, 88] StoreReg(SP) [245, 3, 3, 0, 0, 1, 245, 88]
# PC:59 [245, 3, 3, 0, 0, 1, 245, 89] LoadReg(B) [3, 3, 3, 0, 0, 1, 245, 89]
# PC:5a [3, 3, 3, 0, 0, 1, 245, 90] StoreMem(SP) [3, 3, 3, 0, 0, 1, 245, 90]
# PC:5b [3, 3, 3, 0, 0, 1, 245, 91] LoadLo(Constant(15)) [255, 3, 3, 0, 0, 1, 245, 91]
# PC:5c [255, 3, 3, 0, 0, 1, 245, 92] Add(SP) [244, 3, 3, 0, 0, 1, 245, 92]
# PC:5d [244, 3, 3, 0, 0, 1, 245, 93] StoreReg(SP) [244, 3, 3, 0, 0, 1, 244, 93]
# PC:5e [244, 3, 3, 0, 0, 1, 244, 94] LoadLo(Constant(5)) [5, 3, 3, 0, 0, 1, 244, 94]
# PC:5f [5, 3, 3, 0, 0, 1, 244, 95] Add(PC) [100, 3, 3, 0, 0, 0, 244, 95]
# PC:60 [100, 3, 3, 0, 0, 0, 244, 96] StoreMem(SP) [100, 3, 3, 0, 0, 0, 244, 96]
# PC:61 [100, 3, 3, 0, 0, 0, 244, 97] LoadLo(Constant(8)) [248, 3, 3, 0, 0, 0, 244, 97]
# PC:62 [248, 3, 3, 0, 0, 0, 244, 98] LoadHi(Constant(1)) [24, 3, 3, 0, 0, 0, 244, 98]
# PC:63 [24, 3, 3, 0, 0, 0, 244, 99] StoreReg(PC) [24, 3, 3, 0, 0, 0, 244, 24]
# PC:18 [24, 3, 3, 0, 0, 0, 244, 24] LoadLo(Constant(1)) [1, 3, 3, 0, 0, 0, 244, 24]
# PC:19 [1, 3, 3, 0, 0, 0, 244, 25] Add(SP) [245, 3, 3, 0, 0, 0, 244, 25]
# PC:1a [245, 3, 3, 0, 0, 0, 244, 26] LoadMem(ACC) [3, 3, 3, 0, 0, 0, 244, 26]
# PC:1b [3, 3, 3, 0, 0, 0, 244, 27] StoreReg(C) [3, 3, 3, 0, 0, 0, 244, 27]
# PC:1c [3, 3, 3, 0, 0, 0, 244, 28] LoadLo(Constant(0)) [0, 3, 3, 0, 0, 0, 244, 28]
# PC:1d [0, 3, 3, 0, 0, 0, 244, 29] LoadHi(Constant(0)) [0, 3, 3, 0, 0, 0, 244, 29]
# PC:1e [0, 3, 3, 0, 0, 0, 244, 30] Xor(C) [3, 3, 3, 0, 0, 0, 244, 30]
# PC:1f [3, 3, 3, 0, 0, 0, 244, 31] Jnz(Constant(12)) [3, 3, 3, 0, 0, 0, 244, 43]
# PC:2b [3, 3, 3, 0, 0, 0, 244, 43] LoadLo(Constant(1)) [1, 3, 3, 0, 0, 0, 244, 43]
# PC:2c [1, 3, 3, 0, 0, 0, 244, 44] Add(SP) [245, 3, 3, 0, 0, 0, 244, 44]
# PC:2d [245, 3, 3, 0, 0, 0, 244, 45] LoadMem(ACC) [3, 3, 3, 0, 0, 0, 244, 45]
# PC:2e [3, 3, 3, 0, 0, 0, 244, 46] StoreReg(C) [3, 3, 3, 0, 0, 0, 244, 46]
# PC:2f [3, 3, 3, 0, 0, 0, 244, 47] LoadLo(Constant(1)) [1, 3, 3, 0, 0, 0, 244, 47]
# PC:30 [1, 3, 3, 0, 0, 0, 244, 48] LoadHi(Constant(0)) [1, 3, 3, 0, 0, 0, 244, 48]
# PC:31 [1, 3, 3, 0, 0, 0, 244, 49] Not(ACC) [254, 3, 3, 0, 0, 0, 244, 49]
# PC:32 [254, 3, 3, 0, 0, 0, 244, 50] StoreReg(B) [254, 254, 3, 0, 0, 0, 244, 50]
# PC:33 [254, 254, 3, 0, 0, 0, 244, 51] LoadLo(Constant(1)) [1, 254, 3, 0, 0, 0, 244, 51]
# PC:34 [1, 254, 3, 0, 0, 0, 244, 52] Add(B) [255, 254, 3, 0, 0, 0, 244, 52]
# PC:35 [255, 254, 3, 0, 0, 0, 244, 53] Add(C) [2, 254, 3, 0, 0, 1, 244, 53]
# PC:36 [2, 254, 3, 0, 0, 1, 244, 54] StoreReg(B) [2, 2, 3, 0, 0, 1, 244, 54]
# PC:37 [2, 2, 3, 0, 0, 1, 244, 55] LoadLo(Constant(1)) [1, 2, 3, 0, 0, 1, 244, 55]
# PC:38 [1, 2, 3, 0, 0, 1, 244, 56] Add(SP) [245, 2, 3, 0, 0, 0, 244, 56]
# PC:39 [245, 2, 3, 0, 0, 0, 244, 57] StoreReg(C) [245, 2, 245, 0, 0, 0, 244, 57]
# PC:3a [245, 2, 245, 0, 0, 0, 244, 58] LoadReg(B) [2, 2, 245, 0, 0, 0, 244, 58]
# PC:3b [2, 2, 245, 0, 0, 0, 244, 59] StoreMem(C) [2, 2, 245, 0, 0, 0, 244, 59]
# PC:3c [2, 2, 245, 0, 0, 0, 244, 60] LoadLo(Constant(1)) [1, 2, 245, 0, 0, 0, 244, 60]
# PC:3d [1, 2, 245, 0, 0, 0, 244, 61] Add(SP) [245, 2, 245, 0, 0, 0, 244, 61]
# PC:3e [245, 2, 245, 0, 0, 0, 244, 62] LoadMem(ACC) [2, 2, 245, 0, 0, 0, 244, 62]
# PC:3f [2, 2, 245, 0, 0, 0, 244, 63] StoreReg(C) [2, 2, 2, 0, 0, 0, 244, 63]
# PC:40 [2, 2, 2, 0, 0, 0, 244, 64] LoadLo(Constant(0)) [0, 2, 2, 0, 0, 0, 244, 64]
# PC:41 [0, 2, 2, 0, 0, 0, 244, 65] LoadHi(Constant(0)) [0, 2, 2, 0, 0, 0, 244, 65]
# PC:42 [0, 2, 2, 0, 0, 0, 244, 66] Xor(C) [2, 2, 2, 0, 0, 0, 244, 66]
# PC:43 [2, 2, 2, 0, 0, 0, 244, 67] Jnz(Constant(12)) [2, 2, 2, 0, 0, 0, 244, 79]
# PC:4f [2, 2, 2, 0, 0, 0, 244, 79] LoadLo(Constant(15)) [255, 2, 2, 0, 0, 0, 244, 79]
# PC:50 [255, 2, 2, 0, 0, 0, 244, 80] Add(SP) [243, 2, 2, 0, 0, 1, 244, 80]
# PC:51 [243, 2, 2, 0, 0, 1, 244, 81] StoreReg(SP) [243, 2, 2, 0, 0, 1, 243, 81]
# PC:52 [243, 2, 2, 0, 0, 1, 243, 82] LoadLo(Constant(2)) [2, 2, 2, 0, 0, 1, 243, 82]
# PC:53 [2, 2, 2, 0, 0, 1, 243, 83] Add(SP) [245, 2, 2, 0, 0, 0, 243, 83]
# PC:54 [245, 2, 2, 0, 0, 0, 243, 84] LoadMem(ACC) [2, 2, 2, 0, 0, 0, 243, 84]
# PC:55 [2, 2, 2, 0, 0, 0, 243, 85] StoreReg(B) [2, 2, 2, 0, 0, 0, 243, 85]
# PC:56 [2, 2, 2, 0, 0, 0, 243, 86] LoadLo(Constant(15)) [255, 2, 2, 0, 0, 0, 243, 86]
# PC:57 [255, 2, 2, 0, 0, 0, 243, 87] Add(SP) [242, 2, 2, 0, 0, 1, 243, 87]
# PC:58 [242, 2, 2, 0, 0, 1, 243, 88] StoreReg(SP) [242, 2, 2, 0, 0, 1, 242, 88]
# PC:59 [242, 2, 2, 0, 0, 1, 242, 89] LoadReg(B) [2, 2, 2, 0, 0, 1, 242, 89]
# PC:5a [2, 2, 2, 0, 0, 1, 242, 90] StoreMem(SP) [2, 2, 2, 0, 0, 1, 242, 90]
# PC:5b [2, 2, 2, 0, 0, 1, 242, 91] LoadLo(Constant(15)) [255, 2, 2, 0, 0, 1, 242, 91]
# PC:5c [255, 2, 2, 0, 0, 1, 242, 92] Add(SP) [241, 2, 2, 0, 0, 1, 242, 92]
# PC:5d [241, 2, 2, 0, 0, 1, 242, 93] StoreReg(SP) [241, 2, 2, 0, 0, 1, 241, 93]
# PC:5e [241, 2, 2, 0, 0, 1, 241, 94] LoadLo(Constant(5)) [5, 2, 2, 0, 0, 1, 241, 94]
# PC:5f [5, 2, 2, 0, 0, 1, 241, 95] Add(PC) [100, 2, 2, 0, 0, 0, 241, 95]
# PC:60 [100, 2, 2, 0, 0, 0, 241, 96] StoreMem(SP) [100, 2, 2, 0, 0, 0, 241, 96]
# PC:61 [100, 2, 2, 0, 0, 0, 241, 97] LoadLo(Constant(8)) [248, 2, 2, 0, 0, 0, 241, 97]
# PC:62 [248, 2, 2, 0, 0, 0, 241, 98] LoadHi(Constant(1)) [24, 2, 2, 0, 0, 0, 241, 98]
# PC:63 [24, 2, 2, 0, 0, 0, 241, 99] StoreReg(PC) [24, 2, 2, 0, 0, 0, 241, 24]
# PC:18 [24, 2, 2, 0, 0, 0, 241, 24] LoadLo(Constant(1)) [1, 2, 2, 0, 0, 0, 241, 24]
# PC:19 [1, 2, 2, 0, 0, 0, 241, 25] Add(SP) [242, 2, 2, 0, 0, 0, 241, 25]
# PC:1a [242, 2, 2, 0, 0, 0, 241, 26] LoadMem(ACC) [2, 2, 2, 0, 0, 0, 241, 26]
# PC:1b [2, 2, 2, 0, 0, 0, 241, 27] StoreReg(C) [2, 2, 2, 0, 0, 0, 241, 27]
# PC:1c [2, 2, 2, 0, 0, 0, 241, 28] LoadLo(Constant(0)) [0, 2, 2, 0, 0, 0, 241, 28]
# PC:1d [0, 2, 2, 0, 0, 0, 241, 29] LoadHi(Constant(0)) [0, 2, 2, 0, 0, 0, 241, 29]
# PC:1e [0, 2, 2, 0, 0, 0, 241, 30] Xor(C) [2, 2, 2, 0, 0, 0, 241, 30]
# PC:1f [2, 2, 2, 0, 0, 0, 241, 31] Jnz(Constant(12)) [2, 2, 2, 0, 0, 0, 241, 43]
# PC:2b [2, 2, 2, 0, 0, 0, 241, 43] LoadLo(Constant(1)) [1, 2, 2, 0, 0, 0, 241, 43]
# PC:2c [1, 2, 2, 0, 0, 0, 241, 44] Add(SP) [242, 2, 2, 0, 0, 0, 241, 44]
# PC:2d [242, 2, 2, 0, 0, 0, 241, 45] LoadMem(ACC) [2, 2, 2, 0, 0, 0, 241, 45]
# PC:2e [2, 2, 2, 0, 0, 0, 241, 46] StoreReg(C) [2, 2, 2, 0, 0, 0, 241, 46]
# PC:2f [2, 2, 2, 0, 0, 0, 241, 47] LoadLo(Constant(1)) [1, 2, 2, 0, 0, 0, 241, 47]
# PC:30 [1, 2, 2, 0, 0, 0, 241, 48] LoadHi(Constant(0)) [1, 2, 2, 0, 0, 0, 241, 48]
# PC:31 [1, 2, 2, 0, 0, 0, 241, 49] Not(ACC) [254, 2, 2, 0, 0, 0, 241, 49]
# PC:32 [254, 2, 2, 0, 0, 0, 241, 50] StoreReg(B) [254, 254, 2, 0, 0, 0, 241, 50]
# PC:33 [254, 254, 2, 0, 0, 0, 241, 51] LoadLo(Constant(1)) [1, 254, 2, 0, 0, 0, 241, 51]
# PC:34 [1, 254, 2, 0, 0, 0, 241, 52] Add(B) [255, 254, 2, 0, 0, 0, 241, 52]
# PC:35 [255, 254, 2, 0, 0, 0, 241, 53] Add(C) [1, 254, 2, 0, 0, 1, 241, 53]
# PC:36 [1, 254, 2, 0, 0, 1, 241, 54] StoreReg(B) [1, 1, 2, 0, 0, 1, 241, 54]
# PC:37 [1, 1, 2, 0, 0, 1, 241, 55] LoadLo(Constant(1)) [1, 1, 2, 0, 0, 1, 241, 55]
# PC:38 [1, 1, 2, 0, 0, 1, 241, 56] Add(SP) [242, 1, 2, 0, 0, 0, 241, 56]
# PC:39 [242, 1, 2, 0, 0, 0, 241, 57] StoreReg(C) [242, 1, 242, 0, 0, 0, 241, 57]
# PC:3a [242, 1, 242, 0, 0, 0, 241, 58] LoadReg(B) [1, 1, 242, 0, 0, 0, 241, 58]
# PC:3b [1, 1, 242, 0, 0, 0, 241, 59] StoreMem(C) [1, 1, 242, 0, 0, 0, 241, 59]
# PC:3c [1, 1, 242, 0, 0, 0, 241, 60] LoadLo(Constant(1)) [1, 1, 242, 0, 0, 0, 241, 60]
# PC:3d [1, 1, 242, 0, 0, 0, 241, 61] Add(SP) [242, 1, 242, 0, 0, 0, 241, 61]
# PC:3e [242, 1, 242, 0, 0, 0, 241, 62] LoadMem(ACC) [1, 1, 242, 0, 0, 0, 241, 62]
# PC:3f [1, 1, 242, 0, 0, 0, 241, 63] StoreReg(C) [1, 1, 1, 0, 0, 0, 241, 63]
# PC:40 [1, 1, 1, 0, 0, 0, 241, 64] LoadLo(Constant(0)) [0, 1, 1, 0, 0, 0, 241, 64]
# PC:41 [0, 1, 1, 0, 0, 0, 241, 65] LoadHi(Constant(0)) [0, 1, 1, 0, 0, 0, 241, 65]
# PC:42 [0, 1, 1, 0, 0, 0, 241, 66] Xor(C) [1, 1, 1, 0, 0, 0, 241, 66]
# PC:43 [1, 1, 1, 0, 0, 0, 241, 67] Jnz(Constant(12)) [1, 1, 1, 0, 0, 0, 241, 79]
# PC:4f [1, 1, 1, 0, 0, 0, 241, 79] LoadLo(Constant(15)) [255, 1, 1, 0, 0, 0, 241, 79]
# PC:50 [255, 1, 1, 0, 0, 0, 241, 80] Add(SP) [240, 1, 1, 0, 0, 1, 241, 80]
# PC:51 [240, 1, 1, 0, 0, 1, 241, 81] StoreReg(SP) [240, 1, 1, 0, 0, 1, 240, 81]
# PC:52 [240, 1, 1, 0, 0, 1, 240, 82] LoadLo(Constant(2)) [2, 1, 1, 0, 0, 1, 240, 82]
# PC:53 [2, 1, 1, 0, 0, 1, 240, 83] Add(SP) [242, 1, 1, 0, 0, 0, 240, 83]
# PC:54 [242, 1, 1, 0, 0, 0, 240, 84] LoadMem(ACC) [1, 1, 1, 0, 0, 0, 240, 84]
# PC:55 [1, 1, 1, 0, 0, 0, 240, 85] StoreReg(B) [1, 1, 1, 0, 0, 0, 240, 85]
# PC:56 [1, 1, 1, 0, 0, 0, 240, 86] LoadLo(Constant(15)) [255, 1, 1, 0, 0, 0, 240, 86]
# PC:57 [255, 1, 1, 0, 0, 0, 240, 87] Add(SP) [239, 1, 1, 0, 0, 1, 240, 87]
# PC:58 [239, 1, 1, 0, 0, 1, 240, 88] StoreReg(SP) [239, 1, 1, 0, 0, 1, 239, 88]
# PC:59 [239, 1, 1, 0, 0, 1, 239, 89] LoadReg(B) [1, 1, 1, 0, 0, 1, 239, 89]
# PC:5a [1, 1, 1, 0, 0, 1, 239, 90] StoreMem(SP) [1, 1, 1, 0, 0, 1, 239, 90]
# PC:5b [1, 1, 1, 0, 0, 1, 239, 91] LoadLo(Constant(15)) [255, 1, 1, 0, 0, 1, 239, 91]
# PC:5c [255, 1, 1, 0, 0, 1, 239, 92] Add(SP) [238, 1, 1, 0, 0, 1, 239, 92]
# PC:5d [238, 1, 1, 0, 0, 1, 239, 93] StoreReg(SP) [238, 1, 1, 0, 0, 1, 238, 93]
# PC:5e [238, 1, 1, 0, 0, 1, 238, 94] LoadLo(Constant(5)) [5, 1, 1, 0, 0, 1, 238, 94]
# PC:5f [5, 1, 1, 0, 0, 1, 238, 95] Add(PC) [100, 1, 1, 0, 0, 0, 238, 95]
# PC:60 [100, 1, 1, 0, 0, 0, 238, 96] StoreMem(SP) [100, 1, 1, 0, 0, 0, 238, 96]
# PC:61 [100, 1, 1, 0, 0, 0, 238, 97] LoadLo(Constant(8)) [248, 1, 1, 0, 0, 0, 238, 97]
# PC:62 [248, 1, 1, 0, 0, 0, 238, 98] LoadHi(Constant(1)) [24, 1, 1, 0, 0, 0, 238, 98]
# PC:63 [24, 1, 1, 0, 0, 0, 238, 99] StoreReg(PC) [24, 1, 1, 0, 0, 0, 238, 24]
# PC:18 [24, 1, 1, 0, 0, 0, 238, 24] LoadLo(Constant(1)) [1, 1, 1, 0, 0, 0, 238, 24]
# PC:19 [1, 1, 1, 0, 0, 0, 238, 25] Add(SP) [239, 1, 1, 0, 0, 0, 238, 25]
# PC:1a [239, 1, 1, 0, 0, 0, 238, 26] LoadMem(ACC) [1, 1, 1, 0, 0, 0, 238, 26]
# PC:1b [1, 1, 1, 0, 0, 0, 238, 27] StoreReg(C) [1, 1, 1, 0, 0, 0, 238, 27]
# PC:1c [1, 1, 1, 0, 0, 0, 238, 28] LoadLo(Constant(0)) [0, 1, 1, 0, 0, 0, 238, 28]
# PC:1d [0, 1, 1, 0, 0, 0, 238, 29] LoadHi(Constant(0)) [0, 1, 1, 0, 0, 0, 238, 29]
# PC:1e [0, 1, 1, 0, 0, 0, 238, 30] Xor(C) [1, 1, 1, 0, 0, 0, 238, 30]
# PC:1f [1, 1, 1, 0, 0, 0, 238, 31] Jnz(Constant(12)) [1, 1, 1, 0, 0, 0, 238, 43]
# PC:2b [1, 1, 1, 0, 0, 0, 238, 43] LoadLo(Constant(1)) [1, 1, 1, 0, 0, 0, 238, 43]
# PC:2c [1, 1, 1, 0, 0, 0, 238, 44] Add(SP) [239, 1, 1, 0, 0, 0, 238, 44]
# PC:2d [239, 1, 1, 0, 0, 0, 238, 45] LoadMem(ACC) [1, 1, 1, 0, 0, 0, 238, 45]
# PC:2e [1, 1, 1, 0, 0, 0, 238, 46] StoreReg(C) [1, 1, 1, 0, 0, 0, 238, 46]
# PC:2f [1, 1, 1, 0, 0, 0, 238, 47] LoadLo(Constant(1)) [1, 1, 1, 0, 0, 0, 238, 47]
# PC:30 [1, 1, 1, 0, 0, 0, 238, 48] LoadHi(Constant(0)) [1, 1, 1, 0, 0, 0, 238, 48]
# PC:31 [1, 1, 1, 0, 0, 0, 238, 49] Not(ACC) [254, 1, 1, 0, 0, 0, 238, 49]
# PC:32 [254, 1, 1, 0, 0, 0, 238, 50] StoreReg(B) [254, 254, 1, 0, 0, 0, 238, 50]
# PC:33 [254, 254, 1, 0, 0, 0, 238, 51] LoadLo(Constant(1)) [1, 254, 1, 0, 0, 0, 238, 51]
# PC:34 [1, 254, 1, 0, 0, 0, 238, 52] Add(B) [255, 254, 1, 0, 0, 0, 238, 52]
# PC:35 [255, 254, 1, 0, 0, 0, 238, 53] Add(C) [0, 254, 1, 0, 0, 1, 238, 53]
# PC:36 [0, 254, 1, 0, 0, 1, 238, 54] StoreReg(B) [0, 0, 1, 0, 0, 1, 238, 54]
# PC:37 [0, 0, 1, 0, 0, 1, 238, 55] LoadLo(Constant(1)) [1, 0, 1, 0, 0, 1, 238, 55]
# PC:38 [1, 0, 1, 0, 0, 1, 238, 56] Add(SP) [239, 0, 1, 0, 0, 0, 238, 56]
# PC:39 [239, 0, 1, 0, 0, 0, 238, 57] StoreReg(C) [239, 0, 239, 0, 0, 0, 238, 57]
# PC:3a [239, 0, 239, 0, 0, 0, 238, 58] LoadReg(B) [0, 0, 239, 0, 0, 0, 238, 58]
# PC:3b [0, 0, 239, 0, 0, 0, 238, 59] StoreMem(C) [0, 0, 239, 0, 0, 0, 238, 59]
# PC:3c [0, 0, 239, 0, 0, 0, 238, 60] LoadLo(Constant(1)) [1, 0, 239, 0, 0, 0, 238, 60]
# PC:3d [1, 0, 239, 0, 0, 0, 238, 61] Add(SP) [239, 0, 239, 0, 0, 0, 238, 61]
# PC:3e [239, 0, 239, 0, 0, 0, 238, 62] LoadMem(ACC) [0, 0, 239, 0, 0, 0, 238, 62]
# PC:3f [0, 0, 239, 0, 0, 0, 238, 63] StoreReg(C) [0, 0, 0, 0, 0, 0, 238, 63]
# PC:40 [0, 0, 0, 0, 0, 0, 238, 64] LoadLo(Constant(0)) [0, 0, 0, 0, 0, 0, 238, 64]
# PC:41 [0, 0, 0, 0, 0, 0, 238, 65] LoadHi(Constant(0)) [0, 0, 0, 0, 0, 0, 238, 65]
# PC:42 [0, 0, 0, 0, 0, 0, 238, 66] Xor(C) [0, 0, 0, 0, 0, 0, 238, 66]
# PC:43 [0, 0, 0, 0, 0, 0, 238, 67] Jnz(Constant(12)) [0, 0, 0, 0, 0, 0, 238, 67]
# PC:44 [0, 0, 0, 0, 0, 0, 238, 68] LoadLo(Constant(1)) [1, 0, 0, 0, 0, 0, 238, 68]
# PC:45 [1, 0, 0, 0, 0, 0, 238, 69] LoadHi(Constant(0)) [1, 0, 0, 0, 0, 0, 238, 69]
# PC:46 [1, 0, 0, 0, 0, 0, 238, 70] StoreReg(B) [1, 1, 0, 0, 0, 0, 238, 70]
# PC:47 [1, 1, 0, 0, 0, 0, 238, 71] LoadLo(Constant(2)) [2, 1, 0, 0, 0, 0, 238, 71]
# PC:48 [2, 1, 0, 0, 0, 0, 238, 72] Add(SP) [240, 1, 0, 0, 0, 0, 238, 72]
# PC:49 [240, 1, 0, 0, 0, 0, 238, 73] StoreReg(C) [240, 1, 240, 0, 0, 0, 238, 73]
# PC:4a [240, 1, 240, 0, 0, 0, 238, 74] LoadReg(B) [1, 1, 240, 0, 0, 0, 238, 74]
# PC:4b [1, 1, 240, 0, 0, 0, 238, 75] StoreMem(C) [1, 1, 240, 0, 0, 0, 238, 75]
# PC:4c [1, 1, 240, 0, 0, 0, 238, 76] LoadLo(Constant(11)) [251, 1, 240, 0, 0, 0, 238, 76]
# PC:4d [251, 1, 240, 0, 0, 0, 238, 77] LoadHi(Constant(11)) [187, 1, 240, 0, 0, 0, 238, 77]
# PC:4e [187, 1, 240, 0, 0, 0, 238, 78] StoreReg(PC) [187, 1, 240, 0, 0, 0, 238, 187]
# PC:bb [187, 1, 240, 0, 0, 0, 238, 187] LoadMem(SP) [100, 1, 240, 0, 0, 0, 238, 187]
# PC:bc [100, 1, 240, 0, 0, 0, 238, 188] StoreReg(PC) [100, 1, 240, 0, 0, 0, 238, 100]
# PC:64 [100, 1, 240, 0, 0, 0, 238, 100] LoadLo(Constant(1)) [1, 1, 240, 0, 0, 0, 238, 100]
# PC:65 [1, 1, 240, 0, 0, 0, 238, 101] Add(SP) [239, 1, 240, 0, 0, 0, 238, 101]
# PC:66 [239, 1, 240, 0, 0, 0, 238, 102] StoreReg(SP) [239, 1, 240, 0, 0, 0, 239, 102]
# PC:67 [239, 1, 240, 0, 0, 0, 239, 103] LoadLo(Constant(1)) [1, 1, 240, 0, 0, 0, 239, 103]
# PC:68 [1, 1, 240, 0, 0, 0, 239, 104] Add(SP) [240, 1, 240, 0, 0, 0, 239, 104]
# PC:69 [240, 1, 240, 0, 0, 0, 239, 105] StoreReg(SP) [240, 1, 240, 0, 0, 0, 240, 105]
# PC:6a [240, 1, 240, 0, 0, 0, 240, 106] LoadMem(SP) [1, 1, 240, 0, 0, 0, 240, 106]
# PC:6b [1, 1, 240, 0, 0, 0, 240, 107] StoreReg(B) [1, 1, 240, 0, 0, 0, 240, 107]
# PC:6c [1, 1, 240, 0, 0, 0, 240, 108] LoadLo(Constant(1)) [1, 1, 240, 0, 0, 0, 240, 108]
# PC:6d [1, 1, 240, 0, 0, 0, 240, 109] Add(SP) [241, 1, 240, 0, 0, 0, 240, 109]
# PC:6e [241, 1, 240, 0, 0, 0, 240, 110] StoreReg(SP) [241, 1, 240, 0, 0, 0, 241, 110]
# PC:6f [241, 1, 240, 0, 0, 0, 241, 111] LoadReg(B) [1, 1, 240, 0, 0, 0, 241, 111]
# PC:70 [1, 1, 240, 0, 0, 0, 241, 112] StoreReg(D) [1, 1, 240, 1, 0, 0, 241, 112]
# PC:71 [1, 1, 240, 1, 0, 0, 241, 113] LoadLo(Constant(1)) [1, 1, 240, 1, 0, 0, 241, 113]
# PC:72 [1, 1, 240, 1, 0, 0, 241, 114] Add(SP) [242, 1, 240, 1, 0, 0, 241, 114]
# PC:73 [242, 1, 240, 1, 0, 0, 241, 115] LoadMem(ACC) [1, 1, 240, 1, 0, 0, 241, 115]
# PC:74 [1, 1, 240, 1, 0, 0, 241, 116] StoreReg(C) [1, 1, 1, 1, 0, 0, 241, 116]
# PC:75 [1, 1, 1, 1, 0, 0, 241, 117] LoadLo(Constant(1)) [1, 1, 1, 1, 0, 0, 241, 117]
# PC:76 [1, 1, 1, 1, 0, 0, 241, 118] LoadHi(Constant(0)) [1, 1, 1, 1, 0, 0, 241, 118]
# PC:77 [1, 1, 1, 1, 0, 0, 241, 119] Not(ACC) [254, 1, 1, 1, 0, 0, 241, 119]
# PC:78 [254, 1, 1, 1, 0, 0, 241, 120] StoreReg(B) [254, 254, 1, 1, 0, 0, 241, 120]
# PC:79 [254, 254, 1, 1, 0, 0, 241, 121] LoadLo(Constant(1)) [1, 254, 1, 1, 0, 0, 241, 121]
# PC:7a [1, 254, 1, 1, 0, 0, 241, 122] Add(B) [255, 254, 1, 1, 0, 0, 241, 122]
# PC:7b [255, 254, 1, 1, 0, 0, 241, 123] Add(C) [0, 254, 1, 1, 0, 1, 241, 123]
# PC:7c [0, 254, 1, 1, 0, 1, 241, 124] StoreReg(B) [0, 0, 1, 1, 0, 1, 241, 124]
# PC:7d [0, 0, 1, 1, 0, 1, 241, 125] LoadLo(Constant(1)) [1, 0, 1, 1, 0, 1, 241, 125]
# PC:7e [1, 0, 1, 1, 0, 1, 241, 126] Add(SP) [242, 0, 1, 1, 0, 0, 241, 126]
# PC:7f [242, 0, 1, 1, 0, 0, 241, 127] StoreReg(C) [242, 0, 242, 1, 0, 0, 241, 127]
# PC:80 [242, 0, 242, 1, 0, 0, 241, 128] LoadReg(B) [0, 0, 242, 1, 0, 0, 241, 128]
# PC:81 [0, 0, 242, 1, 0, 0, 241, 129] StoreMem(C) [0, 0, 242, 1, 0, 0, 241, 129]
# PC:82 [0, 0, 242, 1, 0, 0, 241, 130] LoadLo(Constant(15)) [255, 0, 242, 1, 0, 0, 241, 130]
# PC:83 [255, 0, 242, 1, 0, 0, 241, 131] Add(SP) [240, 0, 242, 1, 0, 1, 241, 131]
# PC:84 [240, 0, 242, 1, 0, 1, 241, 132] StoreReg(SP) [240, 0, 242, 1, 0, 1, 240, 132]
# PC:85 [240, 0, 242, 1, 0, 1, 240, 133] LoadLo(Constant(15)) [255, 0, 242, 1, 0, 1, 240, 133]
# PC:86 [255, 0, 242, 1, 0, 1, 240, 134] Add(SP) [239, 0, 242, 1, 0, 1, 240, 134]
# PC:87 [239, 0, 242, 1, 0, 1, 240, 135] StoreReg(SP) [239, 0, 242, 1, 0, 1, 239, 135]
# PC:88 [239, 0, 242, 1, 0, 1, 239, 136] LoadReg(D) [1, 0, 242, 1, 0, 1, 239, 136]
# PC:89 [1, 0, 242, 1, 0, 1, 239, 137] StoreMem(SP) [1, 0, 242, 1, 0, 1, 239, 137]
# PC:8a [1, 0, 242, 1, 0, 1, 239, 138] LoadLo(Constant(3)) [3, 0, 242, 1, 0, 1, 239, 138]
# PC:8b [3, 0, 242, 1, 0, 1, 239, 139] Add(SP) [242, 0, 242, 1, 0, 0, 239, 139]
# PC:8c [242, 0, 242, 1, 0, 0, 239, 140] LoadMem(ACC) [0, 0, 242, 1, 0, 0, 239, 140]
# PC:8d [0, 0, 242, 1, 0, 0, 239, 141] StoreReg(B) [0, 0, 242, 1, 0, 0, 239, 141]
# PC:8e [0, 0, 242, 1, 0, 0, 239, 142] LoadLo(Constant(15)) [255, 0, 242, 1, 0, 0, 239, 142]
# PC:8f [255, 0, 242, 1, 0, 0, 239, 143] Add(SP) [238, 0, 242, 1, 0, 1, 239, 143]
# PC:90 [238, 0, 242, 1, 0, 1, 239, 144] StoreReg(SP) [238, 0, 242, 1, 0, 1, 238, 144]
# PC:91 [238, 0, 242, 1, 0, 1, 238, 145] LoadReg(B) [0, 0, 242, 1, 0, 1, 238, 145]
# PC:92 [0, 0, 242, 1, 0, 1, 238, 146] StoreMem(SP) [0, 0, 242, 1, 0, 1, 238, 146]
# PC:93 [0, 0, 242, 1, 0, 1, 238, 147] LoadLo(Constant(15)) [255, 0, 242, 1, 0, 1, 238, 147]
# PC:94 [255, 0, 242, 1, 0, 1, 238, 148] Add(SP) [237, 0, 242, 1, 0, 1, 238, 148]
# PC:95 [237, 0, 242, 1, 0, 1, 238, 149] StoreReg(SP) [237, 0, 242, 1, 0, 1, 237, 149]
# PC:96 [237, 0, 242, 1, 0, 1, 237, 150] LoadLo(Constant(5)) [5, 0, 242, 1, 0, 1, 237, 150]
# PC:97 [5, 0, 242, 1, 0, 1, 237, 151] Add(PC) [156, 0, 242, 1, 0, 0, 237, 151]
# PC:98 [156, 0, 242, 1, 0, 0, 237, 152] StoreMem(SP) [156, 0, 242, 1, 0, 0, 237, 152]
# PC:99 [156, 0, 242, 1, 0, 0, 237, 153] LoadLo(Constant(8)) [248, 0, 242, 1, 0, 0, 237, 153]
# PC:9a [248, 0, 242, 1, 0, 0, 237, 154] LoadHi(Constant(1)) [24, 0, 242, 1, 0, 0, 237, 154]
# PC:9b [24, 0, 242, 1, 0, 0, 237, 155] StoreReg(PC) [24, 0, 242, 1, 0, 0, 237, 24]
# PC:18 [24, 0, 242, 1, 0, 0, 237, 24] LoadLo(Constant(1)) [1, 0, 242, 1, 0, 0, 237, 24]
# PC:19 [1, 0, 242, 1, 0, 0, 237, 25] Add(SP) [238, 0, 242, 1, 0, 0, 237, 25]
# PC:1a [238, 0, 242, 1, 0, 0, 237, 26] LoadMem(ACC) [0, 0, 242, 1, 0, 0, 237, 26]
# PC:1b [0, 0, 242, 1, 0, 0, 237, 27] StoreReg(C) [0, 0, 0, 1, 0, 0, 237, 27]
# PC:1c [0, 0, 0, 1, 0, 0, 237, 28] LoadLo(Constant(0)) [0, 0, 0, 1, 0, 0, 237, 28]
# PC:1d [0, 0, 0, 1, 0, 0, 237, 29] LoadHi(Constant(0)) [0, 0, 0, 1, 0, 0, 237, 29]
# PC:1e [0, 0, 0, 1, 0, 0, 237, 30] Xor(C) [0, 0, 0, 1, 0, 0, 237, 30]
# PC:1f [0, 0, 0, 1, 0, 0, 237, 31] Jnz(Constant(12)) [0, 0, 0, 1, 0, 0, 237, 31]
# PC:20 [0, 0, 0, 1, 0, 0, 237, 32] LoadLo(Constant(1)) [1, 0, 0, 1, 0, 0, 237, 32]
# PC:21 [1, 0, 0, 1, 0, 0, 237, 33] LoadHi(Constant(0)) [1, 0, 0, 1, 0, 0, 237, 33]
# PC:22 [1, 0, 0, 1, 0, 0, 237, 34] StoreReg(B) [1, 1, 0, 1, 0, 0, 237, 34]
# PC:23 [1, 1, 0, 1, 0, 0, 237, 35] LoadLo(Constant(2)) [2, 1, 0, 1, 0, 0, 237, 35]
# PC:24 [2, 1, 0, 1, 0, 0, 237, 36] Add(SP) [239, 1, 0, 1, 0, 0, 237, 36]
# PC:25 [239, 1, 0, 1, 0, 0, 237, 37] StoreReg(C) [239, 1, 239, 1, 0, 0, 237, 37]
# PC:26 [239, 1, 239, 1, 0, 0, 237, 38] LoadReg(B) [1, 1, 239, 1, 0, 0, 237, 38]
# PC:27 [1, 1, 239, 1, 0, 0, 237, 39] StoreMem(C) [1, 1, 239, 1, 0, 0, 237, 39]
# PC:28 [1, 1, 239, 1, 0, 0, 237, 40] LoadLo(Constant(11)) [251, 1, 239, 1, 0, 0, 237, 40]
# PC:29 [251, 1, 239, 1, 0, 0, 237, 41] LoadHi(Constant(11)) [187, 1, 239, 1, 0, 0, 237, 41]
# PC:2a [187, 1, 239, 1, 0, 0, 237, 42] StoreReg(PC) [187, 1, 239, 1, 0, 0, 237, 187]
# PC:bb [187, 1, 239, 1, 0, 0, 237, 187] LoadMem(SP) [156, 1, 239, 1, 0, 0, 237, 187]
# PC:bc [156, 1, 239, 1, 0, 0, 237, 188] StoreReg(PC) [156, 1, 239, 1, 0, 0, 237, 156]
# PC:9c [156, 1, 239, 1, 0, 0, 237, 156] LoadLo(Constant(1)) [1, 1, 239, 1, 0, 0, 237, 156]
# PC:9d [1, 1, 239, 1, 0, 0, 237, 157] Add(SP) [238, 1, 239, 1, 0, 0, 237, 157]
# PC:9e [238, 1, 239, 1, 0, 0, 237, 158] StoreReg(SP) [238, 1, 239, 1, 0, 0, 238, 158]
# PC:9f [238, 1, 239, 1, 0, 0, 238, 159] LoadLo(Constant(1)) [1, 1, 239, 1, 0, 0, 238, 159]
# PC:a0 [1, 1, 239, 1, 0, 0, 238, 160] Add(SP) [239, 1, 239, 1, 0, 0, 238, 160]
# PC:a1 [239, 1, 239, 1, 0, 0, 238, 161] StoreReg(SP) [239, 1, 239, 1, 0, 0, 239, 161]
# PC:a2 [239, 1, 239, 1, 0, 0, 239, 162] LoadMem(SP) [1, 1, 239, 1, 0, 0, 239, 162]
# PC:a3 [1, 1, 239, 1, 0, 0, 239, 163] StoreReg(D) [1, 1, 239, 1, 0, 0, 239, 163]
# PC:a4 [1, 1, 239, 1, 0, 0, 239, 164] LoadLo(Constant(1)) [1, 1, 239, 1, 0, 0, 239, 164]
# PC:a5 [1, 1, 239, 1, 0, 0, 239, 165] Add(SP) [240, 1, 239, 1, 0, 0, 239, 165]
# PC:a6 [240, 1, 239, 1, 0, 0, 239, 166] StoreReg(SP) [240, 1, 239, 1, 0, 0, 240, 166]
# PC:a7 [240, 1, 239, 1, 0, 0, 240, 167] LoadMem(SP) [1, 1, 239, 1, 0, 0, 240, 167]
# PC:a8 [1, 1, 239, 1, 0, 0, 240, 168] StoreReg(B) [1, 1, 239, 1, 0, 0, 240, 168]
# PC:a9 [1, 1, 239, 1, 0, 0, 240, 169] LoadLo(Constant(1)) [1, 1, 239, 1, 0, 0, 240, 169]
# PC:aa [1, 1, 239, 1, 0, 0, 240, 170] Add(SP) [241, 1, 239, 1, 0, 0, 240, 170]
# PC:ab [241, 1, 239, 1, 0, 0, 240, 171] StoreReg(SP) [241, 1, 239, 1, 0, 0, 241, 171]
# PC:ac [241, 1, 239, 1, 0, 0, 241, 172] LoadReg(B) [1, 1, 239, 1, 0, 0, 241, 172]
# PC:ad [1, 1, 239, 1, 0, 0, 241, 173] StoreReg(E) [1, 1, 239, 1, 1, 0, 241, 173]
# PC:ae [1, 1, 239, 1, 1, 0, 241, 174] LoadReg(D) [1, 1, 239, 1, 1, 0, 241, 174]
# PC:af [1, 1, 239, 1, 1, 0, 241, 175] StoreReg(C) [1, 1, 1, 1, 1, 0, 241, 175]
# PC:b0 [1, 1, 1, 1, 1, 0, 241, 176] LoadReg(E) [1, 1, 1, 1, 1, 0, 241, 176]
# PC:b1 [1, 1, 1, 1, 1, 0, 241, 177] Add(C) [2, 1, 1, 1, 1, 0, 241, 177]
# PC:b2 [2, 1, 1, 1, 1, 0, 241, 178] StoreReg(B) [2, 2, 1, 1, 1, 0, 241, 178]
# PC:b3 [2, 2, 1, 1, 1, 0, 241, 179] LoadLo(Constant(2)) [2, 2, 1, 1, 1, 0, 241, 179]
# PC:b4 [2, 2, 1, 1, 1, 0, 241, 180] Add(SP) [243, 2, 1, 1, 1, 0, 241, 180]
# PC:b5 [243, 2, 1, 1, 1, 0, 241, 181] StoreReg(C) [243, 2, 243, 1, 1, 0, 241, 181]
# PC:b6 [243, 2, 243, 1, 1, 0, 241, 182] LoadReg(B) [2, 2, 243, 1, 1, 0, 241, 182]
# PC:b7 [2, 2, 243, 1, 1, 0, 241, 183] StoreMem(C) [2, 2, 243, 1, 1, 0, 241, 183]
# PC:b8 [2, 2, 243, 1, 1, 0, 241, 184] LoadLo(Constant(11)) [251, 2, 243, 1, 1, 0, 241, 184]
# PC:b9 [251, 2, 243, 1, 1, 0, 241, 185] LoadHi(Constant(11)) [187, 2, 243, 1, 1, 0, 241, 185]
# PC:ba [187, 2, 243, 1, 1, 0, 241, 186] StoreReg(PC) [187, 2, 243, 1, 1, 0, 241, 187]
# PC:bb [187, 2, 243, 1, 1, 0, 241, 187] LoadMem(SP) [100, 2, 243, 1, 1, 0, 241, 187]
# PC:bc [100, 2, 243, 1, 1, 0, 241, 188] StoreReg(PC) [100, 2, 243, 1, 1, 0, 241, 100]
# PC:64 [100, 2, 243, 1, 1, 0, 241, 100] LoadLo(Constant(1)) [1, 2, 243, 1, 1, 0, 241, 100]
# PC:65 [1, 2, 243, 1, 1, 0, 241, 101] Add(SP) [242, 2, 243, 1, 1, 0, 241, 101]
# PC:66 [242, 2, 243, 1, 1, 0, 241, 102] StoreReg(SP) [242, 2, 243, 1, 1, 0, 242, 102]
# PC:67 [242, 2, 243, 1, 1, 0, 242, 103] LoadLo(Constant(1)) [1, 2, 243, 1, 1, 0, 242, 103]
# PC:68 [1, 2, 243, 1, 1, 0, 242, 104] Add(SP) [243, 2, 243, 1, 1, 0, 242, 104]
# PC:69 [243, 2, 243, 1, 1, 0, 242, 105] StoreReg(SP) [243, 2, 243, 1, 1, 0, 243, 105]
# PC:6a [243, 2, 243, 1, 1, 0, 243, 106] LoadMem(SP) [2, 2, 243, 1, 1, 0, 243, 106]
# PC:6b [2, 2, 243, 1, 1, 0, 243, 107] StoreReg(B) [2, 2, 243, 1, 1, 0, 243, 107]
# PC:6c [2, 2, 243, 1, 1, 0, 243, 108] LoadLo(Constant(1)) [1, 2, 243, 1, 1, 0, 243, 108]
# PC:6d [1, 2, 243, 1, 1, 0, 243, 109] Add(SP) [244, 2, 243, 1, 1, 0, 243, 109]
# PC:6e [244, 2, 243, 1, 1, 0, 243, 110] StoreReg(SP) [244, 2, 243, 1, 1, 0, 244, 110]
# PC:6f [244, 2, 243, 1, 1, 0, 244, 111] LoadReg(B) [2, 2, 243, 1, 1, 0, 244, 111]
# PC:70 [2, 2, 243, 1, 1, 0, 244, 112] StoreReg(D) [2, 2, 243, 2, 1, 0, 244, 112]
# PC:71 [2, 2, 243, 2, 1, 0, 244, 113] LoadLo(Constant(1)) [1, 2, 243, 2, 1, 0, 244, 113]
# PC:72 [1, 2, 243, 2, 1, 0, 244, 114] Add(SP) [245, 2, 243, 2, 1, 0, 244, 114]
# PC:73 [245, 2, 243, 2, 1, 0, 244, 115] LoadMem(ACC) [2, 2, 243, 2, 1, 0, 244, 115]
# PC:74 [2, 2, 243, 2, 1, 0, 244, 116] StoreReg(C) [2, 2, 2, 2, 1, 0, 244, 116]
# PC:75 [2, 2, 2, 2, 1, 0, 244, 117] LoadLo(Constant(1)) [1, 2, 2, 2, 1, 0, 244, 117]
# PC:76 [1, 2, 2, 2, 1, 0, 244, 118] LoadHi(Constant(0)) [1, 2, 2, 2, 1, 0, 244, 118]
# PC:77 [1, 2, 2, 2, 1, 0, 244, 119] Not(ACC) [254, 2, 2, 2, 1, 0, 244, 119]
# PC:78 [254, 2, 2, 2, 1, 0, 244, 120] StoreReg(B) [254, 254, 2, 2, 1, 0, 244, 120]
# PC:79 [254, 254, 2, 2, 1, 0, 244, 121] LoadLo(Constant(1)) [1, 254, 2, 2, 1, 0, 244, 121]
# PC:7a [1, 254, 2, 2, 1, 0, 244, 122] Add(B) [255, 254, 2, 2, 1, 0, 244, 122]
# PC:7b [255, 254, 2, 2, 1, 0, 244, 123] Add(C) [1, 254, 2, 2, 1, 1, 244, 123]
# PC:7c [1, 254, 2, 2, 1, 1, 244, 124] StoreReg(B) [1, 1, 2, 2, 1, 1, 244, 124]
# PC:7d [1, 1, 2, 2, 1, 1, 244, 125] LoadLo(Constant(1)) [1, 1, 2, 2, 1, 1, 244, 125]
# PC:7e [1, 1, 2, 2, 1, 1, 244, 126] Add(SP) [245, 1, 2, 2, 1, 0, 244, 126]
# PC:7f [245, 1, 2, 2, 1, 0, 244, 127] StoreReg(C) [245, 1, 245, 2, 1, 0, 244, 127]
# PC:80 [245, 1, 245, 2, 1, 0, 244, 128] LoadReg(B) [1, 1, 245, 2, 1, 0, 244, 128]
# PC:81 [1, 1, 245, 2, 1, 0, 244, 129] StoreMem(C) [1, 1, 245, 2, 1, 0, 244, 129]
# PC:82 [1, 1, 245, 2, 1, 0, 244, 130] LoadLo(Constant(15)) [255, 1, 245, 2, 1, 0, 244, 130]
# PC:83 [255, 1, 245, 2, 1, 0, 244, 131] Add(SP) [243, 1, 245, 2, 1, 1, 244, 131]
# PC:84 [243, 1, 245, 2, 1, 1, 244, 132] StoreReg(SP) [243, 1, 245, 2, 1, 1, 243, 132]
# PC:85 [243, 1, 245, 2, 1, 1, 243, 133] LoadLo(Constant(15)) [255, 1, 245, 2, 1, 1, 243, 133]
# PC:86 [255, 1, 245, 2, 1, 1, 243, 134] Add(SP) [242, 1, 245, 2, 1, 1, 243, 134]
# PC:87 [242, 1, 245, 2, 1, 1, 243, 135] StoreReg(SP) [242, 1, 245, 2, 1, 1, 242, 135]
# PC:88 [242, 1, 245, 2, 1, 1, 242, 136] LoadReg(D) [2, 1, 245, 2, 1, 1, 242, 136]
# PC:89 [2, 1, 245, 2, 1, 1, 242, 137] StoreMem(SP) [2, 1, 245, 2, 1, 1, 242, 137]
# PC:8a [2, 1, 245, 2, 1, 1, 242, 138] LoadLo(Constant(3)) [3, 1, 245, 2, 1, 1, 242, 138]
# PC:8b [3, 1, 245, 2, 1, 1, 242, 139] Add(SP) [245, 1, 245, 2, 1, 0, 242, 139]
# PC:8c [245, 1, 245, 2, 1, 0, 242, 140] LoadMem(ACC) [1, 1, 245, 2, 1, 0, 242, 140]
# PC:8d [1, 1, 245, 2, 1, 0, 242, 141] StoreReg(B) [1, 1, 245, 2, 1, 0, 242, 141]
# PC:8e [1, 1, 245, 2, 1, 0, 242, 142] LoadLo(Constant(15)) [255, 1, 245, 2, 1, 0, 242, 142]
# PC:8f [255, 1, 245, 2, 1, 0, 242, 143] Add(SP) [241, 1, 245, 2, 1, 1, 242, 143]
# PC:90 [241, 1, 245, 2, 1, 1, 242, 144] StoreReg(SP) [241, 1, 245, 2, 1, 1, 241, 144]
# PC:91 [241, 1, 245, 2, 1, 1, 241, 145] LoadReg(B) [1, 1, 245, 2, 1, 1, 241, 145]
# PC:92 [1, 1, 245, 2, 1, 1, 241, 146] StoreMem(SP) [1, 1, 245, 2, 1, 1, 241, 146]
# PC:93 [1, 1, 245, 2, 1, 1, 241, 147] LoadLo(Constant(15)) [255, 1, 245, 2, 1, 1, 241, 147]
# PC:94 [255, 1, 245, 2, 1, 1, 241, 148] Add(SP) [240, 1, 245, 2, 1, 1, 241, 148]
# PC:95 [240, 1, 245, 2, 1, 1, 241, 149] StoreReg(SP) [240, 1, 245, 2, 1, 1, 240, 149]
# PC:96 [240, 1, 245, 2, 1, 1, 240, 150] LoadLo(Constant(5)) [5, 1, 245, 2, 1, 1, 240, 150]
# PC:97 [5, 1, 245, 2, 1, 1, 240, 151] Add(PC) [156, 1, 245, 2, 1, 0, 240, 151]
# PC:98 [156, 1, 245, 2, 1, 0, 240, 152] StoreMem(SP) [156, 1, 245, 2, 1, 0, 240, 152]
# PC:99 [156, 1, 245, 2, 1, 0, 240, 153] LoadLo(Constant(8)) [248, 1, 245, 2, 1, 0, 240, 153]
# PC:9a [248, 1, 245, 2, 1, 0, 240, 154] LoadHi(Constant(1)) [24, 1, 245, 2, 1, 0, 240, 154]
# PC:9b [24, 1, 245, 2, 1, 0, 240, 155] StoreReg(PC) [24, 1, 245, 2, 1, 0, 240, 24]
# PC:18 [24, 1, 245, 2, 1, 0, 240, 24] LoadLo(Constant(1)) [1, 1, 245, 2, 1, 0, 240, 24]
# PC:19 [1, 1, 245, 2, 1, 0, 240, 25] Add(SP) [241, 1, 245, 2, 1, 0, 240, 25]
# PC:1a [241, 1, 245, 2, 1, 0, 240, 26] LoadMem(ACC) [1, 1, 245, 2, 1, 0, 240, 26]
# PC:1b [1, 1, 245, 2, 1, 0, 240, 27] StoreReg(C) [1, 1, 1, 2, 1, 0, 240, 27]
# PC:1c [1, 1, 1, 2, 1, 0, 240, 28] LoadLo(Constant(0)) [0, 1, 1, 2, 1, 0, 240, 28]
# PC:1d [0, 1, 1, 2, 1, 0, 240, 29] LoadHi(Constant(0)) [0, 1, 1, 2, 1, 0, 240, 29]
# PC:1e [0, 1, 1, 2, 1, 0, 240, 30] Xor(C) [1, 1, 1, 2, 1, 0, 240, 30]
# PC:1f [1, 1, 1, 2, 1, 0, 240, 31] Jnz(Constant(12)) [1, 1, 1, 2, 1, 0, 240, 43]
# PC:2b [1, 1, 1, 2, 1, 0, 240, 43] LoadLo(Constant(1)) [1, 1, 1, 2, 1, 0, 240, 43]
# PC:2c [1, 1, 1, 2, 1, 0, 240, 44] Add(SP) [241, 1, 1, 2, 1, 0, 240, 44]
# PC:2d [241, 1, 1, 2, 1, 0, 240, 45] LoadMem(ACC) [1, 1, 1, 2, 1, 0, 240, 45]
# PC:2e [1, 1, 1, 2, 1, 0, 240, 46] StoreReg(C) [1, 1, 1, 2, 1, 0, 240, 46]
# PC:2f [1, 1, 1, 2, 1, 0, 240, 47] LoadLo(Constant(1)) [1, 1, 1, 2, 1, 0, 240, 47]
# PC:30 [1, 1, 1, 2, 1, 0, 240, 48] LoadHi(Constant(0)) [1, 1, 1, 2, 1, 0, 240, 48]
# PC:31 [1, 1, 1, 2, 1, 0, 240, 49] Not(ACC) [254, 1, 1, 2, 1, 0, 240, 49]
# PC:32 [254, 1, 1, 2, 1, 0, 240, 50] StoreReg(B) [254, 254, 1, 2, 1, 0, 240, 50]
# PC:33 [254, 254, 1, 2, 1, 0, 240, 51] LoadLo(Constant(1)) [1, 254, 1, 2, 1, 0, 240, 51]
# PC:34 [1, 254, 1, 2, 1, 0, 240, 52] Add(B) [255, 254, 1, 2, 1, 0, 240, 52]
# PC:35 [255, 254, 1, 2, 1, 0, 240, 53] Add(C) [0, 254, 1, 2, 1, 1, 240, 53]
# PC:36 [0, 254, 1, 2, 1, 1, 240, 54] StoreReg(B) [0, 0, 1, 2, 1, 1, 240, 54]
# PC:37 [0, 0, 1, 2, 1, 1, 240, 55] LoadLo(Constant(1)) [1, 0, 1, 2, 1, 1, 240, 55]
# PC:38 [1, 0, 1, 2, 1, 1, 240, 56] Add(SP) [241, 0, 1, 2, 1, 0, 240, 56]
# PC:39 [241, 0, 1, 2, 1, 0, 240, 57] StoreReg(C) [241, 0, 241, 2, 1, 0, 240, 57]
# PC:3a [241, 0, 241, 2, 1, 0, 240, 58] LoadReg(B) [0, 0, 241, 2, 1, 0, 240, 58]
# PC:3b [0, 0, 241, 2, 1, 0, 240, 59] StoreMem(C) [0, 0, 241, 2, 1, 0, 240, 59]
# PC:3c [0, 0, 241, 2, 1, 0, 240, 60] LoadLo(Constant(1)) [1, 0, 241, 2, 1, 0, 240, 60]
# PC:3d [1, 0, 241, 2, 1, 0, 240, 61] Add(SP) [241, 0, 241, 2, 1, 0, 240, 61]
# PC:3e [241, 0, 241, 2, 1, 0, 240, 62] LoadMem(ACC) [0, 0, 241, 2, 1, 0, 240, 62]
# PC:3f [0, 0, 241, 2, 1, 0, 240, 63] StoreReg(C) [0, 0, 0, 2, 1, 0, 240, 63]
# PC:40 [0, 0, 0, 2, 1, 0, 240, 64] LoadLo(Constant(0)) [0, 0, 0, 2, 1, 0, 240, 64]
# PC:41 [0, 0, 0, 2, 1, 0, 240, 65] LoadHi(Constant(0)) [0, 0, 0, 2, 1, 0, 240, 65]
# PC:42 [0, 0, 0, 2, 1, 0, 240, 66] Xor(C) [0, 0, 0, 2, 1, 0, 240, 66]
# PC:43 [0, 0, 0, 2, 1, 0, 240, 67] Jnz(Constant(12)) [0, 0, 0, 2, 1, 0, 240, 67]
# PC:44 [0, 0, 0, 2, 1, 0, 240, 68] LoadLo(Constant(1)) [1, 0, 0, 2, 1, 0, 240, 68]
# PC:45 [1, 0, 0, 2, 1, 0, 240, 69] LoadHi(Constant(0)) [1, 0, 0, 2, 1, 0, 240, 69]
# PC:46 [1, 0, 0, 2, 1, 0, 240, 70] StoreReg(B) [1, 1, 0, 2, 1, 0, 240, 70]
# PC:47 [1, 1, 0, 2, 1, 0, 240, 71] LoadLo(Constant(2)) [2, 1, 0, 2, 1, 0, 240, 71]
# PC:48 [2, 1, 0, 2, 1, 0, 240, 72] Add(SP) [242, 1, 0, 2, 1, 0, 240, 72]
# PC:49 [242, 1, 0, 2, 1, 0, 240, 73] StoreReg(C) [242, 1, 242, 2, 1, 0, 240, 73]
# PC:4a [242, 1, 242, 2, 1, 0, 240, 74] LoadReg(B) [1, 1, 242, 2, 1, 0, 240, 74]
# PC:4b [1, 1, 242, 2, 1, 0, 240, 75] StoreMem(C) [1, 1, 242, 2, 1, 0, 240, 75]
# PC:4c [1, 1, 242, 2, 1, 0, 240, 76] LoadLo(Constant(11)) [251, 1, 242, 2, 1, 0, 240, 76]
# PC:4d [251, 1, 242, 2, 1, 0, 240, 77] LoadHi(Constant(11)) [187, 1, 242, 2, 1, 0, 240, 77]
# PC:4e [187, 1, 242, 2, 1, 0, 240, 78] StoreReg(PC) [187, 1, 242, 2, 1, 0, 240, 187]
# PC:bb [187, 1, 242, 2, 1, 0, 240, 187] LoadMem(SP) [156, 1, 242, 2, 1, 0, 240, 187]
# PC:bc [156, 1, 242, 2, 1, 0, 240, 188] StoreReg(PC) [156, 1, 242, 2, 1, 0, 240, 156]
# PC:9c [156, 1, 242, 2, 1, 0, 240, 156] LoadLo(Constant(1)) [1, 1, 242, 2, 1, 0, 240, 156]
# PC:9d [1, 1, 242, 2, 1, 0, 240, 157] Add(SP) [241, 1, 242, 2, 1, 0, 240, 157]
# PC:9e [241, 1, 242, 2, 1, 0, 240, 158] StoreReg(SP) [241, 1, 242, 2, 1, 0, 241, 158]
# PC:9f [241, 1, 242, 2, 1, 0, 241, 159] LoadLo(Constant(1)) [1, 1, 242, 2, 1, 0, 241, 159]
# PC:a0 [1, 1, 242, 2, 1, 0, 241, 160] Add(SP) [242, 1, 242, 2, 1, 0, 241, 160]
# PC:a1 [242, 1, 242, 2, 1, 0, 241, 161] StoreReg(SP) [242, 1, 242, 2, 1, 0, 242, 161]
# PC:a2 [242, 1, 242, 2, 1, 0, 242, 162] LoadMem(SP) [1, 1, 242, 2, 1, 0, 242, 162]
# PC:a3 [1, 1, 242, 2, 1, 0, 242, 163] StoreReg(D) [1, 1, 242, 1, 1, 0, 242, 163]
# PC:a4 [1, 1, 242, 1, 1, 0, 242, 164] LoadLo(Constant(1)) [1, 1, 242, 1, 1, 0, 242, 164]
# PC:a5 [1, 1, 242, 1, 1, 0, 242, 165] Add(SP) [243, 1, 242, 1, 1, 0, 242, 165]
# PC:a6 [243, 1, 242, 1, 1, 0, 242, 166] StoreReg(SP) [243, 1, 242, 1, 1, 0, 243, 166]
# PC:a7 [243, 1, 242, 1, 1, 0, 243, 167] LoadMem(SP) [2, 1, 242, 1, 1, 0, 243, 167]
# PC:a8 [2, 1, 242, 1, 1, 0, 243, 168] StoreReg(B) [2, 2, 242, 1, 1, 0, 243, 168]
# PC:a9 [2, 2, 242, 1, 1, 0, 243, 169] LoadLo(Constant(1)) [1, 2, 242, 1, 1, 0, 243, 169]
# PC:aa [1, 2, 242, 1, 1, 0, 243, 170] Add(SP) [244, 2, 242, 1, 1, 0, 243, 170]
# PC:ab [244, 2, 242, 1, 1, 0, 243, 171] StoreReg(SP) [244, 2, 242, 1, 1, 0, 244, 171]
# PC:ac [244, 2, 242, 1, 1, 0, 244, 172] LoadReg(B) [2, 2, 242, 1, 1, 0, 244, 172]
# PC:ad [2, 2, 242, 1, 1, 0, 244, 173] StoreReg(E) [2, 2, 242, 1, 2, 0, 244, 173]
# PC:ae [2, 2, 242, 1, 2, 0, 244, 174] LoadReg(D) [1, 2, 242, 1, 2, 0, 244, 174]
# PC:af [1, 2, 242, 1, 2, 0, 244, 175] StoreReg(C) [1, 2, 1, 1, 2, 0, 244, 175]
# PC:b0 [1, 2, 1, 1, 2, 0, 244, 176] LoadReg(E) [2, 2, 1, 1, 2, 0, 244, 176]
# PC:b1 [2, 2, 1, 1, 2, 0, 244, 177] Add(C) [3, 2, 1, 1, 2, 0, 244, 177]
# PC:b2 [3, 2, 1, 1, 2, 0, 244, 178] StoreReg(B) [3, 3, 1, 1, 2, 0, 244, 178]
# PC:b3 [3, 3, 1, 1, 2, 0, 244, 179] LoadLo(Constant(2)) [2, 3, 1, 1, 2, 0, 244, 179]
# PC:b4 [2, 3, 1, 1, 2, 0, 244, 180] Add(SP) [246, 3, 1, 1, 2, 0, 244, 180]
# PC:b5 [246, 3, 1, 1, 2, 0, 244, 181] StoreReg(C) [246, 3, 246, 1, 2, 0, 244, 181]
# PC:b6 [246, 3, 246, 1, 2, 0, 244, 182] LoadReg(B) [3, 3, 246, 1, 2, 0, 244, 182]
# PC:b7 [3, 3, 246, 1, 2, 0, 244, 183] StoreMem(C) [3, 3, 246, 1, 2, 0, 244, 183]
# PC:b8 [3, 3, 246, 1, 2, 0, 244, 184] LoadLo(Constant(11)) [251, 3, 246, 1, 2, 0, 244, 184]
# PC:b9 [251, 3, 246, 1, 2, 0, 244, 185] LoadHi(Constant(11)) [187, 3, 246, 1, 2, 0, 244, 185]
# PC:ba [187, 3, 246, 1, 2, 0, 244, 186] StoreReg(PC) [187, 3, 246, 1, 2, 0, 244, 187]
# PC:bb [187, 3, 246, 1, 2, 0, 244, 187] LoadMem(SP) [100, 3, 246, 1, 2, 0, 244, 187]
# PC:bc [100, 3, 246, 1, 2, 0, 244, 188] StoreReg(PC) [100, 3, 246, 1, 2, 0, 244, 100]
# PC:64 [100, 3, 246, 1, 2, 0, 244, 100] LoadLo(Constant(1)) [1, 3, 246, 1, 2, 0, 244, 100]
# PC:65 [1, 3, 246, 1, 2, 0, 244, 101] Add(SP) [245, 3, 246, 1, 2, 0, 244, 101]
# PC:66 [245, 3, 246, 1, 2, 0, 244, 102] StoreReg(SP) [245, 3, 246, 1, 2, 0, 245, 102]
# PC:67 [245, 3, 246, 1, 2, 0, 245, 103] LoadLo(Constant(1)) [1, 3, 246, 1, 2, 0, 245, 103]
# PC:68 [1, 3, 246, 1, 2, 0, 245, 104] Add(SP) [246, 3, 246, 1, 2, 0, 245, 104]
# PC:69 [246, 3, 246, 1, 2, 0, 245, 105] StoreReg(SP) [246, 3, 246, 1, 2, 0, 246, 105]
# PC:6a [246, 3, 246, 1, 2, 0, 246, 106] LoadMem(SP) [3, 3, 246, 1, 2, 0, 246, 106]
# PC:6b [3, 3, 246, 1, 2, 0, 246, 107] StoreReg(B) [3, 3, 246, 1, 2, 0, 246, 107]
# PC:6c [3, 3, 246, 1, 2, 0, 246, 108] LoadLo(Constant(1)) [1, 3, 246, 1, 2, 0, 246, 108]
# PC:6d [1, 3, 246, 1, 2, 0, 246, 109] Add(SP) [247, 3, 246, 1, 2, 0, 246, 109]
# PC:6e [247, 3, 246, 1, 2, 0, 246, 110] StoreReg(SP) [247, 3, 246, 1, 2, 0, 247, 110]
# PC:6f [247, 3, 246, 1, 2, 0, 247, 111] LoadReg(B) [3, 3, 246, 1, 2, 0, 247, 111]
# PC:70 [3, 3, 246, 1, 2, 0, 247, 112] StoreReg(D) [3, 3, 246, 3, 2, 0, 247, 112]
# PC:71 [3, 3, 246, 3, 2, 0, 247, 113] LoadLo(Constant(1)) [1, 3, 246, 3, 2, 0, 247, 113]
# PC:72 [1, 3, 246, 3, 2, 0, 247, 114] Add(SP) [248, 3, 246, 3, 2, 0, 247, 114]
# PC:73 [248, 3, 246, 3, 2, 0, 247, 115] LoadMem(ACC) [3, 3, 246, 3, 2, 0, 247, 115]
# PC:74 [3, 3, 246, 3, 2, 0, 247, 116] StoreReg(C) [3, 3, 3, 3, 2, 0, 247, 116]
# PC:75 [3, 3, 3, 3, 2, 0, 247, 117] LoadLo(Constant(1)) [1, 3, 3, 3, 2, 0, 247, 117]
# PC:76 [1, 3, 3, 3, 2, 0, 247, 118] LoadHi(Constant(0)) [1, 3, 3, 3, 2, 0, 247, 118]
# PC:77 [1, 3, 3, 3, 2, 0, 247, 119] Not(ACC) [254, 3, 3, 3, 2, 0, 247, 119]
# PC:78 [254, 3, 3, 3, 2, 0, 247, 120] StoreReg(B) [254, 254, 3, 3, 2, 0, 247, 120]
# PC:79 [254, 254, 3, 3, 2, 0, 247, 121] LoadLo(Constant(1)) [1, 254, 3, 3, 2, 0, 247, 121]
# PC:7a [1, 254, 3, 3, 2, 0, 247, 122] Add(B) [255, 254, 3, 3, 2, 0, 247, 122]
# PC:7b [255, 254, 3, 3, 2, 0, 247, 123] Add(C) [2, 254, 3, 3, 2, 1, 247, 123]
# PC:7c [2, 254, 3, 3, 2, 1, 247, 124] StoreReg(B) [2, 2, 3, 3, 2, 1, 247, 124]
# PC:7d [2, 2, 3, 3, 2, 1, 247, 125] LoadLo(Constant(1)) [1, 2, 3, 3, 2, 1, 247, 125]
# PC:7e [1, 2, 3, 3, 2, 1, 247, 126] Add(SP) [248, 2, 3, 3, 2, 0, 247, 126]
# PC:7f [248, 2, 3, 3, 2, 0, 247, 127] StoreReg(C) [248, 2, 248, 3, 2, 0, 247, 127]
# PC:80 [248, 2, 248, 3, 2, 0, 247, 128] LoadReg(B) [2, 2, 248, 3, 2, 0, 247, 128]
# PC:81 [2, 2, 248, 3, 2, 0, 247, 129] StoreMem(C) [2, 2, 248, 3, 2, 0, 247, 129]
# PC:82 [2, 2, 248, 3, 2, 0, 247, 130] LoadLo(Constant(15)) [255, 2, 248, 3, 2, 0, 247, 130]
# PC:83 [255, 2, 248, 3, 2, 0, 247, 131] Add(SP) [246, 2, 248, 3, 2, 1, 247, 131]
# PC:84 [246, 2, 248, 3, 2, 1, 247, 132] StoreReg(SP) [246, 2, 248, 3, 2, 1, 246, 132]
# PC:85 [246, 2, 248, 3, 2, 1, 246, 133] LoadLo(Constant(15)) [255, 2, 248, 3, 2, 1, 246, 133]
# PC:86 [255, 2, 248, 3, 2, 1, 246, 134] Add(SP) [245, 2, 248, 3, 2, 1, 246, 134]
# PC:87 [245, 2, 248, 3, 2, 1, 246, 135] StoreReg(SP) [245, 2, 248, 3, 2, 1, 245, 135]
# PC:88 [245, 2, 248, 3, 2, 1, 245, 136] LoadReg(D) [3, 2, 248, 3, 2, 1, 245, 136]
# PC:89 [3, 2, 248, 3, 2, 1, 245, 137] StoreMem(SP) [3, 2, 248, 3, 2, 1, 245, 137]
# PC:8a [3, 2, 248, 3, 2, 1, 245, 138] LoadLo(Constant(3)) [3, 2, 248, 3, 2, 1, 245, 138]
# PC:8b [3, 2, 248, 3, 2, 1, 245, 139] Add(SP) [248, 2, 248, 3, 2, 0, 245, 139]
# PC:8c [248, 2, 248, 3, 2, 0, 245, 140] LoadMem(ACC) [2, 2, 248, 3, 2, 0, 245, 140]
# PC:8d [2, 2, 248, 3, 2, 0, 245, 141] StoreReg(B) [2, 2, 248, 3, 2, 0, 245, 141]
# PC:8e [2, 2, 248, 3, 2, 0, 245, 142] LoadLo(Constant(15)) [255, 2, 248, 3, 2, 0, 245, 142]
# PC:8f [255, 2, 248, 3, 2, 0, 245, 143] Add(SP) [244, 2, 248, 3, 2, 1, 245, 143]
# PC:90 [244, 2, 248, 3, 2, 1, 245, 144] StoreReg(SP) [244, 2, 248, 3, 2, 1, 244, 144]
# PC:91 [244, 2, 248, 3, 2, 1, 244, 145] LoadReg(B) [2, 2, 248, 3, 2, 1, 244, 145]
# PC:92 [2, 2, 248, 3, 2, 1, 244, 146] StoreMem(SP) [2, 2, 248, 3, 2, 1, 244, 146]
# PC:93 [2, 2, 248, 3, 2, 1, 244, 147] LoadLo(Constant(15)) [255, 2, 248, 3, 2, 1, 244, 147]
# PC:94 [255, 2, 248, 3, 2, 1, 244, 148] Add(SP) [243, 2, 248, 3, 2, 1, 244, 148]
# PC:95 [243, 2, 248, 3, 2, 1, 244, 149] StoreReg(SP) [243, 2, 248, 3, 2, 1, 243, 149]
# PC:96 [243, 2, 248, 3, 2, 1, 243, 150] LoadLo(Constant(5)) [5, 2, 248, 3, 2, 1, 243, 150]
# PC:97 [5, 2, 248, 3, 2, 1, 243, 151] Add(PC) [156, 2, 248, 3, 2, 0, 243, 151]
# PC:98 [156, 2, 248, 3, 2, 0, 243, 152] StoreMem(SP) [156, 2, 248, 3, 2, 0, 243, 152]
# PC:99 [156, 2, 248, 3, 2, 0, 243, 153] LoadLo(Constant(8)) [248, 2, 248, 3, 2, 0, 243, 153]
# PC:9a [248, 2, 248, 3, 2, 0, 243, 154] LoadHi(Constant(1)) [24, 2, 248, 3, 2, 0, 243, 154]
# PC:9b [24, 2, 248, 3, 2, 0, 243, 155] StoreReg(PC) [24, 2, 248, 3, 2, 0, 243, 24]
# PC:18 [24, 2, 248, 3, 2, 0, 243, 24] LoadLo(Constant(1)) [1, 2, 248, 3, 2, 0, 243, 24]
# PC:19 [1, 2, 248, 3, 2, 0, 243, 25] Add(SP) [244, 2, 248, 3, 2, 0, 243, 25]
# PC:1a [244, 2, 248, 3, 2, 0, 243, 26] LoadMem(ACC) [2, 2, 248, 3, 2, 0, 243, 26]
# PC:1b [2, 2, 248, 3, 2, 0, 243, 27] StoreReg(C) [2, 2, 2, 3, 2, 0, 243, 27]
# PC:1c [2, 2, 2, 3, 2, 0, 243, 28] LoadLo(Constant(0)) [0, 2, 2, 3, 2, 0, 243, 28]
# PC:1d [0, 2, 2, 3, 2, 0, 243, 29] LoadHi(Constant(0)) [0, 2, 2, 3, 2, 0, 243, 29]
# PC:1e [0, 2, 2, 3, 2, 0, 243, 30] Xor(C) [2, 2, 2, 3, 2, 0, 243, 30]
# PC:1f [2, 2, 2, 3, 2, 0, 243, 31] Jnz(Constant(12)) [2, 2, 2, 3, 2, 0, 243, 43]
# PC:2b [2, 2, 2, 3, 2, 0, 243, 43] LoadLo(Constant(1)) [1, 2, 2, 3, 2, 0, 243, 43]
# PC:2c [1, 2, 2, 3, 2, 0, 243, 44] Add(SP) [244, 2, 2, 3, 2, 0, 243, 44]
# PC:2d [244, 2, 2, 3, 2, 0, 243, 45] LoadMem(ACC) [2, 2, 2, 3, 2, 0, 243, 45]
# PC:2e [2, 2, 2, 3, 2, 0, 243, 46] StoreReg(C) [2, 2, 2, 3, 2, 0, 243, 46]
# PC:2f [2, 2, 2, 3, 2, 0, 243, 47] LoadLo(Constant(1)) [1, 2, 2, 3, 2, 0, 243, 47]
# PC:30 [1, 2, 2, 3, 2, 0, 243, 48] LoadHi(Constant(0)) [1, 2, 2, 3, 2, 0, 243, 48]
# PC:31 [1, 2, 2, 3, 2, 0, 243, 49] Not(ACC) [254, 2, 2, 3, 2, 0, 243, 49]
# PC:32 [254, 2, 2, 3, 2, 0, 243, 50] StoreReg(B) [254, 254, 2, 3, 2, 0, 243, 50]
# PC:33 [254, 254, 2, 3, 2, 0, 243, 51] LoadLo(Constant(1)) [1, 254, 2, 3, 2, 0, 243, 51]
# PC:34 [1, 254, 2, 3, 2, 0, 243, 52] Add(B) [255, 254, 2, 3, 2, 0, 243, 52]
# PC:35 [255, 254, 2, 3, 2, 0, 243, 53] Add(C) [1, 254, 2, 3, 2, 1, 243, 53]
# PC:36 [1, 254, 2, 3, 2, 1, 243, 54] StoreReg(B) [1, 1, 2, 3, 2, 1, 243, 54]
# PC:37 [1, 1, 2, 3, 2, 1, 243, 55] LoadLo(Constant(1)) [1, 1, 2, 3, 2, 1, 243, 55]
# PC:38 [1, 1, 2, 3, 2, 1, 243, 56] Add(SP) [244, 1, 2, 3, 2, 0, 243, 56]
# PC:39 [244, 1, 2, 3, 2, 0, 243, 57] StoreReg(C) [244, 1, 244, 3, 2, 0, 243, 57]
# PC:3a [244, 1, 244, 3, 2, 0, 243, 58] LoadReg(B) [1, 1, 244, 3, 2, 0, 243, 58]
# PC:3b [1, 1, 244, 3, 2, 0, 243, 59] StoreMem(C) [1, 1, 244, 3, 2, 0, 243, 59]
# PC:3c [1, 1, 244, 3, 2, 0, 243, 60] LoadLo(Constant(1)) [1, 1, 244, 3, 2, 0, 243, 60]
# PC:3d [1, 1, 244, 3, 2, 0, 243, 61] Add(SP) [244, 1, 244, 3, 2, 0, 243, 61]
# PC:3e [244, 1, 244, 3, 2, 0, 243, 62] LoadMem(ACC) [1, 1, 244, 3, 2, 0, 243, 62]
# PC:3f [1, 1, 244, 3, 2, 0, 243, 63] StoreReg(C) [1, 1, 1, 3, 2, 0, 243, 63]
# PC:40 [1, 1, 1, 3, 2, 0, 243, 64] LoadLo(Constant(0)) [0, 1, 1, 3, 2, 0, 243, 64]
# PC:41 [0, 1, 1, 3, 2, 0, 243, 65] LoadHi(Constant(0)) [0, 1, 1, 3, 2, 0, 243, 65]
# PC:42 [0, 1, 1, 3, 2, 0, 243, 66] Xor(C) [1, 1, 1, 3, 2, 0, 243, 66]
# PC:43 [1, 1, 1, 3, 2, 0, 243, 67] Jnz(Constant(12)) [1, 1, 1, 3, 2, 0, 243, 79]
# PC:4f [1, 1, 1, 3, 2, 0, 243, 79] LoadLo(Constant(15)) [255, 1, 1, 3, 2, 0, 243, 79]
# PC:50 [255, 1, 1, 3, 2, 0, 243, 80] Add(SP) [242, 1, 1, 3, 2, 1, 243, 80]
# PC:51 [242, 1, 1, 3, 2, 1, 243, 81] StoreReg(SP) [242, 1, 1, 3, 2, 1, 242, 81]
# PC:52 [242, 1, 1, 3, 2, 1, 242, 82] LoadLo(Constant(2)) [2, 1, 1, 3, 2, 1, 242, 82]
# PC:53 [2, 1, 1, 3, 2, 1, 242, 83] Add(SP) [244, 1, 1, 3, 2, 0, 242, 83]
# PC:54 [244, 1, 1, 3, 2, 0, 242, 84] LoadMem(ACC) [1, 1, 1, 3, 2, 0, 242, 84]
# PC:55 [1, 1, 1, 3, 2, 0, 242, 85] StoreReg(B) [1, 1, 1, 3, 2, 0, 242, 85]
# PC:56 [1, 1, 1, 3, 2, 0, 242, 86] LoadLo(Constant(15)) [255, 1, 1, 3, 2, 0, 242, 86]
# PC:57 [255, 1, 1, 3, 2, 0, 242, 87] Add(SP) [241, 1, 1, 3, 2, 1, 242, 87]
# PC:58 [241, 1, 1, 3, 2, 1, 242, 88] StoreReg(SP) [241, 1, 1, 3, 2, 1, 241, 88]
# PC:59 [241, 1, 1, 3, 2, 1, 241, 89] LoadReg(B) [1, 1, 1, 3, 2, 1, 241, 89]
# PC:5a [1, 1, 1, 3, 2, 1, 241, 90] StoreMem(SP) [1, 1, 1, 3, 2, 1, 241, 90]
# PC:5b [1, 1, 1, 3, 2, 1, 241, 91] LoadLo(Constant(15)) [255, 1, 1, 3, 2, 1, 241, 91]
# PC:5c [255, 1, 1, 3, 2, 1, 241, 92] Add(SP) [240, 1, 1, 3, 2, 1, 241, 92]
# PC:5d [240, 1, 1, 3, 2, 1, 241, 93] StoreReg(SP) [240, 1, 1, 3, 2, 1, 240, 93]
# PC:5e [240, 1, 1, 3, 2, 1, 240, 94] LoadLo(Constant(5)) [5, 1, 1, 3, 2, 1, 240, 94]
# PC:5f [5, 1, 1, 3, 2, 1, 240, 95] Add(PC) [100, 1, 1, 3, 2, 0, 240, 95]
# PC:60 [100, 1, 1, 3, 2, 0, 240, 96] StoreMem(SP) [100, 1, 1, 3, 2, 0, 240, 96]
# PC:61 [100, 1, 1, 3, 2, 0, 240, 97] LoadLo(Constant(8)) [248, 1, 1, 3, 2, 0, 240, 97]
# PC:62 [248, 1, 1, 3, 2, 0, 240, 98] LoadHi(Constant(1)) [24, 1, 1, 3, 2, 0, 240, 98]
# PC:63 [24, 1, 1, 3, 2, 0, 240, 99] StoreReg(PC) [24, 1, 1, 3, 2, 0, 240, 24]
# PC:18 [24, 1, 1, 3, 2, 0, 240, 24] LoadLo(Constant(1)) [1, 1, 1, 3, 2, 0, 240, 24]
# PC:19 [1, 1, 1, 3, 2, 0, 240, 25] Add(SP) [241, 1, 1, 3, 2, 0, 240, 25]
# PC:1a [241, 1, 1, 3, 2, 0, 240, 26] LoadMem(ACC) [1, 1, 1, 3, 2, 0, 240, 26]
# PC:1b [1, 1, 1, 3, 2, 0, 240, 27] StoreReg(C) [1, 1, 1, 3, 2, 0, 240, 27]
# PC:1c [1, 1, 1, 3, 2, 0, 240, 28] LoadLo(Constant(0)) [0, 1, 1, 3, 2, 0, 240, 28]
# PC:1d [0, 1, 1, 3, 2, 0, 240, 29] LoadHi(Constant(0)) [0, 1, 1, 3, 2, 0, 240, 29]
# PC:1e [0, 1, 1, 3, 2, 0, 240, 30] Xor(C) [1, 1, 1, 3, 2, 0, 240, 30]
# PC:1f [1, 1, 1, 3, 2, 0, 240, 31] Jnz(Constant(12)) [1, 1, 1, 3, 2, 0, 240, 43]
# PC:2b [1, 1, 1, 3, 2, 0, 240, 43] LoadLo(Constant(1)) [1, 1, 1, 3, 2, 0, 240, 43]
# PC:2c [1, 1, 1, 3, 2, 0, 240, 44] Add(SP) [241, 1, 1, 3, 2, 0, 240, 44]
# PC:2d [241, 1, 1, 3, 2, 0, 240, 45] LoadMem(ACC) [1, 1, 1, 3, 2, 0, 240, 45]
# PC:2e [1, 1, 1, 3, 2, 0, 240, 46] StoreReg(C) [1, 1, 1, 3, 2, 0, 240, 46]
# PC:2f [1, 1, 1, 3, 2, 0, 240, 47] LoadLo(Constant(1)) [1, 1, 1, 3, 2, 0, 240, 47]
# PC:30 [1, 1, 1, 3, 2, 0, 240, 48] LoadHi(Constant(0)) [1, 1, 1, 3, 2, 0, 240, 48]
# PC:31 [1, 1, 1, 3, 2, 0, 240, 49] Not(ACC) [254, 1, 1, 3, 2, 0, 240, 49]
# PC:32 [254, 1, 1, 3, 2, 0, 240, 50] StoreReg(B) [254, 254, 1, 3, 2, 0, 240, 50]
# PC:33 [254, 254, 1, 3, 2, 0, 240, 51] LoadLo(Constant(1)) [1, 254, 1, 3, 2, 0, 240, 51]
# PC:34 [1, 254, 1, 3, 2, 0, 240, 52] Add(B) [255, 254, 1, 3, 2, 0, 240, 52]
# PC:35 [255, 254, 1, 3, 2, 0, 240, 53] Add(C) [0, 254, 1, 3, 2, 1, 240, 53]
# PC:36 [0, 254, 1, 3, 2, 1, 240, 54] StoreReg(B) [0, 0, 1, 3, 2, 1, 240, 54]
# PC:37 [0, 0, 1, 3, 2, 1, 240, 55] LoadLo(Constant(1)) [1, 0, 1, 3, 2, 1, 240, 55]
# PC:38 [1, 0, 1, 3, 2, 1, 240, 56] Add(SP) [241, 0, 1, 3, 2, 0, 240, 56]
# PC:39 [241, 0, 1, 3, 2, 0, 240, 57] StoreReg(C) [241, 0, 241, 3, 2, 0, 240, 57]
# PC:3a [241, 0, 241, 3, 2, 0, 240, 58] LoadReg(B) [0, 0, 241, 3, 2, 0, 240, 58]
# PC:3b [0, 0, 241, 3, 2, 0, 240, 59] StoreMem(C) [0, 0, 241, 3, 2, 0, 240, 59]
# PC:3c [0, 0, 241, 3, 2, 0, 240, 60] LoadLo(Constant(1)) [1, 0, 241, 3, 2, 0, 240, 60]
# PC:3d [1, 0, 241, 3, 2, 0, 240, 61] Add(SP) [241, 0, 241, 3, 2, 0, 240, 61]
# PC:3e [241, 0, 241, 3, 2, 0, 240, 62] LoadMem(ACC) [0, 0, 241, 3, 2, 0, 240, 62]
# PC:3f [0, 0, 241, 3, 2, 0, 240, 63] StoreReg(C) [0, 0, 0, 3, 2, 0, 240, 63]
# PC:40 [0, 0, 0, 3, 2, 0, 240, 64] LoadLo(Constant(0)) [0, 0, 0, 3, 2, 0, 240, 64]
# PC:41 [0, 0, 0, 3, 2, 0, 240, 65] LoadHi(Constant(0)) [0, 0, 0, 3, 2, 0, 240, 65]
# PC:42 [0, 0, 0, 3, 2, 0, 240, 66] Xor(C) [0, 0, 0, 3, 2, 0, 240, 66]
# PC:43 [0, 0, 0, 3, 2, 0, 240, 67] Jnz(Constant(12)) [0, 0, 0, 3, 2, 0, 240, 67]
# PC:44 [0, 0, 0, 3, 2, 0, 240, 68] LoadLo(Constant(1)) [1, 0, 0, 3, 2, 0, 240, 68]
# PC:45 [1, 0, 0, 3, 2, 0, 240, 69] LoadHi(Constant(0)) [1, 0, 0, 3, 2, 0, 240, 69]
# PC:46 [1, 0, 0, 3, 2, 0, 240, 70] StoreReg(B) [1, 1, 0, 3, 2, 0, 240, 70]
# PC:47 [1, 1, 0, 3, 2, 0, 240, 71] LoadLo(Constant(2)) [2, 1, 0, 3, 2, 0, 240, 71]
# PC:48 [2, 1, 0, 3, 2, 0, 240, 72] Add(SP) [242, 1, 0, 3, 2, 0, 240, 72]
# PC:49 [242, 1, 0, 3, 2, 0, 240, 73] StoreReg(C) [242, 1, 242, 3, 2, 0, 240, 73]
# PC:4a [242, 1, 242, 3, 2, 0, 240, 74] LoadReg(B) [1, 1, 242, 3, 2, 0, 240, 74]
# PC:4b [1, 1, 242, 3, 2, 0, 240, 75] StoreMem(C) [1, 1, 242, 3, 2, 0, 240, 75]
# PC:4c [1, 1, 242, 3, 2, 0, 240, 76] LoadLo(Constant(11)) [251, 1, 242, 3, 2, 0, 240, 76]
# PC:4d [251, 1, 242, 3, 2, 0, 240, 77] LoadHi(Constant(11)) [187, 1, 242, 3, 2, 0, 240, 77]
# PC:4e [187, 1, 242, 3, 2, 0, 240, 78] StoreReg(PC) [187, 1, 242, 3, 2, 0, 240, 187]
# PC:bb [187, 1, 242, 3, 2, 0, 240, 187] LoadMem(SP) [100, 1, 242, 3, 2, 0, 240, 187]
# PC:bc [100, 1, 242, 3, 2, 0, 240, 188] StoreReg(PC) [100, 1, 242, 3, 2, 0, 240, 100]
# PC:64 [100, 1, 242, 3, 2, 0, 240, 100] LoadLo(Constant(1)) [1, 1, 242, 3, 2, 0, 240, 100]
# PC:65 [1, 1, 242, 3, 2, 0, 240, 101] Add(SP) [241, 1, 242, 3, 2, 0, 240, 101]
# PC:66 [241, 1, 242, 3, 2, 0, 240, 102] StoreReg(SP) [241, 1, 242, 3, 2, 0, 241, 102]
# PC:67 [241, 1, 242, 3, 2, 0, 241, 103] LoadLo(Constant(1)) [1, 1, 242, 3, 2, 0, 241, 103]
# PC:68 [1, 1, 242, 3, 2, 0, 241, 104] Add(SP) [242, 1, 242, 3, 2, 0, 241, 104]
# PC:69 [242, 1, 242, 3, 2, 0, 241, 105] StoreReg(SP) [242, 1, 242, 3, 2, 0, 242, 105]
# PC:6a [242, 1, 242, 3, 2, 0, 242, 106] LoadMem(SP) [1, 1, 242, 3, 2, 0, 242, 106]
# PC:6b [1, 1, 242, 3, 2, 0, 242, 107] StoreReg(B) [1, 1, 242, 3, 2, 0, 242, 107]
# PC:6c [1, 1, 242, 3, 2, 0, 242, 108] LoadLo(Constant(1)) [1, 1, 242, 3, 2, 0, 242, 108]
# PC:6d [1, 1, 242, 3, 2, 0, 242, 109] Add(SP) [243, 1, 242, 3, 2, 0, 242, 109]
# PC:6e [243, 1, 242, 3, 2, 0, 242, 110] StoreReg(SP) [243, 1, 242, 3, 2, 0, 243, 110]
# PC:6f [243, 1, 242, 3, 2, 0, 243, 111] LoadReg(B) [1, 1, 242, 3, 2, 0, 243, 111]
# PC:70 [1, 1, 242, 3, 2, 0, 243, 112] StoreReg(D) [1, 1, 242, 1, 2, 0, 243, 112]
# PC:71 [1, 1, 242, 1, 2, 0, 243, 113] LoadLo(Constant(1)) [1, 1, 242, 1, 2, 0, 243, 113]
# PC:72 [1, 1, 242, 1, 2, 0, 243, 114] Add(SP) [244, 1, 242, 1, 2, 0, 243, 114]
# PC:73 [244, 1, 242, 1, 2, 0, 243, 115] LoadMem(ACC) [1, 1, 242, 1, 2, 0, 243, 115]
# PC:74 [1, 1, 242, 1, 2, 0, 243, 116] StoreReg(C) [1, 1, 1, 1, 2, 0, 243, 116]
# PC:75 [1, 1, 1, 1, 2, 0, 243, 117] LoadLo(Constant(1)) [1, 1, 1, 1, 2, 0, 243, 117]
# PC:76 [1, 1, 1, 1, 2, 0, 243, 118] LoadHi(Constant(0)) [1, 1, 1, 1, 2, 0, 243, 118]
# PC:77 [1, 1, 1, 1, 2, 0, 243, 119] Not(ACC) [254, 1, 1, 1, 2, 0, 243, 119]
# PC:78 [254, 1, 1, 1, 2, 0, 243, 120] StoreReg(B) [254, 254, 1, 1, 2, 0, 243, 120]
# PC:79 [254, 254, 1, 1, 2, 0, 243, 121] LoadLo(Constant(1)) [1, 254, 1, 1, 2, 0, 243, 121]
# PC:7a [1, 254, 1, 1, 2, 0, 243, 122] Add(B) [255, 254, 1, 1, 2, 0, 243, 122]
# PC:7b [255, 254, 1, 1, 2, 0, 243, 123] Add(C) [0, 254, 1, 1, 2, 1, 243, 123]
# PC:7c [0, 254, 1, 1, 2, 1, 243, 124] StoreReg(B) [0, 0, 1, 1, 2, 1, 243, 124]
# PC:7d [0, 0, 1, 1, 2, 1, 243, 125] LoadLo(Constant(1)) [1, 0, 1, 1, 2, 1, 243, 125]
# PC:7e [1, 0, 1, 1, 2, 1, 243, 126] Add(SP) [244, 0, 1, 1, 2, 0, 243, 126]
# PC:7f [244, 0, 1, 1, 2, 0, 243, 127] StoreReg(C) [244, 0, 244, 1, 2, 0, 243, 127]
# PC:80 [244, 0, 244, 1, 2, 0, 243, 128] LoadReg(B) [0, 0, 244, 1, 2, 0, 243, 128]
# PC:81 [0, 0, 244, 1, 2, 0, 243, 129] StoreMem(C) [0, 0, 244, 1, 2, 0, 243, 129]
# PC:82 [0, 0, 244, 1, 2, 0, 243, 130] LoadLo(Constant(15)) [255, 0, 244, 1, 2, 0, 243, 130]
# PC:83 [255, 0, 244, 1, 2, 0, 243, 131] Add(SP) [242, 0, 244, 1, 2, 1, 243, 131]
# PC:84 [242, 0, 244, 1, 2, 1, 243, 132] StoreReg(SP) [242, 0, 244, 1, 2, 1, 242, 132]
# PC:85 [242, 0, 244, 1, 2, 1, 242, 133] LoadLo(Constant(15)) [255, 0, 244, 1, 2, 1, 242, 133]
# PC:86 [255, 0, 244, 1, 2, 1, 242, 134] Add(SP) [241, 0, 244, 1, 2, 1, 242, 134]
# PC:87 [241, 0, 244, 1, 2, 1, 242, 135] StoreReg(SP) [241, 0, 244, 1, 2, 1, 241, 135]
# PC:88 [241, 0, 244, 1, 2, 1, 241, 136] LoadReg(D) [1, 0, 244, 1, 2, 1, 241, 136]
# PC:89 [1, 0, 244, 1, 2, 1, 241, 137] StoreMem(SP) [1, 0, 244, 1, 2, 1, 241, 137]
# PC:8a [1, 0, 244, 1, 2, 1, 241, 138] LoadLo(Constant(3)) [3, 0, 244, 1, 2, 1, 241, 138]
# PC:8b [3, 0, 244, 1, 2, 1, 241, 139] Add(SP) [244, 0, 244, 1, 2, 0, 241, 139]
# PC:8c [244, 0, 244, 1, 2, 0, 241, 140] LoadMem(ACC) [0, 0, 244, 1, 2, 0, 241, 140]
# PC:8d [0, 0, 244, 1, 2, 0, 241, 141] StoreReg(B) [0, 0, 244, 1, 2, 0, 241, 141]
# PC:8e [0, 0, 244, 1, 2, 0, 241, 142] LoadLo(Constant(15)) [255, 0, 244, 1, 2, 0, 241, 142]
# PC:8f [255, 0, 244, 1, 2, 0, 241, 143] Add(SP) [240, 0, 244, 1, 2, 1, 241, 143]
# PC:90 [240, 0, 244, 1, 2, 1, 241, 144] StoreReg(SP) [240, 0, 244, 1, 2, 1, 240, 144]
# PC:91 [240, 0, 244, 1, 2, 1, 240, 145] LoadReg(B) [0, 0, 244, 1, 2, 1, 240, 145]
# PC:92 [0, 0, 244, 1, 2, 1, 240, 146] StoreMem(SP) [0, 0, 244, 1, 2, 1, 240, 146]
# PC:93 [0, 0, 244, 1, 2, 1, 240, 147] LoadLo(Constant(15)) [255, 0, 244, 1, 2, 1, 240, 147]
# PC:94 [255, 0, 244, 1, 2, 1, 240, 148] Add(SP) [239, 0, 244, 1, 2, 1, 240, 148]
# PC:95 [239, 0, 244, 1, 2, 1, 240, 149] StoreReg(SP) [239, 0, 244, 1, 2, 1, 239, 149]
# PC:96 [239, 0, 244, 1, 2, 1, 239, 150] LoadLo(Constant(5)) [5, 0, 244, 1, 2, 1, 239, 150]
# PC:97 [5, 0, 244, 1, 2, 1, 239, 151] Add(PC) [156, 0, 244, 1, 2, 0, 239, 151]
# PC:98 [156, 0, 244, 1, 2, 0, 239, 152] StoreMem(SP) [156, 0, 244, 1, 2, 0, 239, 152]
# PC:99 [156, 0, 244, 1, 2, 0, 239, 153] LoadLo(Constant(8)) [248, 0, 244, 1, 2, 0, 239, 153]
# PC:9a [248, 0, 244, 1, 2, 0, 239, 154] LoadHi(Constant(1)) [24, 0, 244, 1, 2, 0, 239, 154]
# PC:9b [24, 0, 244, 1, 2, 0, 239, 155] StoreReg(PC) [24, 0, 244, 1, 2, 0, 239, 24]
# PC:18 [24, 0, 244, 1, 2, 0, 239, 24] LoadLo(Constant(1)) [1, 0, 244, 1, 2, 0, 239, 24]
# PC:19 [1, 0, 244, 1, 2, 0, 239, 25] Add(SP) [240, 0, 244, 1, 2, 0, 239, 25]
# PC:1a [240, 0, 244, 1, 2, 0, 239, 26] LoadMem(ACC) [0, 0, 244, 1, 2, 0, 239, 26]
# PC:1b [0, 0, 244, 1, 2, 0, 239, 27] StoreReg(C) [0, 0, 0, 1, 2, 0, 239, 27]
# PC:1c [0, 0, 0, 1, 2, 0, 239, 28] LoadLo(Constant(0)) [0, 0, 0, 1, 2, 0, 239, 28]
# PC:1d [0, 0, 0, 1, 2, 0, 239, 29] LoadHi(Constant(0)) [0, 0, 0, 1, 2, 0, 239, 29]
# PC:1e [0, 0, 0, 1, 2, 0, 239, 30] Xor(C) [0, 0, 0, 1, 2, 0, 239, 30]
# PC:1f [0, 0, 0, 1, 2, 0, 239, 31] Jnz(Constant(12)) [0, 0, 0, 1, 2, 0, 239, 31]
# PC:20 [0, 0, 0, 1, 2, 0, 239, 32] LoadLo(Constant(1)) [1, 0, 0, 1, 2, 0, 239, 32]
# PC:21 [1, 0, 0, 1, 2, 0, 239, 33] LoadHi(Constant(0)) [1, 0, 0, 1, 2, 0, 239, 33]
# PC:22 [1, 0, 0, 1, 2, 0, 239, 34] StoreReg(B) [1, 1, 0, 1, 2, 0, 239, 34]
# PC:23 [1, 1, 0, 1, 2, 0, 239, 35] LoadLo(Constant(2)) [2, 1, 0, 1, 2, 0, 239, 35]
# PC:24 [2, 1, 0, 1, 2, 0, 239, 36] Add(SP) [241, 1, 0, 1, 2, 0, 239, 36]
# PC:25 [241, 1, 0, 1, 2, 0, 239, 37] StoreReg(C) [241, 1, 241, 1, 2, 0, 239, 37]
# PC:26 [241, 1, 241, 1, 2, 0, 239, 38] LoadReg(B) [1, 1, 241, 1, 2, 0, 239, 38]
# PC:27 [1, 1, 241, 1, 2, 0, 239, 39] StoreMem(C) [1, 1, 241, 1, 2, 0, 239, 39]
# PC:28 [1, 1, 241, 1, 2, 0, 239, 40] LoadLo(Constant(11)) [251, 1, 241, 1, 2, 0, 239, 40]
# PC:29 [251, 1, 241, 1, 2, 0, 239, 41] LoadHi(Constant(11)) [187, 1, 241, 1, 2, 0, 239, 41]
# PC:2a [187, 1, 241, 1, 2, 0, 239, 42] StoreReg(PC) [187, 1, 241, 1, 2, 0, 239, 187]
# PC:bb [187, 1, 241, 1, 2, 0, 239, 187] LoadMem(SP) [156, 1, 241, 1, 2, 0, 239, 187]
# PC:bc [156, 1, 241, 1, 2, 0, 239, 188] StoreReg(PC) [156, 1, 241, 1, 2, 0, 239, 156]
# PC:9c [156, 1, 241, 1, 2, 0, 239, 156] LoadLo(Constant(1)) [1, 1, 241, 1, 2, 0, 239, 156]
# PC:9d [1, 1, 241, 1, 2, 0, 239, 157] Add(SP) [240, 1, 241, 1, 2, 0, 239, 157]
# PC:9e [240, 1, 241, 1, 2, 0, 239, 158] StoreReg(SP) [240, 1, 241, 1, 2, 0, 240, 158]
# PC:9f [240, 1, 241, 1, 2, 0, 240, 159] LoadLo(Constant(1)) [1, 1, 241, 1, 2, 0, 240, 159]
# PC:a0 [1, 1, 241, 1, 2, 0, 240, 160] Add(SP) [241, 1, 241, 1, 2, 0, 240, 160]
# PC:a1 [241, 1, 241, 1, 2, 0, 240, 161] StoreReg(SP) [241, 1, 241, 1, 2, 0, 241, 161]
# PC:a2 [241, 1, 241, 1, 2, 0, 241, 162] LoadMem(SP) [1, 1, 241, 1, 2, 0, 241, 162]
# PC:a3 [1, 1, 241, 1, 2, 0, 241, 163] StoreReg(D) [1, 1, 241, 1, 2, 0, 241, 163]
# PC:a4 [1, 1, 241, 1, 2, 0, 241, 164] LoadLo(Constant(1)) [1, 1, 241, 1, 2, 0, 241, 164]
# PC:a5 [1, 1, 241, 1, 2, 0, 241, 165] Add(SP) [242, 1, 241, 1, 2, 0, 241, 165]
# PC:a6 [242, 1, 241, 1, 2, 0, 241, 166] StoreReg(SP) [242, 1, 241, 1, 2, 0, 242, 166]
# PC:a7 [242, 1, 241, 1, 2, 0, 242, 167] LoadMem(SP) [1, 1, 241, 1, 2, 0, 242, 167]
# PC:a8 [1, 1, 241, 1, 2, 0, 242, 168] StoreReg(B) [1, 1, 241, 1, 2, 0, 242, 168]
# PC:a9 [1, 1, 241, 1, 2, 0, 242, 169] LoadLo(Constant(1)) [1, 1, 241, 1, 2, 0, 242, 169]
# PC:aa [1, 1, 241, 1, 2, 0, 242, 170] Add(SP) [243, 1, 241, 1, 2, 0, 242, 170]
# PC:ab [243, 1, 241, 1, 2, 0, 242, 171] StoreReg(SP) [243, 1, 241, 1, 2, 0, 243, 171]
# PC:ac [243, 1, 241, 1, 2, 0, 243, 172] LoadReg(B) [1, 1, 241, 1, 2, 0, 243, 172]
# PC:ad [1, 1, 241, 1, 2, 0, 243, 173] StoreReg(E) [1, 1, 241, 1, 1, 0, 243, 173]
# PC:ae [1, 1, 241, 1, 1, 0, 243, 174] LoadReg(D) [1, 1, 241, 1, 1, 0, 243, 174]
# PC:af [1, 1, 241, 1, 1, 0, 243, 175] StoreReg(C) [1, 1, 1, 1, 1, 0, 243, 175]
# PC:b0 [1, 1, 1, 1, 1, 0, 243, 176] LoadReg(E) [1, 1, 1, 1, 1, 0, 243, 176]
# PC:b1 [1, 1, 1, 1, 1, 0, 243, 177] Add(C) [2, 1, 1, 1, 1, 0, 243, 177]
# PC:b2 [2, 1, 1, 1, 1, 0, 243, 178] StoreReg(B) [2, 2, 1, 1, 1, 0, 243, 178]
# PC:b3 [2, 2, 1, 1, 1, 0, 243, 179] LoadLo(Constant(2)) [2, 2, 1, 1, 1, 0, 243, 179]
# PC:b4 [2, 2, 1, 1, 1, 0, 243, 180] Add(SP) [245, 2, 1, 1, 1, 0, 243, 180]
# PC:b5 [245, 2, 1, 1, 1, 0, 243, 181] StoreReg(C) [245, 2, 245, 1, 1, 0, 243, 181]
# PC:b6 [245, 2, 245, 1, 1, 0, 243, 182] LoadReg(B) [2, 2, 245, 1, 1, 0, 243, 182]
# PC:b7 [2, 2, 245, 1, 1, 0, 243, 183] StoreMem(C) [2, 2, 245, 1, 1, 0, 243, 183]
# PC:b8 [2, 2, 245, 1, 1, 0, 243, 184] LoadLo(Constant(11)) [251, 2, 245, 1, 1, 0, 243, 184]
# PC:b9 [251, 2, 245, 1, 1, 0, 243, 185] LoadHi(Constant(11)) [187, 2, 245, 1, 1, 0, 243, 185]
# PC:ba [187, 2, 245, 1, 1, 0, 243, 186] StoreReg(PC) [187, 2, 245, 1, 1, 0, 243, 187]
# PC:bb [187, 2, 245, 1, 1, 0, 243, 187] LoadMem(SP) [156, 2, 245, 1, 1, 0, 243, 187]
# PC:bc [156, 2, 245, 1, 1, 0, 243, 188] StoreReg(PC) [156, 2, 245, 1, 1, 0, 243, 156]
# PC:9c [156, 2, 245, 1, 1, 0, 243, 156] LoadLo(Constant(1)) [1, 2, 245, 1, 1, 0, 243, 156]
# PC:9d [1, 2, 245, 1, 1, 0, 243, 157] Add(SP) [244, 2, 245, 1, 1, 0, 243, 157]
# PC:9e [244, 2, 245, 1, 1, 0, 243, 158] StoreReg(SP) [244, 2, 245, 1, 1, 0, 244, 158]
# PC:9f [244, 2, 245, 1, 1, 0, 244, 159] LoadLo(Constant(1)) [1, 2, 245, 1, 1, 0, 244, 159]
# PC:a0 [1, 2, 245, 1, 1, 0, 244, 160] Add(SP) [245, 2, 245, 1, 1, 0, 244, 160]
# PC:a1 [245, 2, 245, 1, 1, 0, 244, 161] StoreReg(SP) [245, 2, 245, 1, 1, 0, 245, 161]
# PC:a2 [245, 2, 245, 1, 1, 0, 245, 162] LoadMem(SP) [2, 2, 245, 1, 1, 0, 245, 162]
# PC:a3 [2, 2, 245, 1, 1, 0, 245, 163] StoreReg(D) [2, 2, 245, 2, 1, 0, 245, 163]
# PC:a4 [2, 2, 245, 2, 1, 0, 245, 164] LoadLo(Constant(1)) [1, 2, 245, 2, 1, 0, 245, 164]
# PC:a5 [1, 2, 245, 2, 1, 0, 245, 165] Add(SP) [246, 2, 245, 2, 1, 0, 245, 165]
# PC:a6 [246, 2, 245, 2, 1, 0, 245, 166] StoreReg(SP) [246, 2, 245, 2, 1, 0, 246, 166]
# PC:a7 [246, 2, 245, 2, 1, 0, 246, 167] LoadMem(SP) [3, 2, 245, 2, 1, 0, 246, 167]
# PC:a8 [3, 2, 245, 2, 1, 0, 246, 168] StoreReg(B) [3, 3, 245, 2, 1, 0, 246, 168]
# PC:a9 [3, 3, 245, 2, 1, 0, 246, 169] LoadLo(Constant(1)) [1, 3, 245, 2, 1, 0, 246, 169]
# PC:aa [1, 3, 245, 2, 1, 0, 246, 170] Add(SP) [247, 3, 245, 2, 1, 0, 246, 170]
# PC:ab [247, 3, 245, 2, 1, 0, 246, 171] StoreReg(SP) [247, 3, 245, 2, 1, 0, 247, 171]
# PC:ac [247, 3, 245, 2, 1, 0, 247, 172] LoadReg(B) [3, 3, 245, 2, 1, 0, 247, 172]
# PC:ad [3, 3, 245, 2, 1, 0, 247, 173] StoreReg(E) [3, 3, 245, 2, 3, 0, 247, 173]
# PC:ae [3, 3, 245, 2, 3, 0, 247, 174] LoadReg(D) [2, 3, 245, 2, 3, 0, 247, 174]
# PC:af [2, 3, 245, 2, 3, 0, 247, 175] StoreReg(C) [2, 3, 2, 2, 3, 0, 247, 175]
# PC:b0 [2, 3, 2, 2, 3, 0, 247, 176] LoadReg(E) [3, 3, 2, 2, 3, 0, 247, 176]
# PC:b1 [3, 3, 2, 2, 3, 0, 247, 177] Add(C) [5, 3, 2, 2, 3, 0, 247, 177]
# PC:b2 [5, 3, 2, 2, 3, 0, 247, 178] StoreReg(B) [5, 5, 2, 2, 3, 0, 247, 178]
# PC:b3 [5, 5, 2, 2, 3, 0, 247, 179] LoadLo(Constant(2)) [2, 5, 2, 2, 3, 0, 247, 179]
# PC:b4 [2, 5, 2, 2, 3, 0, 247, 180] Add(SP) [249, 5, 2, 2, 3, 0, 247, 180]
# PC:b5 [249, 5, 2, 2, 3, 0, 247, 181] StoreReg(C) [249, 5, 249, 2, 3, 0, 247, 181]
# PC:b6 [249, 5, 249, 2, 3, 0, 247, 182] LoadReg(B) [5, 5, 249, 2, 3, 0, 247, 182]
# PC:b7 [5, 5, 249, 2, 3, 0, 247, 183] StoreMem(C) [5, 5, 249, 2, 3, 0, 247, 183]
# PC:b8 [5, 5, 249, 2, 3, 0, 247, 184] LoadLo(Constant(11)) [251, 5, 249, 2, 3, 0, 247, 184]
# PC:b9 [251, 5, 249, 2, 3, 0, 247, 185] LoadHi(Constant(11)) [187, 5, 249, 2, 3, 0, 247, 185]
# PC:ba [187, 5, 249, 2, 3, 0, 247, 186] StoreReg(PC) [187, 5, 249, 2, 3, 0, 247, 187]
# PC:bb [187, 5, 249, 2, 3, 0, 247, 187] LoadMem(SP) [100, 5, 249, 2, 3, 0, 247, 187]
# PC:bc [100, 5, 249, 2, 3, 0, 247, 188] StoreReg(PC) [100, 5, 249, 2, 3, 0, 247, 100]
# PC:64 [100, 5, 249, 2, 3, 0, 247, 100] LoadLo(Constant(1)) [1, 5, 249, 2, 3, 0, 247, 100]
# PC:65 [1, 5, 249, 2, 3, 0, 247, 101] Add(SP) [248, 5, 249, 2, 3, 0, 247, 101]
# PC:66 [248, 5, 249, 2, 3, 0, 247, 102] StoreReg(SP) [248, 5, 249, 2, 3, 0, 248, 102]
# PC:67 [248, 5, 249, 2, 3, 0, 248, 103] LoadLo(Constant(1)) [1, 5, 249, 2, 3, 0, 248, 103]
# PC:68 [1, 5, 249, 2, 3, 0, 248, 104] Add(SP) [249, 5, 249, 2, 3, 0, 248, 104]
# PC:69 [249, 5, 249, 2, 3, 0, 248, 105] StoreReg(SP) [249, 5, 249, 2, 3, 0, 249, 105]
# PC:6a [249, 5, 249, 2, 3, 0, 249, 106] LoadMem(SP) [5, 5, 249, 2, 3, 0, 249, 106]
# PC:6b [5, 5, 249, 2, 3, 0, 249, 107] StoreReg(B) [5, 5, 249, 2, 3, 0, 249, 107]
# PC:6c [5, 5, 249, 2, 3, 0, 249, 108] LoadLo(Constant(1)) [1, 5, 249, 2, 3, 0, 249, 108]
# PC:6d [1, 5, 249, 2, 3, 0, 249, 109] Add(SP) [250, 5, 249, 2, 3, 0, 249, 109]
# PC:6e [250, 5, 249, 2, 3, 0, 249, 110] StoreReg(SP) [250, 5, 249, 2, 3, 0, 250, 110]
# PC:6f [250, 5, 249, 2, 3, 0, 250, 111] LoadReg(B) [5, 5, 249, 2, 3, 0, 250, 111]
# PC:70 [5, 5, 249, 2, 3, 0, 250, 112] StoreReg(D) [5, 5, 249, 5, 3, 0, 250, 112]
# PC:71 [5, 5, 249, 5, 3, 0, 250, 113] LoadLo(Constant(1)) [1, 5, 249, 5, 3, 0, 250, 113]
# PC:72 [1, 5, 249, 5, 3, 0, 250, 114] Add(SP) [251, 5, 249, 5, 3, 0, 250, 114]
# PC:73 [251, 5, 249, 5, 3, 0, 250, 115] LoadMem(ACC) [4, 5, 249, 5, 3, 0, 250, 115]
# PC:74 [4, 5, 249, 5, 3, 0, 250, 116] StoreReg(C) [4, 5, 4, 5, 3, 0, 250, 116]
# PC:75 [4, 5, 4, 5, 3, 0, 250, 117] LoadLo(Constant(1)) [1, 5, 4, 5, 3, 0, 250, 117]
# PC:76 [1, 5, 4, 5, 3, 0, 250, 118] LoadHi(Constant(0)) [1, 5, 4, 5, 3, 0, 250, 118]
# PC:77 [1, 5, 4, 5, 3, 0, 250, 119] Not(ACC) [254, 5, 4, 5, 3, 0, 250, 119]
# PC:78 [254, 5, 4, 5, 3, 0, 250, 120] StoreReg(B) [254, 254, 4, 5, 3, 0, 250, 120]
# PC:79 [254, 254, 4, 5, 3, 0, 250, 121] LoadLo(Constant(1)) [1, 254, 4, 5, 3, 0, 250, 121]
# PC:7a [1, 254, 4, 5, 3, 0, 250, 122] Add(B) [255, 254, 4, 5, 3, 0, 250, 122]
# PC:7b [255, 254, 4, 5, 3, 0, 250, 123] Add(C) [3, 254, 4, 5, 3, 1, 250, 123]
# PC:7c [3, 254, 4, 5, 3, 1, 250, 124] StoreReg(B) [3, 3, 4, 5, 3, 1, 250, 124]
# PC:7d [3, 3, 4, 5, 3, 1, 250, 125] LoadLo(Constant(1)) [1, 3, 4, 5, 3, 1, 250, 125]
# PC:7e [1, 3, 4, 5, 3, 1, 250, 126] Add(SP) [251, 3, 4, 5, 3, 0, 250, 126]
# PC:7f [251, 3, 4, 5, 3, 0, 250, 127] StoreReg(C) [251, 3, 251, 5, 3, 0, 250, 127]
# PC:80 [251, 3, 251, 5, 3, 0, 250, 128] LoadReg(B) [3, 3, 251, 5, 3, 0, 250, 128]
# PC:81 [3, 3, 251, 5, 3, 0, 250, 129] StoreMem(C) [3, 3, 251, 5, 3, 0, 250, 129]
# PC:82 [3, 3, 251, 5, 3, 0, 250, 130] LoadLo(Constant(15)) [255, 3, 251, 5, 3, 0, 250, 130]
# PC:83 [255, 3, 251, 5, 3, 0, 250, 131] Add(SP) [249, 3, 251, 5, 3, 1, 250, 131]
# PC:84 [249, 3, 251, 5, 3, 1, 250, 132] StoreReg(SP) [249, 3, 251, 5, 3, 1, 249, 132]
# PC:85 [249, 3, 251, 5, 3, 1, 249, 133] LoadLo(Constant(15)) [255, 3, 251, 5, 3, 1, 249, 133]
# PC:86 [255, 3, 251, 5, 3, 1, 249, 134] Add(SP) [248, 3, 251, 5, 3, 1, 249, 134]
# PC:87 [248, 3, 251, 5, 3, 1, 249, 135] StoreReg(SP) [248, 3, 251, 5, 3, 1, 248, 135]
# PC:88 [248, 3, 251, 5, 3, 1, 248, 136] LoadReg(D) [5, 3, 251, 5, 3, 1, 248, 136]
# PC:89 [5, 3, 251, 5, 3, 1, 248, 137] StoreMem(SP) [5, 3, 251, 5, 3, 1, 248, 137]
# PC:8a [5, 3, 251, 5, 3, 1, 248, 138] LoadLo(Constant(3)) [3, 3, 251, 5, 3, 1, 248, 138]
# PC:8b [3, 3, 251, 5, 3, 1, 248, 139] Add(SP) [251, 3, 251, 5, 3, 0, 248, 139]
# PC:8c [251, 3, 251, 5, 3, 0, 248, 140] LoadMem(ACC) [3, 3, 251, 5, 3, 0, 248, 140]
# PC:8d [3, 3, 251, 5, 3, 0, 248, 141] StoreReg(B) [3, 3, 251, 5, 3, 0, 248, 141]
# PC:8e [3, 3, 251, 5, 3, 0, 248, 142] LoadLo(Constant(15)) [255, 3, 251, 5, 3, 0, 248, 142]
# PC:8f [255, 3, 251, 5, 3, 0, 248, 143] Add(SP) [247, 3, 251, 5, 3, 1, 248, 143]
# PC:90 [247, 3, 251, 5, 3, 1, 248, 144] StoreReg(SP) [247, 3, 251, 5, 3, 1, 247, 144]
# PC:91 [247, 3, 251, 5, 3, 1, 247, 145] LoadReg(B) [3, 3, 251, 5, 3, 1, 247, 145]
# PC:92 [3, 3, 251, 5, 3, 1, 247, 146] StoreMem(SP) [3, 3, 251, 5, 3, 1, 247, 146]
# PC:93 [3, 3, 251, 5, 3, 1, 247, 147] LoadLo(Constant(15)) [255, 3, 251, 5, 3, 1, 247, 147]
# PC:94 [255, 3, 251, 5, 3, 1, 247, 148] Add(SP) [246, 3, 251, 5, 3, 1, 247, 148]
# PC:95 [246, 3, 251, 5, 3, 1, 247, 149] StoreReg(SP) [246, 3, 251, 5, 3, 1, 246, 149]
# PC:96 [246, 3, 251, 5, 3, 1, 246, 150] LoadLo(Constant(5)) [5, 3, 251, 5, 3, 1, 246, 150]
# PC:97 [5, 3, 251, 5, 3, 1, 246, 151] Add(PC) [156, 3, 251, 5, 3, 0, 246, 151]
# PC:98 [156, 3, 251, 5, 3, 0, 246, 152] StoreMem(SP) [156, 3, 251, 5, 3, 0, 246, 152]
# PC:99 [156, 3, 251, 5, 3, 0, 246, 153] LoadLo(Constant(8)) [248, 3, 251, 5, 3, 0, 246, 153]
# PC:9a [248, 3, 251, 5, 3, 0, 246, 154] LoadHi(Constant(1)) [24, 3, 251, 5, 3, 0, 246, 154]
# PC:9b [24, 3, 251, 5, 3, 0, 246, 155] StoreReg(PC) [24, 3, 251, 5, 3, 0, 246, 24]
# PC:18 [24, 3, 251, 5, 3, 0, 246, 24] LoadLo(Constant(1)) [1, 3, 251, 5, 3, 0, 246, 24]
# PC:19 [1, 3, 251, 5, 3, 0, 246, 25] Add(SP) [247, 3, 251, 5, 3, 0, 246, 25]
# PC:1a [247, 3, 251, 5, 3, 0, 246, 26] LoadMem(ACC) [3, 3, 251, 5, 3, 0, 246, 26]
# PC:1b [3, 3, 251, 5, 3, 0, 246, 27] StoreReg(C) [3, 3, 3, 5, 3, 0, 246, 27]
# PC:1c [3, 3, 3, 5, 3, 0, 246, 28] LoadLo(Constant(0)) [0, 3, 3, 5, 3, 0, 246, 28]
# PC:1d [0, 3, 3, 5, 3, 0, 246, 29] LoadHi(Constant(0)) [0, 3, 3, 5, 3, 0, 246, 29]
# PC:1e [0, 3, 3, 5, 3, 0, 246, 30] Xor(C) [3, 3, 3, 5, 3, 0, 246, 30]
# PC:1f [3, 3, 3, 5, 3, 0, 246, 31] Jnz(Constant(12)) [3, 3, 3, 5, 3, 0, 246, 43]
# PC:2b [3, 3, 3, 5, 3, 0, 246, 43] LoadLo(Constant(1)) [1, 3, 3, 5, 3, 0, 246, 43]
# PC:2c [1, 3, 3, 5, 3, 0, 246, 44] Add(SP) [247, 3, 3, 5, 3, 0, 246, 44]
# PC:2d [247, 3, 3, 5, 3, 0, 246, 45] LoadMem(ACC) [3, 3, 3, 5, 3, 0, 246, 45]
# PC:2e [3, 3, 3, 5, 3, 0, 246, 46] StoreReg(C) [3, 3, 3, 5, 3, 0, 246, 46]
# PC:2f [3, 3, 3, 5, 3, 0, 246, 47] LoadLo(Constant(1)) [1, 3, 3, 5, 3, 0, 246, 47]
# PC:30 [1, 3, 3, 5, 3, 0, 246, 48] LoadHi(Constant(0)) [1, 3, 3, 5, 3, 0, 246, 48]
# PC:31 [1, 3, 3, 5, 3, 0, 246, 49] Not(ACC) [254, 3, 3, 5, 3, 0, 246, 49]
# PC:32 [254, 3, 3, 5, 3, 0, 246, 50] StoreReg(B) [254, 254, 3, 5, 3, 0, 246, 50]
# PC:33 [254, 254, 3, 5, 3, 0, 246, 51] LoadLo(Constant(1)) [1, 254, 3, 5, 3, 0, 246, 51]
# PC:34 [1, 254, 3, 5, 3, 0, 246, 52] Add(B) [255, 254, 3, 5, 3, 0, 246, 52]
# PC:35 [255, 254, 3, 5, 3, 0, 246, 53] Add(C) [2, 254, 3, 5, 3, 1, 246, 53]
# PC:36 [2, 254, 3, 5, 3, 1, 246, 54] StoreReg(B) [2, 2, 3, 5, 3, 1, 246, 54]
# PC:37 [2, 2, 3, 5, 3, 1, 246, 55] LoadLo(Constant(1)) [1, 2, 3, 5, 3, 1, 246, 55]
# PC:38 [1, 2, 3, 5, 3, 1, 246, 56] Add(SP) [247, 2, 3, 5, 3, 0, 246, 56]
# PC:39 [247, 2, 3, 5, 3, 0, 246, 57] StoreReg(C) [247, 2, 247, 5, 3, 0, 246, 57]
# PC:3a [247, 2, 247, 5, 3, 0, 246, 58] LoadReg(B) [2, 2, 247, 5, 3, 0, 246, 58]
# PC:3b [2, 2, 247, 5, 3, 0, 246, 59] StoreMem(C) [2, 2, 247, 5, 3, 0, 246, 59]
# PC:3c [2, 2, 247, 5, 3, 0, 246, 60] LoadLo(Constant(1)) [1, 2, 247, 5, 3, 0, 246, 60]
# PC:3d [1, 2, 247, 5, 3, 0, 246, 61] Add(SP) [247, 2, 247, 5, 3, 0, 246, 61]
# PC:3e [247, 2, 247, 5, 3, 0, 246, 62] LoadMem(ACC) [2, 2, 247, 5, 3, 0, 246, 62]
# PC:3f [2, 2, 247, 5, 3, 0, 246, 63] StoreReg(C) [2, 2, 2, 5, 3, 0, 246, 63]
# PC:40 [2, 2, 2, 5, 3, 0, 246, 64] LoadLo(Constant(0)) [0, 2, 2, 5, 3, 0, 246, 64]
# PC:41 [0, 2, 2, 5, 3, 0, 246, 65] LoadHi(Constant(0)) [0, 2, 2, 5, 3, 0, 246, 65]
# PC:42 [0, 2, 2, 5, 3, 0, 246, 66] Xor(C) [2, 2, 2, 5, 3, 0, 246, 66]
# PC:43 [2, 2, 2, 5, 3, 0, 246, 67] Jnz(Constant(12)) [2, 2, 2, 5, 3, 0, 246, 79]
# PC:4f [2, 2, 2, 5, 3, 0, 246, 79] LoadLo(Constant(15)) [255, 2, 2, 5, 3, 0, 246, 79]
# PC:50 [255, 2, 2, 5, 3, 0, 246, 80] Add(SP) [245, 2, 2, 5, 3, 1, 246, 80]
# PC:51 [245, 2, 2, 5, 3, 1, 246, 81] StoreReg(SP) [245, 2, 2, 5, 3, 1, 245, 81]
# PC:52 [245, 2, 2, 5, 3, 1, 245, 82] LoadLo(Constant(2)) [2, 2, 2, 5, 3, 1, 245, 82]
# PC:53 [2, 2, 2, 5, 3, 1, 245, 83] Add(SP) [247, 2, 2, 5, 3, 0, 245, 83]
# PC:54 [247, 2, 2, 5, 3, 0, 245, 84] LoadMem(ACC) [2, 2, 2, 5, 3, 0, 245, 84]
# PC:55 [2, 2, 2, 5, 3, 0, 245, 85] StoreReg(B) [2, 2, 2, 5, 3, 0, 245, 85]
# PC:56 [2, 2, 2, 5, 3, 0, 245, 86] LoadLo(Constant(15)) [255, 2, 2, 5, 3, 0, 245, 86]
# PC:57 [255, 2, 2, 5, 3, 0, 245, 87] Add(SP) [244, 2, 2, 5, 3, 1, 245, 87]
# PC:58 [244, 2, 2, 5, 3, 1, 245, 88] StoreReg(SP) [244, 2, 2, 5, 3, 1, 244, 88]
# PC:59 [244, 2, 2, 5, 3, 1, 244, 89] LoadReg(B) [2, 2, 2, 5, 3, 1, 244, 89]
# PC:5a [2, 2, 2, 5, 3, 1, 244, 90] StoreMem(SP) [2, 2, 2, 5, 3, 1, 244, 90]
# PC:5b [2, 2, 2, 5, 3, 1, 244, 91] LoadLo(Constant(15)) [255, 2, 2, 5, 3, 1, 244, 91]
# PC:5c [255, 2, 2, 5, 3, 1, 244, 92] Add(SP) [243, 2, 2, 5, 3, 1, 244, 92]
# PC:5d [243, 2, 2, 5, 3, 1, 244, 93] StoreReg(SP) [243, 2, 2, 5, 3, 1, 243, 93]
# PC:5e [243, 2, 2, 5, 3, 1, 243, 94] LoadLo(Constant(5)) [5, 2, 2, 5, 3, 1, 243, 94]
# PC:5f [5, 2, 2, 5, 3, 1, 243, 95] Add(PC) [100, 2, 2, 5, 3, 0, 243, 95]
# PC:60 [100, 2, 2, 5, 3, 0, 243, 96] StoreMem(SP) [100, 2, 2, 5, 3, 0, 243, 96]
# PC:61 [100, 2, 2, 5, 3, 0, 243, 97] LoadLo(Constant(8)) [248, 2, 2, 5, 3, 0, 243, 97]
# PC:62 [248, 2, 2, 5, 3, 0, 243, 98] LoadHi(Constant(1)) [24, 2, 2, 5, 3, 0, 243, 98]
# PC:63 [24, 2, 2, 5, 3, 0, 243, 99] StoreReg(PC) [24, 2, 2, 5, 3, 0, 243, 24]
# PC:18 [24, 2, 2, 5, 3, 0, 243, 24] LoadLo(Constant(1)) [1, 2, 2, 5, 3, 0, 243, 24]
# PC:19 [1, 2, 2, 5, 3, 0, 243, 25] Add(SP) [244, 2, 2, 5, 3, 0, 243, 25]
# PC:1a [244, 2, 2, 5, 3, 0, 243, 26] LoadMem(ACC) [2, 2, 2, 5, 3, 0, 243, 26]
# PC:1b [2, 2, 2, 5, 3, 0, 243, 27] StoreReg(C) [2, 2, 2, 5, 3, 0, 243, 27]
# PC:1c [2, 2, 2, 5, 3, 0, 243, 28] LoadLo(Constant(0)) [0, 2, 2, 5, 3, 0, 243, 28]
# PC:1d [0, 2, 2, 5, 3, 0, 243, 29] LoadHi(Constant(0)) [0, 2, 2, 5, 3, 0, 243, 29]
# PC:1e [0, 2, 2, 5, 3, 0, 243, 30] Xor(C) [2, 2, 2, 5, 3, 0, 243, 30]
# PC:1f [2, 2, 2, 5, 3, 0, 243, 31] Jnz(Constant(12)) [2, 2, 2, 5, 3, 0, 243, 43]
# PC:2b [2, 2, 2, 5, 3, 0, 243, 43] LoadLo(Constant(1)) [1, 2, 2, 5, 3, 0, 243, 43]
# PC:2c [1, 2, 2, 5, 3, 0, 243, 44] Add(SP) [244, 2, 2, 5, 3, 0, 243, 44]
# PC:2d [244, 2, 2, 5, 3, 0, 243, 45] LoadMem(ACC) [2, 2, 2, 5, 3, 0, 243, 45]
# PC:2e [2, 2, 2, 5, 3, 0, 243, 46] StoreReg(C) [2, 2, 2, 5, 3, 0, 243, 46]
# PC:2f [2, 2, 2, 5, 3, 0, 243, 47] LoadLo(Constant(1)) [1, 2, 2, 5, 3, 0, 243, 47]
# PC:30 [1, 2, 2, 5, 3, 0, 243, 48] LoadHi(Constant(0)) [1, 2, 2, 5, 3, 0, 243, 48]
# PC:31 [1, 2, 2, 5, 3, 0, 243, 49] Not(ACC) [254, 2, 2, 5, 3, 0, 243, 49]
# PC:32 [254, 2, 2, 5, 3, 0, 243, 50] StoreReg(B) [254, 254, 2, 5, 3, 0, 243, 50]
# PC:33 [254, 254, 2, 5, 3, 0, 243, 51] LoadLo(Constant(1)) [1, 254, 2, 5, 3, 0, 243, 51]
# PC:34 [1, 254, 2, 5, 3, 0, 243, 52] Add(B) [255, 254, 2, 5, 3, 0, 243, 52]
# PC:35 [255, 254, 2, 5, 3, 0, 243, 53] Add(C) [1, 254, 2, 5, 3, 1, 243, 53]
# PC:36 [1, 254, 2, 5, 3, 1, 243, 54] StoreReg(B) [1, 1, 2, 5, 3, 1, 243, 54]
# PC:37 [1, 1, 2, 5, 3, 1, 243, 55] LoadLo(Constant(1)) [1, 1, 2, 5, 3, 1, 243, 55]
# PC:38 [1, 1, 2, 5, 3, 1, 243, 56] Add(SP) [244, 1, 2, 5, 3, 0, 243, 56]
# PC:39 [244, 1, 2, 5, 3, 0, 243, 57] StoreReg(C) [244, 1, 244, 5, 3, 0, 243, 57]
# PC:3a [244, 1, 244, 5, 3, 0, 243, 58] LoadReg(B) [1, 1, 244, 5, 3, 0, 243, 58]
# PC:3b [1, 1, 244, 5, 3, 0, 243, 59] StoreMem(C) [1, 1, 244, 5, 3, 0, 243, 59]
# PC:3c [1, 1, 244, 5, 3, 0, 243, 60] LoadLo(Constant(1)) [1, 1, 244, 5, 3, 0, 243, 60]
# PC:3d [1, 1, 244, 5, 3, 0, 243, 61] Add(SP) [244, 1, 244, 5, 3, 0, 243, 61]
# PC:3e [244, 1, 244, 5, 3, 0, 243, 62] LoadMem(ACC) [1, 1, 244, 5, 3, 0, 243, 62]
# PC:3f [1, 1, 244, 5, 3, 0, 243, 63] StoreReg(C) [1, 1, 1, 5, 3, 0, 243, 63]
# PC:40 [1, 1, 1, 5, 3, 0, 243, 64] LoadLo(Constant(0)) [0, 1, 1, 5, 3, 0, 243, 64]
# PC:41 [0, 1, 1, 5, 3, 0, 243, 65] LoadHi(Constant(0)) [0, 1, 1, 5, 3, 0, 243, 65]
# PC:42 [0, 1, 1, 5, 3, 0, 243, 66] Xor(C) [1, 1, 1, 5, 3, 0, 243, 66]
# PC:43 [1, 1, 1, 5, 3, 0, 243, 67] Jnz(Constant(12)) [1, 1, 1, 5, 3, 0, 243, 79]
# PC:4f [1, 1, 1, 5, 3, 0, 243, 79] LoadLo(Constant(15)) [255, 1, 1, 5, 3, 0, 243, 79]
# PC:50 [255, 1, 1, 5, 3, 0, 243, 80] Add(SP) [242, 1, 1, 5, 3, 1, 243, 80]
# PC:51 [242, 1, 1, 5, 3, 1, 243, 81] StoreReg(SP) [242, 1, 1, 5, 3, 1, 242, 81]
# PC:52 [242, 1, 1, 5, 3, 1, 242, 82] LoadLo(Constant(2)) [2, 1, 1, 5, 3, 1, 242, 82]
# PC:53 [2, 1, 1, 5, 3, 1, 242, 83] Add(SP) [244, 1, 1, 5, 3, 0, 242, 83]
# PC:54 [244, 1, 1, 5, 3, 0, 242, 84] LoadMem(ACC) [1, 1, 1, 5, 3, 0, 242, 84]
# PC:55 [1, 1, 1, 5, 3, 0, 242, 85] StoreReg(B) [1, 1, 1, 5, 3, 0, 242, 85]
# PC:56 [1, 1, 1, 5, 3, 0, 242, 86] LoadLo(Constant(15)) [255, 1, 1, 5, 3, 0, 242, 86]
# PC:57 [255, 1, 1, 5, 3, 0, 242, 87] Add(SP) [241, 1, 1, 5, 3, 1, 242, 87]
# PC:58 [241, 1, 1, 5, 3, 1, 242, 88] StoreReg(SP) [241, 1, 1, 5, 3, 1, 241, 88]
# PC:59 [241, 1, 1, 5, 3, 1, 241, 89] LoadReg(B) [1, 1, 1, 5, 3, 1, 241, 89]
# PC:5a [1, 1, 1, 5, 3, 1, 241, 90] StoreMem(SP) [1, 1, 1, 5, 3, 1, 241, 90]
# PC:5b [1, 1, 1, 5, 3, 1, 241, 91] LoadLo(Constant(15)) [255, 1, 1, 5, 3, 1, 241, 91]
# PC:5c [255, 1, 1, 5, 3, 1, 241, 92] Add(SP) [240, 1, 1, 5, 3, 1, 241, 92]
# PC:5d [240, 1, 1, 5, 3, 1, 241, 93] StoreReg(SP) [240, 1, 1, 5, 3, 1, 240, 93]
# PC:5e [240, 1, 1, 5, 3, 1, 240, 94] LoadLo(Constant(5)) [5, 1, 1, 5, 3, 1, 240, 94]
# PC:5f [5, 1, 1, 5, 3, 1, 240, 95] Add(PC) [100, 1, 1, 5, 3, 0, 240, 95]
# PC:60 [100, 1, 1, 5, 3, 0, 240, 96] StoreMem(SP) [100, 1, 1, 5, 3, 0, 240, 96]
# PC:61 [100, 1, 1, 5, 3, 0, 240, 97] LoadLo(Constant(8)) [248, 1, 1, 5, 3, 0, 240, 97]
# PC:62 [248, 1, 1, 5, 3, 0, 240, 98] LoadHi(Constant(1)) [24, 1, 1, 5, 3, 0, 240, 98]
# PC:63 [24, 1, 1, 5, 3, 0, 240, 99] StoreReg(PC) [24, 1, 1, 5, 3, 0, 240, 24]
# PC:18 [24, 1, 1, 5, 3, 0, 240, 24] LoadLo(Constant(1)) [1, 1, 1, 5, 3, 0, 240, 24]
# PC:19 [1, 1, 1, 5, 3, 0, 240, 25] Add(SP) [241, 1, 1, 5, 3, 0, 240, 25]
# PC:1a [241, 1, 1, 5, 3, 0, 240, 26] LoadMem(ACC) [1, 1, 1, 5, 3, 0, 240, 26]
# PC:1b [1, 1, 1, 5, 3, 0, 240, 27] StoreReg(C) [1, 1, 1, 5, 3, 0, 240, 27]
# PC:1c [1, 1, 1, 5, 3, 0, 240, 28] LoadLo(Constant(0)) [0, 1, 1, 5, 3, 0, 240, 28]
# PC:1d [0, 1, 1, 5, 3, 0, 240, 29] LoadHi(Constant(0)) [0, 1, 1, 5, 3, 0, 240, 29]
# PC:1e [0, 1, 1, 5, 3, 0, 240, 30] Xor(C) [1, 1, 1, 5, 3, 0, 240, 30]
# PC:1f [1, 1, 1, 5, 3, 0, 240, 31] Jnz(Constant(12)) [1, 1, 1, 5, 3, 0, 240, 43]
# PC:2b [1, 1, 1, 5, 3, 0, 240, 43] LoadLo(Constant(1)) [1, 1, 1, 5, 3, 0, 240, 43]
# PC:2c [1, 1, 1, 5, 3, 0, 240, 44] Add(SP) [241, 1, 1, 5, 3, 0, 240, 44]
# PC:2d [241, 1, 1, 5, 3, 0, 240, 45] LoadMem(ACC) [1, 1, 1, 5, 3, 0, 240, 45]
# PC:2e [1, 1, 1, 5, 3, 0, 240, 46] StoreReg(C) [1, 1, 1, 5, 3, 0, 240, 46]
# PC:2f [1, 1, 1, 5, 3, 0, 240, 47] LoadLo(Constant(1)) [1, 1, 1, 5, 3, 0, 240, 47]
# PC:30 [1, 1, 1, 5, 3, 0, 240, 48] LoadHi(Constant(0)) [1, 1, 1, 5, 3, 0, 240, 48]
# PC:31 [1, 1, 1, 5, 3, 0, 240, 49] Not(ACC) [254, 1, 1, 5, 3, 0, 240, 49]
# PC:32 [254, 1, 1, 5, 3, 0, 240, 50] StoreReg(B) [254, 254, 1, 5, 3, 0, 240, 50]
# PC:33 [254, 254, 1, 5, 3, 0, 240, 51] LoadLo(Constant(1)) [1, 254, 1, 5, 3, 0, 240, 51]
# PC:34 [1, 254, 1, 5, 3, 0, 240, 52] Add(B) [255, 254, 1, 5, 3, 0, 240, 52]
# PC:35 [255, 254, 1, 5, 3, 0, 240, 53] Add(C) [0, 254, 1, 5, 3, 1, 240, 53]
# PC:36 [0, 254, 1, 5, 3, 1, 240, 54] StoreReg(B) [0, 0, 1, 5, 3, 1, 240, 54]
# PC:37 [0, 0, 1, 5, 3, 1, 240, 55] LoadLo(Constant(1)) [1, 0, 1, 5, 3, 1, 240, 55]
# PC:38 [1, 0, 1, 5, 3, 1, 240, 56] Add(SP) [241, 0, 1, 5, 3, 0, 240, 56]
# PC:39 [241, 0, 1, 5, 3, 0, 240, 57] StoreReg(C) [241, 0, 241, 5, 3, 0, 240, 57]
# PC:3a [241, 0, 241, 5, 3, 0, 240, 58] LoadReg(B) [0, 0, 241, 5, 3, 0, 240, 58]
# PC:3b [0, 0, 241, 5, 3, 0, 240, 59] StoreMem(C) [0, 0, 241, 5, 3, 0, 240, 59]
# PC:3c [0, 0, 241, 5, 3, 0, 240, 60] LoadLo(Constant(1)) [1, 0, 241, 5, 3, 0, 240, 60]
# PC:3d [1, 0, 241, 5, 3, 0, 240, 61] Add(SP) [241, 0, 241, 5, 3, 0, 240, 61]
# PC:3e [241, 0, 241, 5, 3, 0, 240, 62] LoadMem(ACC) [0, 0, 241, 5, 3, 0, 240, 62]
# PC:3f [0, 0, 241, 5, 3, 0, 240, 63] StoreReg(C) [0, 0, 0, 5, 3, 0, 240, 63]
# PC:40 [0, 0, 0, 5, 3, 0, 240, 64] LoadLo(Constant(0)) [0, 0, 0, 5, 3, 0, 240, 64]
# PC:41 [0, 0, 0, 5, 3, 0, 240, 65] LoadHi(Constant(0)) [0, 0, 0, 5, 3, 0, 240, 65]
# PC:42 [0, 0, 0, 5, 3, 0, 240, 66] Xor(C) [0, 0, 0, 5, 3, 0, 240, 66]
# PC:43 [0, 0, 0, 5, 3, 0, 240, 67] Jnz(Constant(12)) [0, 0, 0, 5, 3, 0, 240, 67]
# PC:44 [0, 0, 0, 5, 3, 0, 240, 68] LoadLo(Constant(1)) [1, 0, 0, 5, 3, 0, 240, 68]
# PC:45 [1, 0, 0, 5, 3, 0, 240, 69] LoadHi(Constant(0)) [1, 0, 0, 5, 3, 0, 240, 69]
# PC:46 [1, 0, 0, 5, 3, 0, 240, 70] StoreReg(B) [1, 1, 0, 5, 3, 0, 240, 70]
# PC:47 [1, 1, 0, 5, 3, 0, 240, 71] LoadLo(Constant(2)) [2, 1, 0, 5, 3, 0, 240, 71]
# PC:48 [2, 1, 0, 5, 3, 0, 240, 72] Add(SP) [242, 1, 0, 5, 3, 0, 240, 72]
# PC:49 [242, 1, 0, 5, 3, 0, 240, 73] StoreReg(C) [242, 1, 242, 5, 3, 0, 240, 73]
# PC:4a [242, 1, 242, 5, 3, 0, 240, 74] LoadReg(B) [1, 1, 242, 5, 3, 0, 240, 74]
# PC:4b [1, 1, 242, 5, 3, 0, 240, 75] StoreMem(C) [1, 1, 242, 5, 3, 0, 240, 75]
# PC:4c [1, 1, 242, 5, 3, 0, 240, 76] LoadLo(Constant(11)) [251, 1, 242, 5, 3, 0, 240, 76]
# PC:4d [251, 1, 242, 5, 3, 0, 240, 77] LoadHi(Constant(11)) [187, 1, 242, 5, 3, 0, 240, 77]
# PC:4e [187, 1, 242, 5, 3, 0, 240, 78] StoreReg(PC) [187, 1, 242, 5, 3, 0, 240, 187]
# PC:bb [187, 1, 242, 5, 3, 0, 240, 187] LoadMem(SP) [100, 1, 242, 5, 3, 0, 240, 187]
# PC:bc [100, 1, 242, 5, 3, 0, 240, 188] StoreReg(PC) [100, 1, 242, 5, 3, 0, 240, 100]
# PC:64 [100, 1, 242, 5, 3, 0, 240, 100] LoadLo(Constant(1)) [1, 1, 242, 5, 3, 0, 240, 100]
# PC:65 [1, 1, 242, 5, 3, 0, 240, 101] Add(SP) [241, 1, 242, 5, 3, 0, 240, 101]
# PC:66 [241, 1, 242, 5, 3, 0, 240, 102] StoreReg(SP) [241, 1, 242, 5, 3, 0, 241, 102]
# PC:67 [241, 1, 242, 5, 3, 0, 241, 103] LoadLo(Constant(1)) [1, 1, 242, 5, 3, 0, 241, 103]
# PC:68 [1, 1, 242, 5, 3, 0, 241, 104] Add(SP) [242, 1, 242, 5, 3, 0, 241, 104]
# PC:69 [242, 1, 242, 5, 3, 0, 241, 105] StoreReg(SP) [242, 1, 242, 5, 3, 0, 242, 105]
# PC:6a [242, 1, 242, 5, 3, 0, 242, 106] LoadMem(SP) [1, 1, 242, 5, 3, 0, 242, 106]
# PC:6b [1, 1, 242, 5, 3, 0, 242, 107] StoreReg(B) [1, 1, 242, 5, 3, 0, 242, 107]
# PC:6c [1, 1, 242, 5, 3, 0, 242, 108] LoadLo(Constant(1)) [1, 1, 242, 5, 3, 0, 242, 108]
# PC:6d [1, 1, 242, 5, 3, 0, 242, 109] Add(SP) [243, 1, 242, 5, 3, 0, 242, 109]
# PC:6e [243, 1, 242, 5, 3, 0, 242, 110] StoreReg(SP) [243, 1, 242, 5, 3, 0, 243, 110]
# PC:6f [243, 1, 242, 5, 3, 0, 243, 111] LoadReg(B) [1, 1, 242, 5, 3, 0, 243, 111]
# PC:70 [1, 1, 242, 5, 3, 0, 243, 112] StoreReg(D) [1, 1, 242, 1, 3, 0, 243, 112]
# PC:71 [1, 1, 242, 1, 3, 0, 243, 113] LoadLo(Constant(1)) [1, 1, 242, 1, 3, 0, 243, 113]
# PC:72 [1, 1, 242, 1, 3, 0, 243, 114] Add(SP) [244, 1, 242, 1, 3, 0, 243, 114]
# PC:73 [244, 1, 242, 1, 3, 0, 243, 115] LoadMem(ACC) [1, 1, 242, 1, 3, 0, 243, 115]
# PC:74 [1, 1, 242, 1, 3, 0, 243, 116] StoreReg(C) [1, 1, 1, 1, 3, 0, 243, 116]
# PC:75 [1, 1, 1, 1, 3, 0, 243, 117] LoadLo(Constant(1)) [1, 1, 1, 1, 3, 0, 243, 117]
# PC:76 [1, 1, 1, 1, 3, 0, 243, 118] LoadHi(Constant(0)) [1, 1, 1, 1, 3, 0, 243, 118]
# PC:77 [1, 1, 1, 1, 3, 0, 243, 119] Not(ACC) [254, 1, 1, 1, 3, 0, 243, 119]
# PC:78 [254, 1, 1, 1, 3, 0, 243, 120] StoreReg(B) [254, 254, 1, 1, 3, 0, 243, 120]
# PC:79 [254, 254, 1, 1, 3, 0, 243, 121] LoadLo(Constant(1)) [1, 254, 1, 1, 3, 0, 243, 121]
# PC:7a [1, 254, 1, 1, 3, 0, 243, 122] Add(B) [255, 254, 1, 1, 3, 0, 243, 122]
# PC:7b [255, 254, 1, 1, 3, 0, 243, 123] Add(C) [0, 254, 1, 1, 3, 1, 243, 123]
# PC:7c [0, 254, 1, 1, 3, 1, 243, 124] StoreReg(B) [0, 0, 1, 1, 3, 1, 243, 124]
# PC:7d [0, 0, 1, 1, 3, 1, 243, 125] LoadLo(Constant(1)) [1, 0, 1, 1, 3, 1, 243, 125]
# PC:7e [1, 0, 1, 1, 3, 1, 243, 126] Add(SP) [244, 0, 1, 1, 3, 0, 243, 126]
# PC:7f [244, 0, 1, 1, 3, 0, 243, 127] StoreReg(C) [244, 0, 244, 1, 3, 0, 243, 127]
# PC:80 [244, 0, 244, 1, 3, 0, 243, 128] LoadReg(B) [0, 0, 244, 1, 3, 0, 243, 128]
# PC:81 [0, 0, 244, 1, 3, 0, 243, 129] StoreMem(C) [0, 0, 244, 1, 3, 0, 243, 129]
# PC:82 [0, 0, 244, 1, 3, 0, 243, 130] LoadLo(Constant(15)) [255, 0, 244, 1, 3, 0, 243, 130]
# PC:83 [255, 0, 244, 1, 3, 0, 243, 131] Add(SP) [242, 0, 244, 1, 3, 1, 243, 131]
# PC:84 [242, 0, 244, 1, 3, 1, 243, 132] StoreReg(SP) [242, 0, 244, 1, 3, 1, 242, 132]
# PC:85 [242, 0, 244, 1, 3, 1, 242, 133] LoadLo(Constant(15)) [255, 0, 244, 1, 3, 1, 242, 133]
# PC:86 [255, 0, 244, 1, 3, 1, 242, 134] Add(SP) [241, 0, 244, 1, 3, 1, 242, 134]
# PC:87 [241, 0, 244, 1, 3, 1, 242, 135] StoreReg(SP) [241, 0, 244, 1, 3, 1, 241, 135]
# PC:88 [241, 0, 244, 1, 3, 1, 241, 136] LoadReg(D) [1, 0, 244, 1, 3, 1, 241, 136]
# PC:89 [1, 0, 244, 1, 3, 1, 241, 137] StoreMem(SP) [1, 0, 244, 1, 3, 1, 241, 137]
# PC:8a [1, 0, 244, 1, 3, 1, 241, 138] LoadLo(Constant(3)) [3, 0, 244, 1, 3, 1, 241, 138]
# PC:8b [3, 0, 244, 1, 3, 1, 241, 139] Add(SP) [244, 0, 244, 1, 3, 0, 241, 139]
# PC:8c [244, 0, 244, 1, 3, 0, 241, 140] LoadMem(ACC) [0, 0, 244, 1, 3, 0, 241, 140]
# PC:8d [0, 0, 244, 1, 3, 0, 241, 141] StoreReg(B) [0, 0, 244, 1, 3, 0, 241, 141]
# PC:8e [0, 0, 244, 1, 3, 0, 241, 142] LoadLo(Constant(15)) [255, 0, 244, 1, 3, 0, 241, 142]
# PC:8f [255, 0, 244, 1, 3, 0, 241, 143] Add(SP) [240, 0, 244, 1, 3, 1, 241, 143]
# PC:90 [240, 0, 244, 1, 3, 1, 241, 144] StoreReg(SP) [240, 0, 244, 1, 3, 1, 240, 144]
# PC:91 [240, 0, 244, 1, 3, 1, 240, 145] LoadReg(B) [0, 0, 244, 1, 3, 1, 240, 145]
# PC:92 [0, 0, 244, 1, 3, 1, 240, 146] StoreMem(SP) [0, 0, 244, 1, 3, 1, 240, 146]
# PC:93 [0, 0, 244, 1, 3, 1, 240, 147] LoadLo(Constant(15)) [255, 0, 244, 1, 3, 1, 240, 147]
# PC:94 [255, 0, 244, 1, 3, 1, 240, 148] Add(SP) [239, 0, 244, 1, 3, 1, 240, 148]
# PC:95 [239, 0, 244, 1, 3, 1, 240, 149] StoreReg(SP) [239, 0, 244, 1, 3, 1, 239, 149]
# PC:96 [239, 0, 244, 1, 3, 1, 239, 150] LoadLo(Constant(5)) [5, 0, 244, 1, 3, 1, 239, 150]
# PC:97 [5, 0, 244, 1, 3, 1, 239, 151] Add(PC) [156, 0, 244, 1, 3, 0, 239, 151]
# PC:98 [156, 0, 244, 1, 3, 0, 239, 152] StoreMem(SP) [156, 0, 244, 1, 3, 0, 239, 152]
# PC:99 [156, 0, 244, 1, 3, 0, 239, 153] LoadLo(Constant(8)) [248, 0, 244, 1, 3, 0, 239, 153]
# PC:9a [248, 0, 244, 1, 3, 0, 239, 154] LoadHi(Constant(1)) [24, 0, 244, 1, 3, 0, 239, 154]
# PC:9b [24, 0, 244, 1, 3, 0, 239, 155] StoreReg(PC) [24, 0, 244, 1, 3, 0, 239, 24]
# PC:18 [24, 0, 244, 1, 3, 0, 239, 24] LoadLo(Constant(1)) [1, 0, 244, 1, 3, 0, 239, 24]
# PC:19 [1, 0, 244, 1, 3, 0, 239, 25] Add(SP) [240, 0, 244, 1, 3, 0, 239, 25]
# PC:1a [240, 0, 244, 1, 3, 0, 239, 26] LoadMem(ACC) [0, 0, 244, 1, 3, 0, 239, 26]
# PC:1b [0, 0, 244, 1, 3, 0, 239, 27] StoreReg(C) [0, 0, 0, 1, 3, 0, 239, 27]
# PC:1c [0, 0, 0, 1, 3, 0, 239, 28] LoadLo(Constant(0)) [0, 0, 0, 1, 3, 0, 239, 28]
# PC:1d [0, 0, 0, 1, 3, 0, 239, 29] LoadHi(Constant(0)) [0, 0, 0, 1, 3, 0, 239, 29]
# PC:1e [0, 0, 0, 1, 3, 0, 239, 30] Xor(C) [0, 0, 0, 1, 3, 0, 239, 30]
# PC:1f [0, 0, 0, 1, 3, 0, 239, 31] Jnz(Constant(12)) [0, 0, 0, 1, 3, 0, 239, 31]
# PC:20 [0, 0, 0, 1, 3, 0, 239, 32] LoadLo(Constant(1)) [1, 0, 0, 1, 3, 0, 239, 32]
# PC:21 [1, 0, 0, 1, 3, 0, 239, 33] LoadHi(Constant(0)) [1, 0, 0, 1, 3, 0, 239, 33]
# PC:22 [1, 0, 0, 1, 3, 0, 239, 34] StoreReg(B) [1, 1, 0, 1, 3, 0, 239, 34]
# PC:23 [1, 1, 0, 1, 3, 0, 239, 35] LoadLo(Constant(2)) [2, 1, 0, 1, 3, 0, 239, 35]
# PC:24 [2, 1, 0, 1, 3, 0, 239, 36] Add(SP) [241, 1, 0, 1, 3, 0, 239, 36]
# PC:25 [241, 1, 0, 1, 3, 0, 239, 37] StoreReg(C) [241, 1, 241, 1, 3, 0, 239, 37]
# PC:26 [241, 1, 241, 1, 3, 0, 239, 38] LoadReg(B) [1, 1, 241, 1, 3, 0, 239, 38]
# PC:27 [1, 1, 241, 1, 3, 0, 239, 39] StoreMem(C) [1, 1, 241, 1, 3, 0, 239, 39]
# PC:28 [1, 1, 241, 1, 3, 0, 239, 40] LoadLo(Constant(11)) [251, 1, 241, 1, 3, 0, 239, 40]
# PC:29 [251, 1, 241, 1, 3, 0, 239, 41] LoadHi(Constant(11)) [187, 1, 241, 1, 3, 0, 239, 41]
# PC:2a [187, 1, 241, 1, 3, 0, 239, 42] StoreReg(PC) [187, 1, 241, 1, 3, 0, 239, 187]
# PC:bb [187, 1, 241, 1, 3, 0, 239, 187] LoadMem(SP) [156, 1, 241, 1, 3, 0, 239, 187]
# PC:bc [156, 1, 241, 1, 3, 0, 239, 188] StoreReg(PC) [156, 1, 241, 1, 3, 0, 239, 156]
# PC:9c [156, 1, 241, 1, 3, 0, 239, 156] LoadLo(Constant(1)) [1, 1, 241, 1, 3, 0, 239, 156]
# PC:9d [1, 1, 241, 1, 3, 0, 239, 157] Add(SP) [240, 1, 241, 1, 3, 0, 239, 157]
# PC:9e [240, 1, 241, 1, 3, 0, 239, 158] StoreReg(SP) [240, 1, 241, 1, 3, 0, 240, 158]
# PC:9f [240, 1, 241, 1, 3, 0, 240, 159] LoadLo(Constant(1)) [1, 1, 241, 1, 3, 0, 240, 159]
# PC:a0 [1, 1, 241, 1, 3, 0, 240, 160] Add(SP) [241, 1, 241, 1, 3, 0, 240, 160]
# PC:a1 [241, 1, 241, 1, 3, 0, 240, 161] StoreReg(SP) [241, 1, 241, 1, 3, 0, 241, 161]
# PC:a2 [241, 1, 241, 1, 3, 0, 241, 162] LoadMem(SP) [1, 1, 241, 1, 3, 0, 241, 162]
# PC:a3 [1, 1, 241, 1, 3, 0, 241, 163] StoreReg(D) [1, 1, 241, 1, 3, 0, 241, 163]
# PC:a4 [1, 1, 241, 1, 3, 0, 241, 164] LoadLo(Constant(1)) [1, 1, 241, 1, 3, 0, 241, 164]
# PC:a5 [1, 1, 241, 1, 3, 0, 241, 165] Add(SP) [242, 1, 241, 1, 3, 0, 241, 165]
# PC:a6 [242, 1, 241, 1, 3, 0, 241, 166] StoreReg(SP) [242, 1, 241, 1, 3, 0, 242, 166]
# PC:a7 [242, 1, 241, 1, 3, 0, 242, 167] LoadMem(SP) [1, 1, 241, 1, 3, 0, 242, 167]
# PC:a8 [1, 1, 241, 1, 3, 0, 242, 168] StoreReg(B) [1, 1, 241, 1, 3, 0, 242, 168]
# PC:a9 [1, 1, 241, 1, 3, 0, 242, 169] LoadLo(Constant(1)) [1, 1, 241, 1, 3, 0, 242, 169]
# PC:aa [1, 1, 241, 1, 3, 0, 242, 170] Add(SP) [243, 1, 241, 1, 3, 0, 242, 170]
# PC:ab [243, 1, 241, 1, 3, 0, 242, 171] StoreReg(SP) [243, 1, 241, 1, 3, 0, 243, 171]
# PC:ac [243, 1, 241, 1, 3, 0, 243, 172] LoadReg(B) [1, 1, 241, 1, 3, 0, 243, 172]
# PC:ad [1, 1, 241, 1, 3, 0, 243, 173] StoreReg(E) [1, 1, 241, 1, 1, 0, 243, 173]
# PC:ae [1, 1, 241, 1, 1, 0, 243, 174] LoadReg(D) [1, 1, 241, 1, 1, 0, 243, 174]
# PC:af [1, 1, 241, 1, 1, 0, 243, 175] StoreReg(C) [1, 1, 1, 1, 1, 0, 243, 175]
# PC:b0 [1, 1, 1, 1, 1, 0, 243, 176] LoadReg(E) [1, 1, 1, 1, 1, 0, 243, 176]
# PC:b1 [1, 1, 1, 1, 1, 0, 243, 177] Add(C) [2, 1, 1, 1, 1, 0, 243, 177]
# PC:b2 [2, 1, 1, 1, 1, 0, 243, 178] StoreReg(B) [2, 2, 1, 1, 1, 0, 243, 178]
# PC:b3 [2, 2, 1, 1, 1, 0, 243, 179] LoadLo(Constant(2)) [2, 2, 1, 1, 1, 0, 243, 179]
# PC:b4 [2, 2, 1, 1, 1, 0, 243, 180] Add(SP) [245, 2, 1, 1, 1, 0, 243, 180]
# PC:b5 [245, 2, 1, 1, 1, 0, 243, 181] StoreReg(C) [245, 2, 245, 1, 1, 0, 243, 181]
# PC:b6 [245, 2, 245, 1, 1, 0, 243, 182] LoadReg(B) [2, 2, 245, 1, 1, 0, 243, 182]
# PC:b7 [2, 2, 245, 1, 1, 0, 243, 183] StoreMem(C) [2, 2, 245, 1, 1, 0, 243, 183]
# PC:b8 [2, 2, 245, 1, 1, 0, 243, 184] LoadLo(Constant(11)) [251, 2, 245, 1, 1, 0, 243, 184]
# PC:b9 [251, 2, 245, 1, 1, 0, 243, 185] LoadHi(Constant(11)) [187, 2, 245, 1, 1, 0, 243, 185]
# PC:ba [187, 2, 245, 1, 1, 0, 243, 186] StoreReg(PC) [187, 2, 245, 1, 1, 0, 243, 187]
# PC:bb [187, 2, 245, 1, 1, 0, 243, 187] LoadMem(SP) [100, 2, 245, 1, 1, 0, 243, 187]
# PC:bc [100, 2, 245, 1, 1, 0, 243, 188] StoreReg(PC) [100, 2, 245, 1, 1, 0, 243, 100]
# PC:64 [100, 2, 245, 1, 1, 0, 243, 100] LoadLo(Constant(1)) [1, 2, 245, 1, 1, 0, 243, 100]
# PC:65 [1, 2, 245, 1, 1, 0, 243, 101] Add(SP) [244, 2, 245, 1, 1, 0, 243, 101]
# PC:66 [244, 2, 245, 1, 1, 0, 243, 102] StoreReg(SP) [244, 2, 245, 1, 1, 0, 244, 102]
# PC:67 [244, 2, 245, 1, 1, 0, 244, 103] LoadLo(Constant(1)) [1, 2, 245, 1, 1, 0, 244, 103]
# PC:68 [1, 2, 245, 1, 1, 0, 244, 104] Add(SP) [245, 2, 245, 1, 1, 0, 244, 104]
# PC:69 [245, 2, 245, 1, 1, 0, 244, 105] StoreReg(SP) [245, 2, 245, 1, 1, 0, 245, 105]
# PC:6a [245, 2, 245, 1, 1, 0, 245, 106] LoadMem(SP) [2, 2, 245, 1, 1, 0, 245, 106]
# PC:6b [2, 2, 245, 1, 1, 0, 245, 107] StoreReg(B) [2, 2, 245, 1, 1, 0, 245, 107]
# PC:6c [2, 2, 245, 1, 1, 0, 245, 108] LoadLo(Constant(1)) [1, 2, 245, 1, 1, 0, 245, 108]
# PC:6d [1, 2, 245, 1, 1, 0, 245, 109] Add(SP) [246, 2, 245, 1, 1, 0, 245, 109]
# PC:6e [246, 2, 245, 1, 1, 0, 245, 110] StoreReg(SP) [246, 2, 245, 1, 1, 0, 246, 110]
# PC:6f [246, 2, 245, 1, 1, 0, 246, 111] LoadReg(B) [2, 2, 245, 1, 1, 0, 246, 111]
# PC:70 [2, 2, 245, 1, 1, 0, 246, 112] StoreReg(D) [2, 2, 245, 2, 1, 0, 246, 112]
# PC:71 [2, 2, 245, 2, 1, 0, 246, 113] LoadLo(Constant(1)) [1, 2, 245, 2, 1, 0, 246, 113]
# PC:72 [1, 2, 245, 2, 1, 0, 246, 114] Add(SP) [247, 2, 245, 2, 1, 0, 246, 114]
# PC:73 [247, 2, 245, 2, 1, 0, 246, 115] LoadMem(ACC) [2, 2, 245, 2, 1, 0, 246, 115]
# PC:74 [2, 2, 245, 2, 1, 0, 246, 116] StoreReg(C) [2, 2, 2, 2, 1, 0, 246, 116]
# PC:75 [2, 2, 2, 2, 1, 0, 246, 117] LoadLo(Constant(1)) [1, 2, 2, 2, 1, 0, 246, 117]
# PC:76 [1, 2, 2, 2, 1, 0, 246, 118] LoadHi(Constant(0)) [1, 2, 2, 2, 1, 0, 246, 118]
# PC:77 [1, 2, 2, 2, 1, 0, 246, 119] Not(ACC) [254, 2, 2, 2, 1, 0, 246, 119]
# PC:78 [254, 2, 2, 2, 1, 0, 246, 120] StoreReg(B) [254, 254, 2, 2, 1, 0, 246, 120]
# PC:79 [254, 254, 2, 2, 1, 0, 246, 121] LoadLo(Constant(1)) [1, 254, 2, 2, 1, 0, 246, 121]
# PC:7a [1, 254, 2, 2, 1, 0, 246, 122] Add(B) [255, 254, 2, 2, 1, 0, 246, 122]
# PC:7b [255, 254, 2, 2, 1, 0, 246, 123] Add(C) [1, 254, 2, 2, 1, 1, 246, 123]
# PC:7c [1, 254, 2, 2, 1, 1, 246, 124] StoreReg(B) [1, 1, 2, 2, 1, 1, 246, 124]
# PC:7d [1, 1, 2, 2, 1, 1, 246, 125] LoadLo(Constant(1)) [1, 1, 2, 2, 1, 1, 246, 125]
# PC:7e [1, 1, 2, 2, 1, 1, 246, 126] Add(SP) [247, 1, 2, 2, 1, 0, 246, 126]
# PC:7f [247, 1, 2, 2, 1, 0, 246, 127] StoreReg(C) [247, 1, 247, 2, 1, 0, 246, 127]
# PC:80 [247, 1, 247, 2, 1, 0, 246, 128] LoadReg(B) [1, 1, 247, 2, 1, 0, 246, 128]
# PC:81 [1, 1, 247, 2, 1, 0, 246, 129] StoreMem(C) [1, 1, 247, 2, 1, 0, 246, 129]
# PC:82 [1, 1, 247, 2, 1, 0, 246, 130] LoadLo(Constant(15)) [255, 1, 247, 2, 1, 0, 246, 130]
# PC:83 [255, 1, 247, 2, 1, 0, 246, 131] Add(SP) [245, 1, 247, 2, 1, 1, 246, 131]
# PC:84 [245, 1, 247, 2, 1, 1, 246, 132] StoreReg(SP) [245, 1, 247, 2, 1, 1, 245, 132]
# PC:85 [245, 1, 247, 2, 1, 1, 245, 133] LoadLo(Constant(15)) [255, 1, 247, 2, 1, 1, 245, 133]
# PC:86 [255, 1, 247, 2, 1, 1, 245, 134] Add(SP) [244, 1, 247, 2, 1, 1, 245, 134]
# PC:87 [244, 1, 247, 2, 1, 1, 245, 135] StoreReg(SP) [244, 1, 247, 2, 1, 1, 244, 135]
# PC:88 [244, 1, 247, 2, 1, 1, 244, 136] LoadReg(D) [2, 1, 247, 2, 1, 1, 244, 136]
# PC:89 [2, 1, 247, 2, 1, 1, 244, 137] StoreMem(SP) [2, 1, 247, 2, 1, 1, 244, 137]
# PC:8a [2, 1, 247, 2, 1, 1, 244, 138] LoadLo(Constant(3)) [3, 1, 247, 2, 1, 1, 244, 138]
# PC:8b [3, 1, 247, 2, 1, 1, 244, 139] Add(SP) [247, 1, 247, 2, 1, 0, 244, 139]
# PC:8c [247, 1, 247, 2, 1, 0, 244, 140] LoadMem(ACC) [1, 1, 247, 2, 1, 0, 244, 140]
# PC:8d [1, 1, 247, 2, 1, 0, 244, 141] StoreReg(B) [1, 1, 247, 2, 1, 0, 244, 141]
# PC:8e [1, 1, 247, 2, 1, 0, 244, 142] LoadLo(Constant(15)) [255, 1, 247, 2, 1, 0, 244, 142]
# PC:8f [255, 1, 247, 2, 1, 0, 244, 143] Add(SP) [243, 1, 247, 2, 1, 1, 244, 143]
# PC:90 [243, 1, 247, 2, 1, 1, 244, 144] StoreReg(SP) [243, 1, 247, 2, 1, 1, 243, 144]
# PC:91 [243, 1, 247, 2, 1, 1, 243, 145] LoadReg(B) [1, 1, 247, 2, 1, 1, 243, 145]
# PC:92 [1, 1, 247, 2, 1, 1, 243, 146] StoreMem(SP) [1, 1, 247, 2, 1, 1, 243, 146]
# PC:93 [1, 1, 247, 2, 1, 1, 243, 147] LoadLo(Constant(15)) [255, 1, 247, 2, 1, 1, 243, 147]
# PC:94 [255, 1, 247, 2, 1, 1, 243, 148] Add(SP) [242, 1, 247, 2, 1, 1, 243, 148]
# PC:95 [242, 1, 247, 2, 1, 1, 243, 149] StoreReg(SP) [242, 1, 247, 2, 1, 1, 242, 149]
# PC:96 [242, 1, 247, 2, 1, 1, 242, 150] LoadLo(Constant(5)) [5, 1, 247, 2, 1, 1, 242, 150]
# PC:97 [5, 1, 247, 2, 1, 1, 242, 151] Add(PC) [156, 1, 247, 2, 1, 0, 242, 151]
# PC:98 [156, 1, 247, 2, 1, 0, 242, 152] StoreMem(SP) [156, 1, 247, 2, 1, 0, 242, 152]
# PC:99 [156, 1, 247, 2, 1, 0, 242, 153] LoadLo(Constant(8)) [248, 1, 247, 2, 1, 0, 242, 153]
# PC:9a [248, 1, 247, 2, 1, 0, 242, 154] LoadHi(Constant(1)) [24, 1, 247, 2, 1, 0, 242, 154]
# PC:9b [24, 1, 247, 2, 1, 0, 242, 155] StoreReg(PC) [24, 1, 247, 2, 1, 0, 242, 24]
# PC:18 [24, 1, 247, 2, 1, 0, 242, 24] LoadLo(Constant(1)) [1, 1, 247, 2, 1, 0, 242, 24]
# PC:19 [1, 1, 247, 2, 1, 0, 242, 25] Add(SP) [243, 1, 247, 2, 1, 0, 242, 25]
# PC:1a [243, 1, 247, 2, 1, 0, 242, 26] LoadMem(ACC) [1, 1, 247, 2, 1, 0, 242, 26]
# PC:1b [1, 1, 247, 2, 1, 0, 242, 27] StoreReg(C) [1, 1, 1, 2, 1, 0, 242, 27]
# PC:1c [1, 1, 1, 2, 1, 0, 242, 28] LoadLo(Constant(0)) [0, 1, 1, 2, 1, 0, 242, 28]
# PC:1d [0, 1, 1, 2, 1, 0, 242, 29] LoadHi(Constant(0)) [0, 1, 1, 2, 1, 0, 242, 29]
# PC:1e [0, 1, 1, 2, 1, 0, 242, 30] Xor(C) [1, 1, 1, 2, 1, 0, 242, 30]
# PC:1f [1, 1, 1, 2, 1, 0, 242, 31] Jnz(Constant(12)) [1, 1, 1, 2, 1, 0, 242, 43]
# PC:2b [1, 1, 1, 2, 1, 0, 242, 43] LoadLo(Constant(1)) [1, 1, 1, 2, 1, 0, 242, 43]
# PC:2c [1, 1, 1, 2, 1, 0, 242, 44] Add(SP) [243, 1, 1, 2, 1, 0, 242, 44]
# PC:2d [243, 1, 1, 2, 1, 0, 242, 45] LoadMem(ACC) [1, 1, 1, 2, 1, 0, 242, 45]
# PC:2e [1, 1, 1, 2, 1, 0, 242, 46] StoreReg(C) [1, 1, 1, 2, 1, 0, 242, 46]
# PC:2f [1, 1, 1, 2, 1, 0, 242, 47] LoadLo(Constant(1)) [1, 1, 1, 2, 1, 0, 242, 47]
# PC:30 [1, 1, 1, 2, 1, 0, 242, 48] LoadHi(Constant(0)) [1, 1, 1, 2, 1, 0, 242, 48]
# PC:31 [1, 1, 1, 2, 1, 0, 242, 49] Not(ACC) [254, 1, 1, 2, 1, 0, 242, 49]
# PC:32 [254, 1, 1, 2, 1, 0, 242, 50] StoreReg(B) [254, 254, 1, 2, 1, 0, 242, 50]
# PC:33 [254, 254, 1, 2, 1, 0, 242, 51] LoadLo(Constant(1)) [1, 254, 1, 2, 1, 0, 242, 51]
# PC:34 [1, 254, 1, 2, 1, 0, 242, 52] Add(B) [255, 254, 1, 2, 1, 0, 242, 52]
# PC:35 [255, 254, 1, 2, 1, 0, 242, 53] Add(C) [0, 254, 1, 2, 1, 1, 242, 53]
# PC:36 [0, 254, 1, 2, 1, 1, 242, 54] StoreReg(B) [0, 0, 1, 2, 1, 1, 242, 54]
# PC:37 [0, 0, 1, 2, 1, 1, 242, 55] LoadLo(Constant(1)) [1, 0, 1, 2, 1, 1, 242, 55]
# PC:38 [1, 0, 1, 2, 1, 1, 242, 56] Add(SP) [243, 0, 1, 2, 1, 0, 242, 56]
# PC:39 [243, 0, 1, 2, 1, 0, 242, 57] StoreReg(C) [243, 0, 243, 2, 1, 0, 242, 57]
# PC:3a [243, 0, 243, 2, 1, 0, 242, 58] LoadReg(B) [0, 0, 243, 2, 1, 0, 242, 58]
# PC:3b [0, 0, 243, 2, 1, 0, 242, 59] StoreMem(C) [0, 0, 243, 2, 1, 0, 242, 59]
# PC:3c [0, 0, 243, 2, 1, 0, 242, 60] LoadLo(Constant(1)) [1, 0, 243, 2, 1, 0, 242, 60]
# PC:3d [1, 0, 243, 2, 1, 0, 242, 61] Add(SP) [243, 0, 243, 2, 1, 0, 242, 61]
# PC:3e [243, 0, 243, 2, 1, 0, 242, 62] LoadMem(ACC) [0, 0, 243, 2, 1, 0, 242, 62]
# PC:3f [0, 0, 243, 2, 1, 0, 242, 63] StoreReg(C) [0, 0, 0, 2, 1, 0, 242, 63]
# PC:40 [0, 0, 0, 2, 1, 0, 242, 64] LoadLo(Constant(0)) [0, 0, 0, 2, 1, 0, 242, 64]
# PC:41 [0, 0, 0, 2, 1, 0, 242, 65] LoadHi(Constant(0)) [0, 0, 0, 2, 1, 0, 242, 65]
# PC:42 [0, 0, 0, 2, 1, 0, 242, 66] Xor(C) [0, 0, 0, 2, 1, 0, 242, 66]
# PC:43 [0, 0, 0, 2, 1, 0, 242, 67] Jnz(Constant(12)) [0, 0, 0, 2, 1, 0, 242, 67]
# PC:44 [0, 0, 0, 2, 1, 0, 242, 68] LoadLo(Constant(1)) [1, 0, 0, 2, 1, 0, 242, 68]
# PC:45 [1, 0, 0, 2, 1, 0, 242, 69] LoadHi(Constant(0)) [1, 0, 0, 2, 1, 0, 242, 69]
# PC:46 [1, 0, 0, 2, 1, 0, 242, 70] StoreReg(B) [1, 1, 0, 2, 1, 0, 242, 70]
# PC:47 [1, 1, 0, 2, 1, 0, 242, 71] LoadLo(Constant(2)) [2, 1, 0, 2, 1, 0, 242, 71]
# PC:48 [2, 1, 0, 2, 1, 0, 242, 72] Add(SP) [244, 1, 0, 2, 1, 0, 242, 72]
# PC:49 [244, 1, 0, 2, 1, 0, 242, 73] StoreReg(C) [244, 1, 244, 2, 1, 0, 242, 73]
# PC:4a [244, 1, 244, 2, 1, 0, 242, 74] LoadReg(B) [1, 1, 244, 2, 1, 0, 242, 74]
# PC:4b [1, 1, 244, 2, 1, 0, 242, 75] StoreMem(C) [1, 1, 244, 2, 1, 0, 242, 75]
# PC:4c [1, 1, 244, 2, 1, 0, 242, 76] LoadLo(Constant(11)) [251, 1, 244, 2, 1, 0, 242, 76]
# PC:4d [251, 1, 244, 2, 1, 0, 242, 77] LoadHi(Constant(11)) [187, 1, 244, 2, 1, 0, 242, 77]
# PC:4e [187, 1, 244, 2, 1, 0, 242, 78] StoreReg(PC) [187, 1, 244, 2, 1, 0, 242, 187]
# PC:bb [187, 1, 244, 2, 1, 0, 242, 187] LoadMem(SP) [156, 1, 244, 2, 1, 0, 242, 187]
# PC:bc [156, 1, 244, 2, 1, 0, 242, 188] StoreReg(PC) [156, 1, 244, 2, 1, 0, 242, 156]
# PC:9c [156, 1, 244, 2, 1, 0, 242, 156] LoadLo(Constant(1)) [1, 1, 244, 2, 1, 0, 242, 156]
# PC:9d [1, 1, 244, 2, 1, 0, 242, 157] Add(SP) [243, 1, 244, 2, 1, 0, 242, 157]
# PC:9e [243, 1, 244, 2, 1, 0, 242, 158] StoreReg(SP) [243, 1, 244, 2, 1, 0, 243, 158]
# PC:9f [243, 1, 244, 2, 1, 0, 243, 159] LoadLo(Constant(1)) [1, 1, 244, 2, 1, 0, 243, 159]
# PC:a0 [1, 1, 244, 2, 1, 0, 243, 160] Add(SP) [244, 1, 244, 2, 1, 0, 243, 160]
# PC:a1 [244, 1, 244, 2, 1, 0, 243, 161] StoreReg(SP) [244, 1, 244, 2, 1, 0, 244, 161]
# PC:a2 [244, 1, 244, 2, 1, 0, 244, 162] LoadMem(SP) [1, 1, 244, 2, 1, 0, 244, 162]
# PC:a3 [1, 1, 244, 2, 1, 0, 244, 163] StoreReg(D) [1, 1, 244, 1, 1, 0, 244, 163]
# PC:a4 [1, 1, 244, 1, 1, 0, 244, 164] LoadLo(Constant(1)) [1, 1, 244, 1, 1, 0, 244, 164]
# PC:a5 [1, 1, 244, 1, 1, 0, 244, 165] Add(SP) [245, 1, 244, 1, 1, 0, 244, 165]
# PC:a6 [245, 1, 244, 1, 1, 0, 244, 166] StoreReg(SP) [245, 1, 244, 1, 1, 0, 245, 166]
# PC:a7 [245, 1, 244, 1, 1, 0, 245, 167] LoadMem(SP) [2, 1, 244, 1, 1, 0, 245, 167]
# PC:a8 [2, 1, 244, 1, 1, 0, 245, 168] StoreReg(B) [2, 2, 244, 1, 1, 0, 245, 168]
# PC:a9 [2, 2, 244, 1, 1, 0, 245, 169] LoadLo(Constant(1)) [1, 2, 244, 1, 1, 0, 245, 169]
# PC:aa [1, 2, 244, 1, 1, 0, 245, 170] Add(SP) [246, 2, 244, 1, 1, 0, 245, 170]
# PC:ab [246, 2, 244, 1, 1, 0, 245, 171] StoreReg(SP) [246, 2, 244, 1, 1, 0, 246, 171]
# PC:ac [246, 2, 244, 1, 1, 0, 246, 172] LoadReg(B) [2, 2, 244, 1, 1, 0, 246, 172]
# PC:ad [2, 2, 244, 1, 1, 0, 246, 173] StoreReg(E) [2, 2, 244, 1, 2, 0, 246, 173]
# PC:ae [2, 2, 244, 1, 2, 0, 246, 174] LoadReg(D) [1, 2, 244, 1, 2, 0, 246, 174]
# PC:af [1, 2, 244, 1, 2, 0, 246, 175] StoreReg(C) [1, 2, 1, 1, 2, 0, 246, 175]
# PC:b0 [1, 2, 1, 1, 2, 0, 246, 176] LoadReg(E) [2, 2, 1, 1, 2, 0, 246, 176]
# PC:b1 [2, 2, 1, 1, 2, 0, 246, 177] Add(C) [3, 2, 1, 1, 2, 0, 246, 177]
# PC:b2 [3, 2, 1, 1, 2, 0, 246, 178] StoreReg(B) [3, 3, 1, 1, 2, 0, 246, 178]
# PC:b3 [3, 3, 1, 1, 2, 0, 246, 179] LoadLo(Constant(2)) [2, 3, 1, 1, 2, 0, 246, 179]
# PC:b4 [2, 3, 1, 1, 2, 0, 246, 180] Add(SP) [248, 3, 1, 1, 2, 0, 246, 180]
# PC:b5 [248, 3, 1, 1, 2, 0, 246, 181] StoreReg(C) [248, 3, 248, 1, 2, 0, 246, 181]
# PC:b6 [248, 3, 248, 1, 2, 0, 246, 182] LoadReg(B) [3, 3, 248, 1, 2, 0, 246, 182]
# PC:b7 [3, 3, 248, 1, 2, 0, 246, 183] StoreMem(C) [3, 3, 248, 1, 2, 0, 246, 183]
# PC:b8 [3, 3, 248, 1, 2, 0, 246, 184] LoadLo(Constant(11)) [251, 3, 248, 1, 2, 0, 246, 184]
# PC:b9 [251, 3, 248, 1, 2, 0, 246, 185] LoadHi(Constant(11)) [187, 3, 248, 1, 2, 0, 246, 185]
# PC:ba [187, 3, 248, 1, 2, 0, 246, 186] StoreReg(PC) [187, 3, 248, 1, 2, 0, 246, 187]
# PC:bb [187, 3, 248, 1, 2, 0, 246, 187] LoadMem(SP) [156, 3, 248, 1, 2, 0, 246, 187]
# PC:bc [156, 3, 248, 1, 2, 0, 246, 188] StoreReg(PC) [156, 3, 248, 1, 2, 0, 246, 156]
# PC:9c [156, 3, 248, 1, 2, 0, 246, 156] LoadLo(Constant(1)) [1, 3, 248, 1, 2, 0, 246, 156]
# PC:9d [1, 3, 248, 1, 2, 0, 246, 157] Add(SP) [247, 3, 248, 1, 2, 0, 246, 157]
# PC:9e [247, 3, 248, 1, 2, 0, 246, 158] StoreReg(SP) [247, 3, 248, 1, 2, 0, 247, 158]
# PC:9f [247, 3, 248, 1, 2, 0, 247, 159] LoadLo(Constant(1)) [1, 3, 248, 1, 2, 0, 247, 159]
# PC:a0 [1, 3, 248, 1, 2, 0, 247, 160] Add(SP) [248, 3, 248, 1, 2, 0, 247, 160]
# PC:a1 [248, 3, 248, 1, 2, 0, 247, 161] StoreReg(SP) [248, 3, 248, 1, 2, 0, 248, 161]
# PC:a2 [248, 3, 248, 1, 2, 0, 248, 162] LoadMem(SP) [3, 3, 248, 1, 2, 0, 248, 162]
# PC:a3 [3, 3, 248, 1, 2, 0, 248, 163] StoreReg(D) [3, 3, 248, 3, 2, 0, 248, 163]
# PC:a4 [3, 3, 248, 3, 2, 0, 248, 164] LoadLo(Constant(1)) [1, 3, 248, 3, 2, 0, 248, 164]
# PC:a5 [1, 3, 248, 3, 2, 0, 248, 165] Add(SP) [249, 3, 248, 3, 2, 0, 248, 165]
# PC:a6 [249, 3, 248, 3, 2, 0, 248, 166] StoreReg(SP) [249, 3, 248, 3, 2, 0, 249, 166]
# PC:a7 [249, 3, 248, 3, 2, 0, 249, 167] LoadMem(SP) [5, 3, 248, 3, 2, 0, 249, 167]
# PC:a8 [5, 3, 248, 3, 2, 0, 249, 168] StoreReg(B) [5, 5, 248, 3, 2, 0, 249, 168]
# PC:a9 [5, 5, 248, 3, 2, 0, 249, 169] LoadLo(Constant(1)) [1, 5, 248, 3, 2, 0, 249, 169]
# PC:aa [1, 5, 248, 3, 2, 0, 249, 170] Add(SP) [250, 5, 248, 3, 2, 0, 249, 170]
# PC:ab [250, 5, 248, 3, 2, 0, 249, 171] StoreReg(SP) [250, 5, 248, 3, 2, 0, 250, 171]
# PC:ac [250, 5, 248, 3, 2, 0, 250, 172] LoadReg(B) [5, 5, 248, 3, 2, 0, 250, 172]
# PC:ad [5, 5, 248, 3, 2, 0, 250, 173] StoreReg(E) [5, 5, 248, 3, 5, 0, 250, 173]
# PC:ae [5, 5, 248, 3, 5, 0, 250, 174] LoadReg(D) [3, 5, 248, 3, 5, 0, 250, 174]
# PC:af [3, 5, 248, 3, 5, 0, 250, 175] StoreReg(C) [3, 5, 3, 3, 5, 0, 250, 175]
# PC:b0 [3, 5, 3, 3, 5, 0, 250, 176] LoadReg(E) [5, 5, 3, 3, 5, 0, 250, 176]
# PC:b1 [5, 5, 3, 3, 5, 0, 250, 177] Add(C) [8, 5, 3, 3, 5, 0, 250, 177]
# PC:b2 [8, 5, 3, 3, 5, 0, 250, 178] StoreReg(B) [8, 8, 3, 3, 5, 0, 250, 178]
# PC:b3 [8, 8, 3, 3, 5, 0, 250, 179] LoadLo(Constant(2)) [2, 8, 3, 3, 5, 0, 250, 179]
# PC:b4 [2, 8, 3, 3, 5, 0, 250, 180] Add(SP) [252, 8, 3, 3, 5, 0, 250, 180]
# PC:b5 [252, 8, 3, 3, 5, 0, 250, 181] StoreReg(C) [252, 8, 252, 3, 5, 0, 250, 181]
# PC:b6 [252, 8, 252, 3, 5, 0, 250, 182] LoadReg(B) [8, 8, 252, 3, 5, 0, 250, 182]
# PC:b7 [8, 8, 252, 3, 5, 0, 250, 183] StoreMem(C) [8, 8, 252, 3, 5, 0, 250, 183]
# PC:b8 [8, 8, 252, 3, 5, 0, 250, 184] LoadLo(Constant(11)) [251, 8, 252, 3, 5, 0, 250, 184]
# PC:b9 [251, 8, 252, 3, 5, 0, 250, 185] LoadHi(Constant(11)) [187, 8, 252, 3, 5, 0, 250, 185]
# PC:ba [187, 8, 252, 3, 5, 0, 250, 186] StoreReg(PC) [187, 8, 252, 3, 5, 0, 250, 187]
# PC:bb [187, 8, 252, 3, 5, 0, 250, 187] LoadMem(SP) [209, 8, 252, 3, 5, 0, 250, 187]
# PC:bc [209, 8, 252, 3, 5, 0, 250, 188] StoreReg(PC) [209, 8, 252, 3, 5, 0, 250, 209]
# PC:d1 [209, 8, 252, 3, 5, 0, 250, 209] LoadLo(Constant(1)) [1, 8, 252, 3, 5, 0, 250, 209]
# PC:d2 [1, 8, 252, 3, 5, 0, 250, 210] Add(SP) [251, 8, 252, 3, 5, 0, 250, 210]
# PC:d3 [251, 8, 252, 3, 5, 0, 250, 211] StoreReg(SP) [251, 8, 252, 3, 5, 0, 251, 211]
# PC:d4 [251, 8, 252, 3, 5, 0, 251, 212] LoadLo(Constant(1)) [1, 8, 252, 3, 5, 0, 251, 212]
# PC:d5 [1, 8, 252, 3, 5, 0, 251, 213] Add(SP) [252, 8, 252, 3, 5, 0, 251, 213]
# PC:d6 [252, 8, 252, 3, 5, 0, 251, 214] StoreReg(SP) [252, 8, 252, 3, 5, 0, 252, 214]
# PC:d7 [252, 8, 252, 3, 5, 0, 252, 215] LoadMem(SP) [8, 8, 252, 3, 5, 0, 252, 215]
# PC:d8 [8, 8, 252, 3, 5, 0, 252, 216] StoreReg(B) [8, 8, 252, 3, 5, 0, 252, 216]
# PC:d9 [8, 8, 252, 3, 5, 0, 252, 217] LoadLo(Constant(1)) [1, 8, 252, 3, 5, 0, 252, 217]
# PC:da [1, 8, 252, 3, 5, 0, 252, 218] Add(SP) [253, 8, 252, 3, 5, 0, 252, 218]
# PC:db [253, 8, 252, 3, 5, 0, 252, 219] StoreReg(SP) [253, 8, 252, 3, 5, 0, 253, 219]
# PC:dc [253, 8, 252, 3, 5, 0, 253, 220] LoadReg(B) [8, 8, 252, 3, 5, 0, 253, 220]
# PC:dd [8, 8, 252, 3, 5, 0, 253, 221] StoreReg(D) [8, 8, 252, 8, 5, 0, 253, 221]
# PC:de [8, 8, 252, 8, 5, 0, 253, 222] LoadReg(D) [8, 8, 252, 8, 5, 0, 253, 222]
# PC:df [8, 8, 252, 8, 5, 0, 253, 223] StoreReg(B) [8, 8, 252, 8, 5, 0, 253, 223]
# PC:e0 [8, 8, 252, 8, 5, 0, 253, 224] LoadLo(Constant(1)) [1, 8, 252, 8, 5, 0, 253, 224]
# PC:e1 [1, 8, 252, 8, 5, 0, 253, 225] Add(SP) [254, 8, 252, 8, 5, 0, 253, 225]
# PC:e2 [254, 8, 252, 8, 5, 0, 253, 226] StoreReg(C) [254, 8, 254, 8, 5, 0, 253, 226]
# PC:e3 [254, 8, 254, 8, 5, 0, 253, 227] LoadReg(B) [8, 8, 254, 8, 5, 0, 253, 227]
# PC:e4 [8, 8, 254, 8, 5, 0, 253, 228] StoreMem(C) [8, 8, 254, 8, 5, 0, 253, 228]
# PC:e5 [8, 8, 254, 8, 5, 0, 253, 229] LoadLo(Constant(8)) [248, 8, 254, 8, 5, 0, 253, 229]
# PC:e6 [248, 8, 254, 8, 5, 0, 253, 230] LoadHi(Constant(14)) [232, 8, 254, 8, 5, 0, 253, 230]
# PC:e7 [232, 8, 254, 8, 5, 0, 253, 231] StoreReg(PC) [232, 8, 254, 8, 5, 0, 253, 232]
# PC:e8 [232, 8, 254, 8, 5, 0, 253, 232] LoadMem(SP) [14, 8, 254, 8, 5, 0, 253, 232]
# PC:e9 [14, 8, 254, 8, 5, 0, 253, 233] StoreReg(PC) [14, 8, 254, 8, 5, 0, 253, 14]
# PC:0e [14, 8, 254, 8, 5, 0, 253, 14] LoadLo(Constant(1)) [1, 8, 254, 8, 5, 0, 253, 14]
# PC:0f [1, 8, 254, 8, 5, 0, 253, 15] Add(SP) [254, 8, 254, 8, 5, 0, 253, 15]
# PC:10 [254, 8, 254, 8, 5, 0, 253, 16] StoreReg(SP) [254, 8, 254, 8, 5, 0, 254, 16]
# PC:11 [254, 8, 254, 8, 5, 0, 254, 17] LoadMem(SP) [8, 8, 254, 8, 5, 0, 254, 17]
# PC:12 [8, 8, 254, 8, 5, 0, 254, 18] StoreReg(B) [8, 8, 254, 8, 5, 0, 254, 18]
# PC:13 [8, 8, 254, 8, 5, 0, 254, 19] LoadLo(Constant(1)) [1, 8, 254, 8, 5, 0, 254, 19]
# PC:14 [1, 8, 254, 8, 5, 0, 254, 20] Add(SP) [255, 8, 254, 8, 5, 0, 254, 20]
# PC:15 [255, 8, 254, 8, 5, 0, 254, 21] StoreReg(SP) [255, 8, 254, 8, 5, 0, 255, 21]
# PC:16 [255, 8, 254, 8, 5, 0, 255, 22] LoadLo(Constant(15)) [255, 8, 254, 8, 5, 0, 255, 22]
# PC:17 [255, 8, 254, 8, 5, 0, 255, 23] StoreReg(PC) [255, 8, 254, 8, 5, 0, 255, 255]
# simulation completed
