v2.0 raw
# Line 0: Comment("set stack to 0xff")
# Line 1: Instruction(LoadLo(Constant(15)))
# Line 2: Instruction(StoreReg(SP))
# Line 3: Comment("call main")
# Line 4: Instruction(LoadLo(Constant(15)))
# Line 5: Instruction(Add(SP))
# Line 6: Instruction(StoreReg(SP))
# Line 7: Macro("call :main", [LoadLo(Constant(15)), Add(SP), StoreReg(SP), LoadLo(Constant(5)), Add(PC), StoreMem(SP), LoadLo(Label(":main")), LoadHi(Label(":main")), StoreReg(PC), LoadLo(Constant(1)), Add(SP), StoreReg(SP)])
# Line 8: Macro("pop b", [LoadMem(SP), StoreReg(B), LoadLo(Constant(1)), Add(SP), StoreReg(SP)])
# Line 9: Macro("halt", [LoadLo(Constant(15)), StoreReg(PC)])
# Line 10: Comment("# Function: fib")
# Line 11: Label(":fib")
# Line 12: Comment("# sp+5 -> RESULT")
# Line 13: Comment("# sp+4 -> n")
# Line 14: Comment("# sp+3 -> RETURN_ADDRESS")
# Line 15: Comment("# Register(D) -> n ")
# Line 16: Comment("# Stack(1) -> sum1")
# Line 17: Comment("# Stack(0) -> sum2")
# Line 18: Comment("save regs: [D]")
# Line 19: Macro("push d", [LoadLo(Constant(15)), Add(SP), StoreReg(SP), LoadReg(D), StoreMem(SP)])
# Line 20: Comment("create stack space")
# Line 21: Instruction(LoadLo(Constant(14)))
# Line 22: Instruction(Add(SP))
# Line 23: Instruction(StoreReg(SP))
# Line 24: Comment("Begin statement If { predicate: Operation(Equals, Ident(\"n\"), Number(0)), when_true: [Return { value: Number(1) }] }")
# Line 25: Comment("Evaluating expression: Operation(Equals, Ident(\"n\"), Number(0))")
# Line 26: Comment("Evaluating expression: Ident(\"n\")")
# Line 27: Instruction(LoadLo(Constant(4)))
# Line 28: Instruction(Add(SP))
# Line 29: Instruction(LoadMem(ACC))
# Line 30: Instruction(StoreReg(C))
# Line 31: Comment("Evaluated expression: Ident(\"n\")")
# Line 32: Comment("Evaluating expression: Number(0)")
# Line 33: Instruction(LoadLo(Constant(0)))
# Line 34: Instruction(LoadHi(Constant(0)))
# Line 35: Instruction(StoreReg(B))
# Line 36: Comment("Evaluated expression: Number(0)")
# Line 37: Instruction(LoadReg(B))
# Line 38: Instruction(Xor(C))
# Line 39: Instruction(StoreReg(B))
# Line 40: Comment("Evaluated expression: Operation(Equals, Ident(\"n\"), Number(0))")
# Line 41: Instruction(LoadReg(B))
# Line 42: Instruction(Jnz(Label(":fib_IF_SKIP")))
# Line 43: Comment("Begin statement Return { value: Number(1) }")
# Line 44: Comment("Evaluating expression: Number(1)")
# Line 45: Instruction(LoadLo(Constant(1)))
# Line 46: Instruction(LoadHi(Constant(0)))
# Line 47: Instruction(StoreReg(B))
# Line 48: Comment("Evaluated expression: Number(1)")
# Line 49: Instruction(LoadLo(Constant(5)))
# Line 50: Instruction(Add(SP))
# Line 51: Instruction(StoreReg(C))
# Line 52: Instruction(LoadReg(B))
# Line 53: Instruction(StoreMem(C))
# Line 54: Instruction(LoadLo(Label(":fib__EPILOGUE")))
# Line 55: Instruction(LoadHi(Label(":fib__EPILOGUE")))
# Line 56: Instruction(StoreReg(PC))
# Line 57: Comment("Done  statement Return { value: Number(1) }")
# Line 58: Label(":fib_IF_SKIP")
# Line 59: Comment("Done  statement If { predicate: Operation(Equals, Ident(\"n\"), Number(0)), when_true: [Return { value: Number(1) }] }")
# Line 60: Comment("Begin statement Assign { local: \"n \", value: Operation(Subtract, Ident(\"n\"), Number(1)) }")
# Line 61: Comment("Evaluating expression: Operation(Subtract, Ident(\"n\"), Number(1))")
# Line 62: Comment("Evaluating expression: Ident(\"n\")")
# Line 63: Instruction(LoadLo(Constant(4)))
# Line 64: Instruction(Add(SP))
# Line 65: Instruction(LoadMem(ACC))
# Line 66: Instruction(StoreReg(C))
# Line 67: Comment("Evaluated expression: Ident(\"n\")")
# Line 68: Comment("Evaluating expression: Number(1)")
# Line 69: Instruction(LoadLo(Constant(1)))
# Line 70: Instruction(LoadHi(Constant(0)))
# Line 71: Instruction(StoreReg(B))
# Line 72: Comment("Evaluated expression: Number(1)")
# Line 73: Instruction(Not(B))
# Line 74: Instruction(StoreReg(B))
# Line 75: Instruction(LoadLo(Constant(1)))
# Line 76: Instruction(Add(B))
# Line 77: Instruction(Add(C))
# Line 78: Instruction(StoreReg(D))
# Line 79: Comment("Evaluated expression: Operation(Subtract, Ident(\"n\"), Number(1))")
# Line 80: Comment("Done  statement Assign { local: \"n \", value: Operation(Subtract, Ident(\"n\"), Number(1)) }")
# Line 81: Comment("Begin statement If { predicate: Operation(Equals, Ident(\"n\"), Number(0)), when_true: [Return { value: Number(1) }] }")
# Line 82: Comment("Evaluating expression: Operation(Equals, Ident(\"n\"), Number(0))")
# Line 83: Comment("Evaluating expression: Ident(\"n\")")
# Line 84: Instruction(LoadLo(Constant(4)))
# Line 85: Instruction(Add(SP))
# Line 86: Instruction(LoadMem(ACC))
# Line 87: Instruction(StoreReg(C))
# Line 88: Comment("Evaluated expression: Ident(\"n\")")
# Line 89: Comment("Evaluating expression: Number(0)")
# Line 90: Instruction(LoadLo(Constant(0)))
# Line 91: Instruction(LoadHi(Constant(0)))
# Line 92: Instruction(StoreReg(B))
# Line 93: Comment("Evaluated expression: Number(0)")
# Line 94: Instruction(LoadReg(B))
# Line 95: Instruction(Xor(C))
# Line 96: Instruction(StoreReg(B))
# Line 97: Comment("Evaluated expression: Operation(Equals, Ident(\"n\"), Number(0))")
# Line 98: Instruction(LoadReg(B))
# Line 99: Instruction(Jnz(Label(":fib_IF_SKIP")))
# Line 100: Comment("Begin statement Return { value: Number(1) }")
# Line 101: Comment("Evaluating expression: Number(1)")
# Line 102: Instruction(LoadLo(Constant(1)))
# Line 103: Instruction(LoadHi(Constant(0)))
# Line 104: Instruction(StoreReg(B))
# Line 105: Comment("Evaluated expression: Number(1)")
# Line 106: Instruction(LoadLo(Constant(5)))
# Line 107: Instruction(Add(SP))
# Line 108: Instruction(StoreReg(C))
# Line 109: Instruction(LoadReg(B))
# Line 110: Instruction(StoreMem(C))
# Line 111: Instruction(LoadLo(Label(":fib__EPILOGUE")))
# Line 112: Instruction(LoadHi(Label(":fib__EPILOGUE")))
# Line 113: Instruction(StoreReg(PC))
# Line 114: Comment("Done  statement Return { value: Number(1) }")
# Line 115: Label(":fib_IF_SKIP")
# Line 116: Comment("Done  statement If { predicate: Operation(Equals, Ident(\"n\"), Number(0)), when_true: [Return { value: Number(1) }] }")
# Line 117: Comment("Begin statement Call { local: \"sum1\", function: \"fib\", parameters: [Ident(\"n\")] }")
# Line 118: Macro("dec sp", [LoadLo(Constant(15)), Add(SP), StoreReg(SP)])
# Line 119: Comment("Evaluating expression: Ident(\"n\")")
# Line 120: Instruction(LoadLo(Constant(5)))
# Line 121: Instruction(Add(SP))
# Line 122: Instruction(LoadMem(ACC))
# Line 123: Instruction(StoreReg(B))
# Line 124: Comment("Evaluated expression: Ident(\"n\")")
# Line 125: Macro("push b", [LoadLo(Constant(15)), Add(SP), StoreReg(SP), LoadReg(B), StoreMem(SP)])
# Line 126: Macro("call :fib", [LoadLo(Constant(15)), Add(SP), StoreReg(SP), LoadLo(Constant(5)), Add(PC), StoreMem(SP), LoadLo(Label(":fib")), LoadHi(Label(":fib")), StoreReg(PC), LoadLo(Constant(1)), Add(SP), StoreReg(SP)])
# Line 127: Instruction(LoadLo(Constant(1)))
# Line 128: Instruction(Add(SP))
# Line 129: Instruction(StoreReg(SP))
# Line 130: Macro("pop b", [LoadMem(SP), StoreReg(B), LoadLo(Constant(1)), Add(SP), StoreReg(SP)])
# Line 131: Instruction(LoadLo(Constant(1)))
# Line 132: Instruction(Add(SP))
# Line 133: Instruction(StoreReg(C))
# Line 134: Instruction(LoadReg(B))
# Line 135: Instruction(StoreMem(C))
# Line 136: Comment("Done  statement Call { local: \"sum1\", function: \"fib\", parameters: [Ident(\"n\")] }")
# Line 137: Comment("Begin statement Assign { local: \"n \", value: Operation(Subtract, Ident(\"n\"), Number(1)) }")
# Line 138: Comment("Evaluating expression: Operation(Subtract, Ident(\"n\"), Number(1))")
# Line 139: Comment("Evaluating expression: Ident(\"n\")")
# Line 140: Instruction(LoadLo(Constant(4)))
# Line 141: Instruction(Add(SP))
# Line 142: Instruction(LoadMem(ACC))
# Line 143: Instruction(StoreReg(C))
# Line 144: Comment("Evaluated expression: Ident(\"n\")")
# Line 145: Comment("Evaluating expression: Number(1)")
# Line 146: Instruction(LoadLo(Constant(1)))
# Line 147: Instruction(LoadHi(Constant(0)))
# Line 148: Instruction(StoreReg(B))
# Line 149: Comment("Evaluated expression: Number(1)")
# Line 150: Instruction(Not(B))
# Line 151: Instruction(StoreReg(B))
# Line 152: Instruction(LoadLo(Constant(1)))
# Line 153: Instruction(Add(B))
# Line 154: Instruction(Add(C))
# Line 155: Instruction(StoreReg(D))
# Line 156: Comment("Evaluated expression: Operation(Subtract, Ident(\"n\"), Number(1))")
# Line 157: Comment("Done  statement Assign { local: \"n \", value: Operation(Subtract, Ident(\"n\"), Number(1)) }")
# Line 158: Comment("Begin statement Call { local: \"sum2\", function: \"fib\", parameters: [Ident(\"n\")] }")
# Line 159: Macro("dec sp", [LoadLo(Constant(15)), Add(SP), StoreReg(SP)])
# Line 160: Comment("Evaluating expression: Ident(\"n\")")
# Line 161: Instruction(LoadLo(Constant(5)))
# Line 162: Instruction(Add(SP))
# Line 163: Instruction(LoadMem(ACC))
# Line 164: Instruction(StoreReg(B))
# Line 165: Comment("Evaluated expression: Ident(\"n\")")
# Line 166: Macro("push b", [LoadLo(Constant(15)), Add(SP), StoreReg(SP), LoadReg(B), StoreMem(SP)])
# Line 167: Macro("call :fib", [LoadLo(Constant(15)), Add(SP), StoreReg(SP), LoadLo(Constant(5)), Add(PC), StoreMem(SP), LoadLo(Label(":fib")), LoadHi(Label(":fib")), StoreReg(PC), LoadLo(Constant(1)), Add(SP), StoreReg(SP)])
# Line 168: Instruction(LoadLo(Constant(1)))
# Line 169: Instruction(Add(SP))
# Line 170: Instruction(StoreReg(SP))
# Line 171: Macro("pop b", [LoadMem(SP), StoreReg(B), LoadLo(Constant(1)), Add(SP), StoreReg(SP)])
# Line 172: Instruction(LoadLo(Constant(0)))
# Line 173: Instruction(Add(SP))
# Line 174: Instruction(StoreReg(C))
# Line 175: Instruction(LoadReg(B))
# Line 176: Instruction(StoreMem(C))
# Line 177: Comment("Done  statement Call { local: \"sum2\", function: \"fib\", parameters: [Ident(\"n\")] }")
# Line 178: Comment("Begin statement Return { value: Operation(Add, Ident(\"sum1\"), Ident(\"sum2\")) }")
# Line 179: Comment("Evaluating expression: Operation(Add, Ident(\"sum1\"), Ident(\"sum2\"))")
# Line 180: Comment("Evaluating expression: Ident(\"sum1\")")
# Line 181: Instruction(LoadLo(Constant(1)))
# Line 182: Instruction(Add(SP))
# Line 183: Instruction(LoadMem(ACC))
# Line 184: Instruction(StoreReg(C))
# Line 185: Comment("Evaluated expression: Ident(\"sum1\")")
# Line 186: Comment("Evaluating expression: Ident(\"sum2\")")
# Line 187: Instruction(LoadLo(Constant(0)))
# Line 188: Instruction(Add(SP))
# Line 189: Instruction(LoadMem(ACC))
# Line 190: Instruction(StoreReg(B))
# Line 191: Comment("Evaluated expression: Ident(\"sum2\")")
# Line 192: Instruction(LoadReg(B))
# Line 193: Instruction(Add(C))
# Line 194: Instruction(StoreReg(B))
# Line 195: Comment("Evaluated expression: Operation(Add, Ident(\"sum1\"), Ident(\"sum2\"))")
# Line 196: Instruction(LoadLo(Constant(5)))
# Line 197: Instruction(Add(SP))
# Line 198: Instruction(StoreReg(C))
# Line 199: Instruction(LoadReg(B))
# Line 200: Instruction(StoreMem(C))
# Line 201: Instruction(LoadLo(Label(":fib__EPILOGUE")))
# Line 202: Instruction(LoadHi(Label(":fib__EPILOGUE")))
# Line 203: Instruction(StoreReg(PC))
# Line 204: Comment("Done  statement Return { value: Operation(Add, Ident(\"sum1\"), Ident(\"sum2\")) }")
# Line 205: Label(":fib__EPILOGUE")
# Line 206: Instruction(LoadLo(Constant(2)))
# Line 207: Instruction(Add(SP))
# Line 208: Instruction(StoreReg(SP))
# Line 209: Comment("save regs: [D]")
# Line 210: Macro("pop d", [LoadMem(SP), StoreReg(D), LoadLo(Constant(1)), Add(SP), StoreReg(SP)])
# Line 211: Macro("ret", [LoadMem(SP), StoreReg(PC)])
# Line 212: Comment("# Function: main")
# Line 213: Label(":main")
# Line 214: Comment("# sp+2 -> RESULT")
# Line 215: Comment("# sp+1 -> RETURN_ADDRESS")
# Line 216: Comment("# Register(D) -> result")
# Line 217: Comment("save regs: [D]")
# Line 218: Macro("push d", [LoadLo(Constant(15)), Add(SP), StoreReg(SP), LoadReg(D), StoreMem(SP)])
# Line 219: Comment("Begin statement Call { local: \"result\", function: \"fib\", parameters: [Number(5)] }")
# Line 220: Macro("dec sp", [LoadLo(Constant(15)), Add(SP), StoreReg(SP)])
# Line 221: Comment("Evaluating expression: Number(5)")
# Line 222: Instruction(LoadLo(Constant(5)))
# Line 223: Instruction(LoadHi(Constant(0)))
# Line 224: Instruction(StoreReg(B))
# Line 225: Comment("Evaluated expression: Number(5)")
# Line 226: Macro("push b", [LoadLo(Constant(15)), Add(SP), StoreReg(SP), LoadReg(B), StoreMem(SP)])
# Line 227: Macro("call :fib", [LoadLo(Constant(15)), Add(SP), StoreReg(SP), LoadLo(Constant(5)), Add(PC), StoreMem(SP), LoadLo(Label(":fib")), LoadHi(Label(":fib")), StoreReg(PC), LoadLo(Constant(1)), Add(SP), StoreReg(SP)])
# Line 228: Instruction(LoadLo(Constant(1)))
# Line 229: Instruction(Add(SP))
# Line 230: Instruction(StoreReg(SP))
# Line 231: Macro("pop b", [LoadMem(SP), StoreReg(B), LoadLo(Constant(1)), Add(SP), StoreReg(SP)])
# Line 232: Instruction(LoadReg(B))
# Line 233: Instruction(StoreReg(D))
# Line 234: Comment("Done  statement Call { local: \"result\", function: \"fib\", parameters: [Number(5)] }")
# Line 235: Comment("Begin statement Return { value: Ident(\"result\") }")
# Line 236: Comment("Evaluating expression: Ident(\"result\")")
# Line 237: Instruction(LoadReg(D))
# Line 238: Instruction(StoreReg(B))
# Line 239: Comment("Evaluated expression: Ident(\"result\")")
# Line 240: Instruction(LoadLo(Constant(2)))
# Line 241: Instruction(Add(SP))
# Line 242: Instruction(StoreReg(C))
# Line 243: Instruction(LoadReg(B))
# Line 244: Instruction(StoreMem(C))
# Line 245: Instruction(LoadLo(Label(":main__EPILOGUE")))
# Line 246: Instruction(LoadHi(Label(":main__EPILOGUE")))
# Line 247: Instruction(StoreReg(PC))
# Line 248: Comment("Done  statement Return { value: Ident(\"result\") }")
# Line 249: Label(":main__EPILOGUE")
# Line 250: Comment("save regs: [D]")
# Line 251: Macro("pop d", [LoadMem(SP), StoreReg(D), LoadLo(Constant(1)), Add(SP), StoreReg(SP)])
# Line 252: Macro("ret", [LoadMem(SP), StoreReg(PC)])
