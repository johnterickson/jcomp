v2.0 raw
# Line 0: Comment("set stack to 0xff")
# Line 1: Instruction(LoadLo(Constant(15)))
# Line 2: Instruction(StoreReg(SP))
# Line 3: Comment("call main")
# Line 4: Instruction(LoadLo(Constant(15)))
# Line 5: Instruction(Add(SP))
# Line 6: Instruction(StoreReg(SP))
# Line 7: Macro("call :main", [LoadLo(Constant(15)), Add(SP), StoreReg(SP), LoadLo(Constant(5)), Add(PC), StoreMem(SP), LoadLo(Label(":main")), LoadHi(Label(":main")), StoreReg(PC), LoadLo(Constant(1)), Add(SP), StoreReg(SP)])
# Line 8: Macro("pop b", [LoadMem(SP), StoreReg(B), LoadLo(Constant(1)), Add(SP), StoreReg(SP)])
# Line 9: Macro("halt", [LoadLo(Constant(15)), StoreReg(PC)])
# Line 10: Comment("Function { name: \"fac\", args: [\"n\"], locals: {\"product\"}, body: [If { predicate: Operation(Equals, Ident(\"n\"), Number(0)), when_true: [Return { value: Number(1) }] }, Call { local: \"product\", function: \"fac\", parameters: [Operation(Subtract, Ident(\"n\"), Number(1))] }, Assign { local: \"product\", value: Operation(Multiply, Ident(\"n\"), Ident(\"product\")) }, Return { value: Ident(\"product\") }] }")
# Line 11: Comment("# Function: fac")
# Line 12: Label(":fac")
# Line 13: Comment("# sp+2 -> RESULT")
# Line 14: Comment("# sp+1 -> n")
# Line 15: Comment("# sp+0 -> RETURN_ADDRESS")
# Line 16: Comment("# Register(D) -> product")
# Line 17: Comment("Begin statement If { predicate: Operation(Equals, Ident(\"n\"), Number(0)), when_true: [Return { value: Number(1) }] }")
# Line 18: Comment("Evaluating expression: Operation(Equals, Ident(\"n\"), Number(0))")
# Line 19: Comment("Evaluating expression: Ident(\"n\")")
# Line 20: Instruction(LoadLo(Constant(1)))
# Line 21: Instruction(Add(SP))
# Line 22: Instruction(LoadMem(ACC))
# Line 23: Instruction(StoreReg(C))
# Line 24: Comment("Evaluated expression: Ident(\"n\")")
# Line 25: Comment("Evaluating expression: Number(0)")
# Line 26: Instruction(LoadLo(Constant(0)))
# Line 27: Instruction(LoadHi(Constant(0)))
# Line 28: Comment("Evaluated expression: Number(0)")
# Line 29: Instruction(Xor(C))
# Line 30: Comment("Evaluated expression: Operation(Equals, Ident(\"n\"), Number(0))")
# Line 31: Instruction(Jnz(Label(":fac_IF_SKIP_0")))
# Line 32: Comment("Begin statement Return { value: Number(1) }")
# Line 33: Comment("Evaluating expression: Number(1)")
# Line 34: Instruction(LoadLo(Constant(1)))
# Line 35: Instruction(LoadHi(Constant(0)))
# Line 36: Instruction(StoreReg(B))
# Line 37: Comment("Evaluated expression: Number(1)")
# Line 38: Instruction(LoadLo(Constant(2)))
# Line 39: Instruction(Add(SP))
# Line 40: Instruction(StoreReg(C))
# Line 41: Instruction(LoadReg(B))
# Line 42: Instruction(StoreMem(C))
# Line 43: Instruction(LoadLo(Label(":fac__EPILOGUE")))
# Line 44: Instruction(LoadHi(Label(":fac__EPILOGUE")))
# Line 45: Instruction(StoreReg(PC))
# Line 46: Comment("Done  statement Return { value: Number(1) }")
# Line 47: Label(":fac_IF_SKIP_0")
# Line 48: Comment("Done  statement If { predicate: Operation(Equals, Ident(\"n\"), Number(0)), when_true: [Return { value: Number(1) }] }")
# Line 49: Comment("Begin statement Call { local: \"product\", function: \"fac\", parameters: [Operation(Subtract, Ident(\"n\"), Number(1))] }")
# Line 50: Macro("dec sp", [LoadLo(Constant(15)), Add(SP), StoreReg(SP)])
# Line 51: Comment("Evaluating expression: Operation(Subtract, Ident(\"n\"), Number(1))")
# Line 52: Comment("Evaluating expression: Ident(\"n\")")
# Line 53: Instruction(LoadLo(Constant(2)))
# Line 54: Instruction(Add(SP))
# Line 55: Instruction(LoadMem(ACC))
# Line 56: Instruction(StoreReg(C))
# Line 57: Comment("Evaluated expression: Ident(\"n\")")
# Line 58: Comment("Evaluating expression: Number(1)")
# Line 59: Instruction(LoadLo(Constant(1)))
# Line 60: Instruction(LoadHi(Constant(0)))
# Line 61: Comment("Evaluated expression: Number(1)")
# Line 62: Instruction(Not(ACC))
# Line 63: Instruction(StoreReg(B))
# Line 64: Instruction(LoadLo(Constant(1)))
# Line 65: Instruction(Add(B))
# Line 66: Instruction(Add(C))
# Line 67: Instruction(StoreReg(B))
# Line 68: Comment("Evaluated expression: Operation(Subtract, Ident(\"n\"), Number(1))")
# Line 69: Macro("push b", [LoadLo(Constant(15)), Add(SP), StoreReg(SP), LoadReg(B), StoreMem(SP)])
# Line 70: Macro("call :fac", [LoadLo(Constant(15)), Add(SP), StoreReg(SP), LoadLo(Constant(5)), Add(PC), StoreMem(SP), LoadLo(Label(":fac")), LoadHi(Label(":fac")), StoreReg(PC), LoadLo(Constant(1)), Add(SP), StoreReg(SP)])
# Line 71: Instruction(LoadLo(Constant(1)))
# Line 72: Instruction(Add(SP))
# Line 73: Instruction(StoreReg(SP))
# Line 74: Macro("pop b", [LoadMem(SP), StoreReg(B), LoadLo(Constant(1)), Add(SP), StoreReg(SP)])
# Line 75: Instruction(LoadReg(B))
# Line 76: Instruction(StoreReg(D))
# Line 77: Comment("Done  statement Call { local: \"product\", function: \"fac\", parameters: [Operation(Subtract, Ident(\"n\"), Number(1))] }")
# Line 78: Comment("Begin statement Assign { local: \"product\", value: Operation(Multiply, Ident(\"n\"), Ident(\"product\")) }")
# Line 79: Comment("Evaluating expression: Operation(Multiply, Ident(\"n\"), Ident(\"product\"))")
# Line 80: Comment("Evaluating expression: Ident(\"n\")")
# Line 81: Instruction(LoadLo(Constant(1)))
# Line 82: Instruction(Add(SP))
# Line 83: Instruction(LoadMem(ACC))
# Line 84: Instruction(StoreReg(C))
# Line 85: Comment("Evaluated expression: Ident(\"n\")")
# Line 86: Comment("Evaluating expression: Ident(\"product\")")
# Line 87: Instruction(LoadReg(D))
# Line 88: Comment("Evaluated expression: Ident(\"product\")")
# Line 89: Instruction(Mul(C))
# Line 90: Instruction(StoreReg(D))
# Line 91: Comment("Evaluated expression: Operation(Multiply, Ident(\"n\"), Ident(\"product\"))")
# Line 92: Comment("Done  statement Assign { local: \"product\", value: Operation(Multiply, Ident(\"n\"), Ident(\"product\")) }")
# Line 93: Comment("Begin statement Return { value: Ident(\"product\") }")
# Line 94: Comment("Evaluating expression: Ident(\"product\")")
# Line 95: Instruction(LoadReg(D))
# Line 96: Instruction(StoreReg(B))
# Line 97: Comment("Evaluated expression: Ident(\"product\")")
# Line 98: Instruction(LoadLo(Constant(2)))
# Line 99: Instruction(Add(SP))
# Line 100: Instruction(StoreReg(C))
# Line 101: Instruction(LoadReg(B))
# Line 102: Instruction(StoreMem(C))
# Line 103: Instruction(LoadLo(Label(":fac__EPILOGUE")))
# Line 104: Instruction(LoadHi(Label(":fac__EPILOGUE")))
# Line 105: Instruction(StoreReg(PC))
# Line 106: Comment("Done  statement Return { value: Ident(\"product\") }")
# Line 107: Label(":fac__EPILOGUE")
# Line 108: Macro("ret", [LoadMem(SP), StoreReg(PC)])
# Line 109: Comment("Function { name: \"main\", args: [], locals: {\"result\"}, body: [Call { local: \"result\", function: \"fac\", parameters: [Number(5)] }, Return { value: Ident(\"result\") }] }")
# Line 110: Comment("# Function: main")
# Line 111: Label(":main")
# Line 112: Comment("# sp+1 -> RESULT")
# Line 113: Comment("# sp+0 -> RETURN_ADDRESS")
# Line 114: Comment("# Register(D) -> result")
# Line 115: Comment("Begin statement Call { local: \"result\", function: \"fac\", parameters: [Number(5)] }")
# Line 116: Macro("dec sp", [LoadLo(Constant(15)), Add(SP), StoreReg(SP)])
# Line 117: Comment("Evaluating expression: Number(5)")
# Line 118: Instruction(LoadLo(Constant(5)))
# Line 119: Instruction(LoadHi(Constant(0)))
# Line 120: Instruction(StoreReg(B))
# Line 121: Comment("Evaluated expression: Number(5)")
# Line 122: Macro("push b", [LoadLo(Constant(15)), Add(SP), StoreReg(SP), LoadReg(B), StoreMem(SP)])
# Line 123: Macro("call :fac", [LoadLo(Constant(15)), Add(SP), StoreReg(SP), LoadLo(Constant(5)), Add(PC), StoreMem(SP), LoadLo(Label(":fac")), LoadHi(Label(":fac")), StoreReg(PC), LoadLo(Constant(1)), Add(SP), StoreReg(SP)])
# Line 124: Instruction(LoadLo(Constant(1)))
# Line 125: Instruction(Add(SP))
# Line 126: Instruction(StoreReg(SP))
# Line 127: Macro("pop b", [LoadMem(SP), StoreReg(B), LoadLo(Constant(1)), Add(SP), StoreReg(SP)])
# Line 128: Instruction(LoadReg(B))
# Line 129: Instruction(StoreReg(D))
# Line 130: Comment("Done  statement Call { local: \"result\", function: \"fac\", parameters: [Number(5)] }")
# Line 131: Comment("Begin statement Return { value: Ident(\"result\") }")
# Line 132: Comment("Evaluating expression: Ident(\"result\")")
# Line 133: Instruction(LoadReg(D))
# Line 134: Instruction(StoreReg(B))
# Line 135: Comment("Evaluated expression: Ident(\"result\")")
# Line 136: Instruction(LoadLo(Constant(1)))
# Line 137: Instruction(Add(SP))
# Line 138: Instruction(StoreReg(C))
# Line 139: Instruction(LoadReg(B))
# Line 140: Instruction(StoreMem(C))
# Line 141: Instruction(LoadLo(Label(":main__EPILOGUE")))
# Line 142: Instruction(LoadHi(Label(":main__EPILOGUE")))
# Line 143: Instruction(StoreReg(PC))
# Line 144: Comment("Done  statement Return { value: Ident(\"result\") }")
# Line 145: Label(":main__EPILOGUE")
# Line 146: Macro("ret", [LoadMem(SP), StoreReg(PC)])
# (":fac", 24)
# (":fac_IF_SKIP_0", 43)
# (":fac__EPILOGUE", 102)
# (":main", 104)
# (":main__EPILOGUE", 147)
# set stack to 0xff
8f # @00 LoadLo(Constant(15))
06 # @01 StoreReg(SP)
# call main
8f # @02 LoadLo(Constant(15))
5e # @03 Add(SP)
06 # @04 StoreReg(SP)
# begin resolving macro: 'call :main'
8f # @05 LoadLo(Constant(15))
5e # @06 Add(SP)
06 # @07 StoreReg(SP)
85 # @08 LoadLo(Constant(5))
5f # @09 Add(PC)
0e # @0a StoreMem(SP)
88 # @0b LoadLo(Label(":main")) LoadLo(Constant(8))
96 # @0c LoadHi(Label(":main")) LoadHi(Constant(6))
07 # @0d StoreReg(PC)
81 # @0e LoadLo(Constant(1))
5e # @0f Add(SP)
06 # @10 StoreReg(SP)
# end resolving macro: 'call :main'
# begin resolving macro: 'pop b'
7e # @11 LoadMem(SP)
01 # @12 StoreReg(B)
81 # @13 LoadLo(Constant(1))
5e # @14 Add(SP)
06 # @15 StoreReg(SP)
# end resolving macro: 'pop b'
# begin resolving macro: 'halt'
8f # @16 LoadLo(Constant(15))
07 # @17 StoreReg(PC)
# end resolving macro: 'halt'
# Function { name: "fac", args: ["n"], locals: {"product"}, body: [If { predicate: Operation(Equals, Ident("n"), Number(0)), when_true: [Return { value: Number(1) }] }, Call { local: "product", function: "fac", parameters: [Operation(Subtract, Ident("n"), Number(1))] }, Assign { local: "product", value: Operation(Multiply, Ident("n"), Ident("product")) }, Return { value: Ident("product") }] }
# # Function: fac
# ":fac"
# # sp+2 -> RESULT
# # sp+1 -> n
# # sp+0 -> RETURN_ADDRESS
# # Register(D) -> product
# Begin statement If { predicate: Operation(Equals, Ident("n"), Number(0)), when_true: [Return { value: Number(1) }] }
# Evaluating expression: Operation(Equals, Ident("n"), Number(0))
# Evaluating expression: Ident("n")
81 # @18 LoadLo(Constant(1))
5e # @19 Add(SP)
78 # @1a LoadMem(ACC)
02 # @1b StoreReg(C)
# Evaluated expression: Ident("n")
# Evaluating expression: Number(0)
80 # @1c LoadLo(Constant(0))
90 # @1d LoadHi(Constant(0))
# Evaluated expression: Number(0)
42 # @1e Xor(C)
# Evaluated expression: Operation(Equals, Ident("n"), Number(0))
ec # @1f Jnz(Label(":fac_IF_SKIP_0")) Jnz(Constant(12))
# Begin statement Return { value: Number(1) }
# Evaluating expression: Number(1)
81 # @20 LoadLo(Constant(1))
90 # @21 LoadHi(Constant(0))
01 # @22 StoreReg(B)
# Evaluated expression: Number(1)
82 # @23 LoadLo(Constant(2))
5e # @24 Add(SP)
02 # @25 StoreReg(C)
71 # @26 LoadReg(B)
0a # @27 StoreMem(C)
86 # @28 LoadLo(Label(":fac__EPILOGUE")) LoadLo(Constant(6))
96 # @29 LoadHi(Label(":fac__EPILOGUE")) LoadHi(Constant(6))
07 # @2a StoreReg(PC)
# Done  statement Return { value: Number(1) }
# ":fac_IF_SKIP_0"
# Done  statement If { predicate: Operation(Equals, Ident("n"), Number(0)), when_true: [Return { value: Number(1) }] }
# Begin statement Call { local: "product", function: "fac", parameters: [Operation(Subtract, Ident("n"), Number(1))] }
# begin resolving macro: 'dec sp'
8f # @2b LoadLo(Constant(15))
5e # @2c Add(SP)
06 # @2d StoreReg(SP)
# end resolving macro: 'dec sp'
# Evaluating expression: Operation(Subtract, Ident("n"), Number(1))
# Evaluating expression: Ident("n")
82 # @2e LoadLo(Constant(2))
5e # @2f Add(SP)
78 # @30 LoadMem(ACC)
02 # @31 StoreReg(C)
# Evaluated expression: Ident("n")
# Evaluating expression: Number(1)
81 # @32 LoadLo(Constant(1))
90 # @33 LoadHi(Constant(0))
# Evaluated expression: Number(1)
60 # @34 Not(ACC)
01 # @35 StoreReg(B)
81 # @36 LoadLo(Constant(1))
59 # @37 Add(B)
5a # @38 Add(C)
01 # @39 StoreReg(B)
# Evaluated expression: Operation(Subtract, Ident("n"), Number(1))
# begin resolving macro: 'push b'
8f # @3a LoadLo(Constant(15))
5e # @3b Add(SP)
06 # @3c StoreReg(SP)
71 # @3d LoadReg(B)
0e # @3e StoreMem(SP)
# end resolving macro: 'push b'
# begin resolving macro: 'call :fac'
8f # @3f LoadLo(Constant(15))
5e # @40 Add(SP)
06 # @41 StoreReg(SP)
85 # @42 LoadLo(Constant(5))
5f # @43 Add(PC)
0e # @44 StoreMem(SP)
88 # @45 LoadLo(Label(":fac")) LoadLo(Constant(8))
91 # @46 LoadHi(Label(":fac")) LoadHi(Constant(1))
07 # @47 StoreReg(PC)
81 # @48 LoadLo(Constant(1))
5e # @49 Add(SP)
06 # @4a StoreReg(SP)
# end resolving macro: 'call :fac'
81 # @4b LoadLo(Constant(1))
5e # @4c Add(SP)
06 # @4d StoreReg(SP)
# begin resolving macro: 'pop b'
7e # @4e LoadMem(SP)
01 # @4f StoreReg(B)
81 # @50 LoadLo(Constant(1))
5e # @51 Add(SP)
06 # @52 StoreReg(SP)
# end resolving macro: 'pop b'
71 # @53 LoadReg(B)
03 # @54 StoreReg(D)
# Done  statement Call { local: "product", function: "fac", parameters: [Operation(Subtract, Ident("n"), Number(1))] }
# Begin statement Assign { local: "product", value: Operation(Multiply, Ident("n"), Ident("product")) }
# Evaluating expression: Operation(Multiply, Ident("n"), Ident("product"))
# Evaluating expression: Ident("n")
81 # @55 LoadLo(Constant(1))
5e # @56 Add(SP)
78 # @57 LoadMem(ACC)
02 # @58 StoreReg(C)
# Evaluated expression: Ident("n")
# Evaluating expression: Ident("product")
73 # @59 LoadReg(D)
# Evaluated expression: Ident("product")
6a # @5a Mul(C)
03 # @5b StoreReg(D)
# Evaluated expression: Operation(Multiply, Ident("n"), Ident("product"))
# Done  statement Assign { local: "product", value: Operation(Multiply, Ident("n"), Ident("product")) }
# Begin statement Return { value: Ident("product") }
# Evaluating expression: Ident("product")
73 # @5c LoadReg(D)
01 # @5d StoreReg(B)
# Evaluated expression: Ident("product")
82 # @5e LoadLo(Constant(2))
5e # @5f Add(SP)
02 # @60 StoreReg(C)
71 # @61 LoadReg(B)
0a # @62 StoreMem(C)
86 # @63 LoadLo(Label(":fac__EPILOGUE")) LoadLo(Constant(6))
96 # @64 LoadHi(Label(":fac__EPILOGUE")) LoadHi(Constant(6))
07 # @65 StoreReg(PC)
# Done  statement Return { value: Ident("product") }
# ":fac__EPILOGUE"
# begin resolving macro: 'ret'
7e # @66 LoadMem(SP)
07 # @67 StoreReg(PC)
# end resolving macro: 'ret'
# Function { name: "main", args: [], locals: {"result"}, body: [Call { local: "result", function: "fac", parameters: [Number(5)] }, Return { value: Ident("result") }] }
# # Function: main
# ":main"
# # sp+1 -> RESULT
# # sp+0 -> RETURN_ADDRESS
# # Register(D) -> result
# Begin statement Call { local: "result", function: "fac", parameters: [Number(5)] }
# begin resolving macro: 'dec sp'
8f # @68 LoadLo(Constant(15))
5e # @69 Add(SP)
06 # @6a StoreReg(SP)
# end resolving macro: 'dec sp'
# Evaluating expression: Number(5)
85 # @6b LoadLo(Constant(5))
90 # @6c LoadHi(Constant(0))
01 # @6d StoreReg(B)
# Evaluated expression: Number(5)
# begin resolving macro: 'push b'
8f # @6e LoadLo(Constant(15))
5e # @6f Add(SP)
06 # @70 StoreReg(SP)
71 # @71 LoadReg(B)
0e # @72 StoreMem(SP)
# end resolving macro: 'push b'
# begin resolving macro: 'call :fac'
8f # @73 LoadLo(Constant(15))
5e # @74 Add(SP)
06 # @75 StoreReg(SP)
85 # @76 LoadLo(Constant(5))
5f # @77 Add(PC)
0e # @78 StoreMem(SP)
88 # @79 LoadLo(Label(":fac")) LoadLo(Constant(8))
91 # @7a LoadHi(Label(":fac")) LoadHi(Constant(1))
07 # @7b StoreReg(PC)
81 # @7c LoadLo(Constant(1))
5e # @7d Add(SP)
06 # @7e StoreReg(SP)
# end resolving macro: 'call :fac'
81 # @7f LoadLo(Constant(1))
5e # @80 Add(SP)
06 # @81 StoreReg(SP)
# begin resolving macro: 'pop b'
7e # @82 LoadMem(SP)
01 # @83 StoreReg(B)
81 # @84 LoadLo(Constant(1))
5e # @85 Add(SP)
06 # @86 StoreReg(SP)
# end resolving macro: 'pop b'
71 # @87 LoadReg(B)
03 # @88 StoreReg(D)
# Done  statement Call { local: "result", function: "fac", parameters: [Number(5)] }
# Begin statement Return { value: Ident("result") }
# Evaluating expression: Ident("result")
73 # @89 LoadReg(D)
01 # @8a StoreReg(B)
# Evaluated expression: Ident("result")
81 # @8b LoadLo(Constant(1))
5e # @8c Add(SP)
02 # @8d StoreReg(C)
71 # @8e LoadReg(B)
0a # @8f StoreMem(C)
83 # @90 LoadLo(Label(":main__EPILOGUE")) LoadLo(Constant(3))
99 # @91 LoadHi(Label(":main__EPILOGUE")) LoadHi(Constant(9))
07 # @92 StoreReg(PC)
# Done  statement Return { value: Ident("result") }
# ":main__EPILOGUE"
# begin resolving macro: 'ret'
7e # @93 LoadMem(SP)
07 # @94 StoreReg(PC)
# end resolving macro: 'ret'
# begin simulation
# PC:00 [0, 0, 0, 0, 0, 0, 0, 0] LoadLo(Constant(15)) [255, 0, 0, 0, 0, 0, 0, 0]
# PC:01 [255, 0, 0, 0, 0, 0, 0, 1] StoreReg(SP) [255, 0, 0, 0, 0, 0, 255, 1]
# PC:02 [255, 0, 0, 0, 0, 0, 255, 2] LoadLo(Constant(15)) [255, 0, 0, 0, 0, 0, 255, 2]
# PC:03 [255, 0, 0, 0, 0, 0, 255, 3] Add(SP) [254, 0, 0, 0, 0, 1, 255, 3]
# PC:04 [254, 0, 0, 0, 0, 1, 255, 4] StoreReg(SP) [254, 0, 0, 0, 0, 1, 254, 4]
# PC:05 [254, 0, 0, 0, 0, 1, 254, 5] LoadLo(Constant(15)) [255, 0, 0, 0, 0, 1, 254, 5]
# PC:06 [255, 0, 0, 0, 0, 1, 254, 6] Add(SP) [253, 0, 0, 0, 0, 1, 254, 6]
# PC:07 [253, 0, 0, 0, 0, 1, 254, 7] StoreReg(SP) [253, 0, 0, 0, 0, 1, 253, 7]
# PC:08 [253, 0, 0, 0, 0, 1, 253, 8] LoadLo(Constant(5)) [5, 0, 0, 0, 0, 1, 253, 8]
# PC:09 [5, 0, 0, 0, 0, 1, 253, 9] Add(PC) [14, 0, 0, 0, 0, 0, 253, 9]
# PC:0a [14, 0, 0, 0, 0, 0, 253, 10] StoreMem(SP) [14, 0, 0, 0, 0, 0, 253, 10]
# PC:0b [14, 0, 0, 0, 0, 0, 253, 11] LoadLo(Constant(8)) [248, 0, 0, 0, 0, 0, 253, 11]
# PC:0c [248, 0, 0, 0, 0, 0, 253, 12] LoadHi(Constant(6)) [104, 0, 0, 0, 0, 0, 253, 12]
# PC:0d [104, 0, 0, 0, 0, 0, 253, 13] StoreReg(PC) [104, 0, 0, 0, 0, 0, 253, 104]
# PC:68 [104, 0, 0, 0, 0, 0, 253, 104] LoadLo(Constant(15)) [255, 0, 0, 0, 0, 0, 253, 104]
# PC:69 [255, 0, 0, 0, 0, 0, 253, 105] Add(SP) [252, 0, 0, 0, 0, 1, 253, 105]
# PC:6a [252, 0, 0, 0, 0, 1, 253, 106] StoreReg(SP) [252, 0, 0, 0, 0, 1, 252, 106]
# PC:6b [252, 0, 0, 0, 0, 1, 252, 107] LoadLo(Constant(5)) [5, 0, 0, 0, 0, 1, 252, 107]
# PC:6c [5, 0, 0, 0, 0, 1, 252, 108] LoadHi(Constant(0)) [5, 0, 0, 0, 0, 1, 252, 108]
# PC:6d [5, 0, 0, 0, 0, 1, 252, 109] StoreReg(B) [5, 5, 0, 0, 0, 1, 252, 109]
# PC:6e [5, 5, 0, 0, 0, 1, 252, 110] LoadLo(Constant(15)) [255, 5, 0, 0, 0, 1, 252, 110]
# PC:6f [255, 5, 0, 0, 0, 1, 252, 111] Add(SP) [251, 5, 0, 0, 0, 1, 252, 111]
# PC:70 [251, 5, 0, 0, 0, 1, 252, 112] StoreReg(SP) [251, 5, 0, 0, 0, 1, 251, 112]
# PC:71 [251, 5, 0, 0, 0, 1, 251, 113] LoadReg(B) [5, 5, 0, 0, 0, 1, 251, 113]
# PC:72 [5, 5, 0, 0, 0, 1, 251, 114] StoreMem(SP) [5, 5, 0, 0, 0, 1, 251, 114]
# PC:73 [5, 5, 0, 0, 0, 1, 251, 115] LoadLo(Constant(15)) [255, 5, 0, 0, 0, 1, 251, 115]
# PC:74 [255, 5, 0, 0, 0, 1, 251, 116] Add(SP) [250, 5, 0, 0, 0, 1, 251, 116]
# PC:75 [250, 5, 0, 0, 0, 1, 251, 117] StoreReg(SP) [250, 5, 0, 0, 0, 1, 250, 117]
# PC:76 [250, 5, 0, 0, 0, 1, 250, 118] LoadLo(Constant(5)) [5, 5, 0, 0, 0, 1, 250, 118]
# PC:77 [5, 5, 0, 0, 0, 1, 250, 119] Add(PC) [124, 5, 0, 0, 0, 0, 250, 119]
# PC:78 [124, 5, 0, 0, 0, 0, 250, 120] StoreMem(SP) [124, 5, 0, 0, 0, 0, 250, 120]
# PC:79 [124, 5, 0, 0, 0, 0, 250, 121] LoadLo(Constant(8)) [248, 5, 0, 0, 0, 0, 250, 121]
# PC:7a [248, 5, 0, 0, 0, 0, 250, 122] LoadHi(Constant(1)) [24, 5, 0, 0, 0, 0, 250, 122]
# PC:7b [24, 5, 0, 0, 0, 0, 250, 123] StoreReg(PC) [24, 5, 0, 0, 0, 0, 250, 24]
# PC:18 [24, 5, 0, 0, 0, 0, 250, 24] LoadLo(Constant(1)) [1, 5, 0, 0, 0, 0, 250, 24]
# PC:19 [1, 5, 0, 0, 0, 0, 250, 25] Add(SP) [251, 5, 0, 0, 0, 0, 250, 25]
# PC:1a [251, 5, 0, 0, 0, 0, 250, 26] LoadMem(ACC) [5, 5, 0, 0, 0, 0, 250, 26]
# PC:1b [5, 5, 0, 0, 0, 0, 250, 27] StoreReg(C) [5, 5, 5, 0, 0, 0, 250, 27]
# PC:1c [5, 5, 5, 0, 0, 0, 250, 28] LoadLo(Constant(0)) [0, 5, 5, 0, 0, 0, 250, 28]
# PC:1d [0, 5, 5, 0, 0, 0, 250, 29] LoadHi(Constant(0)) [0, 5, 5, 0, 0, 0, 250, 29]
# PC:1e [0, 5, 5, 0, 0, 0, 250, 30] Xor(C) [5, 5, 5, 0, 0, 0, 250, 30]
# PC:1f [5, 5, 5, 0, 0, 0, 250, 31] Jnz(Constant(12)) [5, 5, 5, 0, 0, 0, 250, 43]
# PC:2b [5, 5, 5, 0, 0, 0, 250, 43] LoadLo(Constant(15)) [255, 5, 5, 0, 0, 0, 250, 43]
# PC:2c [255, 5, 5, 0, 0, 0, 250, 44] Add(SP) [249, 5, 5, 0, 0, 1, 250, 44]
# PC:2d [249, 5, 5, 0, 0, 1, 250, 45] StoreReg(SP) [249, 5, 5, 0, 0, 1, 249, 45]
# PC:2e [249, 5, 5, 0, 0, 1, 249, 46] LoadLo(Constant(2)) [2, 5, 5, 0, 0, 1, 249, 46]
# PC:2f [2, 5, 5, 0, 0, 1, 249, 47] Add(SP) [251, 5, 5, 0, 0, 0, 249, 47]
# PC:30 [251, 5, 5, 0, 0, 0, 249, 48] LoadMem(ACC) [5, 5, 5, 0, 0, 0, 249, 48]
# PC:31 [5, 5, 5, 0, 0, 0, 249, 49] StoreReg(C) [5, 5, 5, 0, 0, 0, 249, 49]
# PC:32 [5, 5, 5, 0, 0, 0, 249, 50] LoadLo(Constant(1)) [1, 5, 5, 0, 0, 0, 249, 50]
# PC:33 [1, 5, 5, 0, 0, 0, 249, 51] LoadHi(Constant(0)) [1, 5, 5, 0, 0, 0, 249, 51]
# PC:34 [1, 5, 5, 0, 0, 0, 249, 52] Not(ACC) [254, 5, 5, 0, 0, 0, 249, 52]
# PC:35 [254, 5, 5, 0, 0, 0, 249, 53] StoreReg(B) [254, 254, 5, 0, 0, 0, 249, 53]
# PC:36 [254, 254, 5, 0, 0, 0, 249, 54] LoadLo(Constant(1)) [1, 254, 5, 0, 0, 0, 249, 54]
# PC:37 [1, 254, 5, 0, 0, 0, 249, 55] Add(B) [255, 254, 5, 0, 0, 0, 249, 55]
# PC:38 [255, 254, 5, 0, 0, 0, 249, 56] Add(C) [4, 254, 5, 0, 0, 1, 249, 56]
# PC:39 [4, 254, 5, 0, 0, 1, 249, 57] StoreReg(B) [4, 4, 5, 0, 0, 1, 249, 57]
# PC:3a [4, 4, 5, 0, 0, 1, 249, 58] LoadLo(Constant(15)) [255, 4, 5, 0, 0, 1, 249, 58]
# PC:3b [255, 4, 5, 0, 0, 1, 249, 59] Add(SP) [248, 4, 5, 0, 0, 1, 249, 59]
# PC:3c [248, 4, 5, 0, 0, 1, 249, 60] StoreReg(SP) [248, 4, 5, 0, 0, 1, 248, 60]
# PC:3d [248, 4, 5, 0, 0, 1, 248, 61] LoadReg(B) [4, 4, 5, 0, 0, 1, 248, 61]
# PC:3e [4, 4, 5, 0, 0, 1, 248, 62] StoreMem(SP) [4, 4, 5, 0, 0, 1, 248, 62]
# PC:3f [4, 4, 5, 0, 0, 1, 248, 63] LoadLo(Constant(15)) [255, 4, 5, 0, 0, 1, 248, 63]
# PC:40 [255, 4, 5, 0, 0, 1, 248, 64] Add(SP) [247, 4, 5, 0, 0, 1, 248, 64]
# PC:41 [247, 4, 5, 0, 0, 1, 248, 65] StoreReg(SP) [247, 4, 5, 0, 0, 1, 247, 65]
# PC:42 [247, 4, 5, 0, 0, 1, 247, 66] LoadLo(Constant(5)) [5, 4, 5, 0, 0, 1, 247, 66]
# PC:43 [5, 4, 5, 0, 0, 1, 247, 67] Add(PC) [72, 4, 5, 0, 0, 0, 247, 67]
# PC:44 [72, 4, 5, 0, 0, 0, 247, 68] StoreMem(SP) [72, 4, 5, 0, 0, 0, 247, 68]
# PC:45 [72, 4, 5, 0, 0, 0, 247, 69] LoadLo(Constant(8)) [248, 4, 5, 0, 0, 0, 247, 69]
# PC:46 [248, 4, 5, 0, 0, 0, 247, 70] LoadHi(Constant(1)) [24, 4, 5, 0, 0, 0, 247, 70]
# PC:47 [24, 4, 5, 0, 0, 0, 247, 71] StoreReg(PC) [24, 4, 5, 0, 0, 0, 247, 24]
# PC:18 [24, 4, 5, 0, 0, 0, 247, 24] LoadLo(Constant(1)) [1, 4, 5, 0, 0, 0, 247, 24]
# PC:19 [1, 4, 5, 0, 0, 0, 247, 25] Add(SP) [248, 4, 5, 0, 0, 0, 247, 25]
# PC:1a [248, 4, 5, 0, 0, 0, 247, 26] LoadMem(ACC) [4, 4, 5, 0, 0, 0, 247, 26]
# PC:1b [4, 4, 5, 0, 0, 0, 247, 27] StoreReg(C) [4, 4, 4, 0, 0, 0, 247, 27]
# PC:1c [4, 4, 4, 0, 0, 0, 247, 28] LoadLo(Constant(0)) [0, 4, 4, 0, 0, 0, 247, 28]
# PC:1d [0, 4, 4, 0, 0, 0, 247, 29] LoadHi(Constant(0)) [0, 4, 4, 0, 0, 0, 247, 29]
# PC:1e [0, 4, 4, 0, 0, 0, 247, 30] Xor(C) [4, 4, 4, 0, 0, 0, 247, 30]
# PC:1f [4, 4, 4, 0, 0, 0, 247, 31] Jnz(Constant(12)) [4, 4, 4, 0, 0, 0, 247, 43]
# PC:2b [4, 4, 4, 0, 0, 0, 247, 43] LoadLo(Constant(15)) [255, 4, 4, 0, 0, 0, 247, 43]
# PC:2c [255, 4, 4, 0, 0, 0, 247, 44] Add(SP) [246, 4, 4, 0, 0, 1, 247, 44]
# PC:2d [246, 4, 4, 0, 0, 1, 247, 45] StoreReg(SP) [246, 4, 4, 0, 0, 1, 246, 45]
# PC:2e [246, 4, 4, 0, 0, 1, 246, 46] LoadLo(Constant(2)) [2, 4, 4, 0, 0, 1, 246, 46]
# PC:2f [2, 4, 4, 0, 0, 1, 246, 47] Add(SP) [248, 4, 4, 0, 0, 0, 246, 47]
# PC:30 [248, 4, 4, 0, 0, 0, 246, 48] LoadMem(ACC) [4, 4, 4, 0, 0, 0, 246, 48]
# PC:31 [4, 4, 4, 0, 0, 0, 246, 49] StoreReg(C) [4, 4, 4, 0, 0, 0, 246, 49]
# PC:32 [4, 4, 4, 0, 0, 0, 246, 50] LoadLo(Constant(1)) [1, 4, 4, 0, 0, 0, 246, 50]
# PC:33 [1, 4, 4, 0, 0, 0, 246, 51] LoadHi(Constant(0)) [1, 4, 4, 0, 0, 0, 246, 51]
# PC:34 [1, 4, 4, 0, 0, 0, 246, 52] Not(ACC) [254, 4, 4, 0, 0, 0, 246, 52]
# PC:35 [254, 4, 4, 0, 0, 0, 246, 53] StoreReg(B) [254, 254, 4, 0, 0, 0, 246, 53]
# PC:36 [254, 254, 4, 0, 0, 0, 246, 54] LoadLo(Constant(1)) [1, 254, 4, 0, 0, 0, 246, 54]
# PC:37 [1, 254, 4, 0, 0, 0, 246, 55] Add(B) [255, 254, 4, 0, 0, 0, 246, 55]
# PC:38 [255, 254, 4, 0, 0, 0, 246, 56] Add(C) [3, 254, 4, 0, 0, 1, 246, 56]
# PC:39 [3, 254, 4, 0, 0, 1, 246, 57] StoreReg(B) [3, 3, 4, 0, 0, 1, 246, 57]
# PC:3a [3, 3, 4, 0, 0, 1, 246, 58] LoadLo(Constant(15)) [255, 3, 4, 0, 0, 1, 246, 58]
# PC:3b [255, 3, 4, 0, 0, 1, 246, 59] Add(SP) [245, 3, 4, 0, 0, 1, 246, 59]
# PC:3c [245, 3, 4, 0, 0, 1, 246, 60] StoreReg(SP) [245, 3, 4, 0, 0, 1, 245, 60]
# PC:3d [245, 3, 4, 0, 0, 1, 245, 61] LoadReg(B) [3, 3, 4, 0, 0, 1, 245, 61]
# PC:3e [3, 3, 4, 0, 0, 1, 245, 62] StoreMem(SP) [3, 3, 4, 0, 0, 1, 245, 62]
# PC:3f [3, 3, 4, 0, 0, 1, 245, 63] LoadLo(Constant(15)) [255, 3, 4, 0, 0, 1, 245, 63]
# PC:40 [255, 3, 4, 0, 0, 1, 245, 64] Add(SP) [244, 3, 4, 0, 0, 1, 245, 64]
# PC:41 [244, 3, 4, 0, 0, 1, 245, 65] StoreReg(SP) [244, 3, 4, 0, 0, 1, 244, 65]
# PC:42 [244, 3, 4, 0, 0, 1, 244, 66] LoadLo(Constant(5)) [5, 3, 4, 0, 0, 1, 244, 66]
# PC:43 [5, 3, 4, 0, 0, 1, 244, 67] Add(PC) [72, 3, 4, 0, 0, 0, 244, 67]
# PC:44 [72, 3, 4, 0, 0, 0, 244, 68] StoreMem(SP) [72, 3, 4, 0, 0, 0, 244, 68]
# PC:45 [72, 3, 4, 0, 0, 0, 244, 69] LoadLo(Constant(8)) [248, 3, 4, 0, 0, 0, 244, 69]
# PC:46 [248, 3, 4, 0, 0, 0, 244, 70] LoadHi(Constant(1)) [24, 3, 4, 0, 0, 0, 244, 70]
# PC:47 [24, 3, 4, 0, 0, 0, 244, 71] StoreReg(PC) [24, 3, 4, 0, 0, 0, 244, 24]
# PC:18 [24, 3, 4, 0, 0, 0, 244, 24] LoadLo(Constant(1)) [1, 3, 4, 0, 0, 0, 244, 24]
# PC:19 [1, 3, 4, 0, 0, 0, 244, 25] Add(SP) [245, 3, 4, 0, 0, 0, 244, 25]
# PC:1a [245, 3, 4, 0, 0, 0, 244, 26] LoadMem(ACC) [3, 3, 4, 0, 0, 0, 244, 26]
# PC:1b [3, 3, 4, 0, 0, 0, 244, 27] StoreReg(C) [3, 3, 3, 0, 0, 0, 244, 27]
# PC:1c [3, 3, 3, 0, 0, 0, 244, 28] LoadLo(Constant(0)) [0, 3, 3, 0, 0, 0, 244, 28]
# PC:1d [0, 3, 3, 0, 0, 0, 244, 29] LoadHi(Constant(0)) [0, 3, 3, 0, 0, 0, 244, 29]
# PC:1e [0, 3, 3, 0, 0, 0, 244, 30] Xor(C) [3, 3, 3, 0, 0, 0, 244, 30]
# PC:1f [3, 3, 3, 0, 0, 0, 244, 31] Jnz(Constant(12)) [3, 3, 3, 0, 0, 0, 244, 43]
# PC:2b [3, 3, 3, 0, 0, 0, 244, 43] LoadLo(Constant(15)) [255, 3, 3, 0, 0, 0, 244, 43]
# PC:2c [255, 3, 3, 0, 0, 0, 244, 44] Add(SP) [243, 3, 3, 0, 0, 1, 244, 44]
# PC:2d [243, 3, 3, 0, 0, 1, 244, 45] StoreReg(SP) [243, 3, 3, 0, 0, 1, 243, 45]
# PC:2e [243, 3, 3, 0, 0, 1, 243, 46] LoadLo(Constant(2)) [2, 3, 3, 0, 0, 1, 243, 46]
# PC:2f [2, 3, 3, 0, 0, 1, 243, 47] Add(SP) [245, 3, 3, 0, 0, 0, 243, 47]
# PC:30 [245, 3, 3, 0, 0, 0, 243, 48] LoadMem(ACC) [3, 3, 3, 0, 0, 0, 243, 48]
# PC:31 [3, 3, 3, 0, 0, 0, 243, 49] StoreReg(C) [3, 3, 3, 0, 0, 0, 243, 49]
# PC:32 [3, 3, 3, 0, 0, 0, 243, 50] LoadLo(Constant(1)) [1, 3, 3, 0, 0, 0, 243, 50]
# PC:33 [1, 3, 3, 0, 0, 0, 243, 51] LoadHi(Constant(0)) [1, 3, 3, 0, 0, 0, 243, 51]
# PC:34 [1, 3, 3, 0, 0, 0, 243, 52] Not(ACC) [254, 3, 3, 0, 0, 0, 243, 52]
# PC:35 [254, 3, 3, 0, 0, 0, 243, 53] StoreReg(B) [254, 254, 3, 0, 0, 0, 243, 53]
# PC:36 [254, 254, 3, 0, 0, 0, 243, 54] LoadLo(Constant(1)) [1, 254, 3, 0, 0, 0, 243, 54]
# PC:37 [1, 254, 3, 0, 0, 0, 243, 55] Add(B) [255, 254, 3, 0, 0, 0, 243, 55]
# PC:38 [255, 254, 3, 0, 0, 0, 243, 56] Add(C) [2, 254, 3, 0, 0, 1, 243, 56]
# PC:39 [2, 254, 3, 0, 0, 1, 243, 57] StoreReg(B) [2, 2, 3, 0, 0, 1, 243, 57]
# PC:3a [2, 2, 3, 0, 0, 1, 243, 58] LoadLo(Constant(15)) [255, 2, 3, 0, 0, 1, 243, 58]
# PC:3b [255, 2, 3, 0, 0, 1, 243, 59] Add(SP) [242, 2, 3, 0, 0, 1, 243, 59]
# PC:3c [242, 2, 3, 0, 0, 1, 243, 60] StoreReg(SP) [242, 2, 3, 0, 0, 1, 242, 60]
# PC:3d [242, 2, 3, 0, 0, 1, 242, 61] LoadReg(B) [2, 2, 3, 0, 0, 1, 242, 61]
# PC:3e [2, 2, 3, 0, 0, 1, 242, 62] StoreMem(SP) [2, 2, 3, 0, 0, 1, 242, 62]
# PC:3f [2, 2, 3, 0, 0, 1, 242, 63] LoadLo(Constant(15)) [255, 2, 3, 0, 0, 1, 242, 63]
# PC:40 [255, 2, 3, 0, 0, 1, 242, 64] Add(SP) [241, 2, 3, 0, 0, 1, 242, 64]
# PC:41 [241, 2, 3, 0, 0, 1, 242, 65] StoreReg(SP) [241, 2, 3, 0, 0, 1, 241, 65]
# PC:42 [241, 2, 3, 0, 0, 1, 241, 66] LoadLo(Constant(5)) [5, 2, 3, 0, 0, 1, 241, 66]
# PC:43 [5, 2, 3, 0, 0, 1, 241, 67] Add(PC) [72, 2, 3, 0, 0, 0, 241, 67]
# PC:44 [72, 2, 3, 0, 0, 0, 241, 68] StoreMem(SP) [72, 2, 3, 0, 0, 0, 241, 68]
# PC:45 [72, 2, 3, 0, 0, 0, 241, 69] LoadLo(Constant(8)) [248, 2, 3, 0, 0, 0, 241, 69]
# PC:46 [248, 2, 3, 0, 0, 0, 241, 70] LoadHi(Constant(1)) [24, 2, 3, 0, 0, 0, 241, 70]
# PC:47 [24, 2, 3, 0, 0, 0, 241, 71] StoreReg(PC) [24, 2, 3, 0, 0, 0, 241, 24]
# PC:18 [24, 2, 3, 0, 0, 0, 241, 24] LoadLo(Constant(1)) [1, 2, 3, 0, 0, 0, 241, 24]
# PC:19 [1, 2, 3, 0, 0, 0, 241, 25] Add(SP) [242, 2, 3, 0, 0, 0, 241, 25]
# PC:1a [242, 2, 3, 0, 0, 0, 241, 26] LoadMem(ACC) [2, 2, 3, 0, 0, 0, 241, 26]
# PC:1b [2, 2, 3, 0, 0, 0, 241, 27] StoreReg(C) [2, 2, 2, 0, 0, 0, 241, 27]
# PC:1c [2, 2, 2, 0, 0, 0, 241, 28] LoadLo(Constant(0)) [0, 2, 2, 0, 0, 0, 241, 28]
# PC:1d [0, 2, 2, 0, 0, 0, 241, 29] LoadHi(Constant(0)) [0, 2, 2, 0, 0, 0, 241, 29]
# PC:1e [0, 2, 2, 0, 0, 0, 241, 30] Xor(C) [2, 2, 2, 0, 0, 0, 241, 30]
# PC:1f [2, 2, 2, 0, 0, 0, 241, 31] Jnz(Constant(12)) [2, 2, 2, 0, 0, 0, 241, 43]
# PC:2b [2, 2, 2, 0, 0, 0, 241, 43] LoadLo(Constant(15)) [255, 2, 2, 0, 0, 0, 241, 43]
# PC:2c [255, 2, 2, 0, 0, 0, 241, 44] Add(SP) [240, 2, 2, 0, 0, 1, 241, 44]
# PC:2d [240, 2, 2, 0, 0, 1, 241, 45] StoreReg(SP) [240, 2, 2, 0, 0, 1, 240, 45]
# PC:2e [240, 2, 2, 0, 0, 1, 240, 46] LoadLo(Constant(2)) [2, 2, 2, 0, 0, 1, 240, 46]
# PC:2f [2, 2, 2, 0, 0, 1, 240, 47] Add(SP) [242, 2, 2, 0, 0, 0, 240, 47]
# PC:30 [242, 2, 2, 0, 0, 0, 240, 48] LoadMem(ACC) [2, 2, 2, 0, 0, 0, 240, 48]
# PC:31 [2, 2, 2, 0, 0, 0, 240, 49] StoreReg(C) [2, 2, 2, 0, 0, 0, 240, 49]
# PC:32 [2, 2, 2, 0, 0, 0, 240, 50] LoadLo(Constant(1)) [1, 2, 2, 0, 0, 0, 240, 50]
# PC:33 [1, 2, 2, 0, 0, 0, 240, 51] LoadHi(Constant(0)) [1, 2, 2, 0, 0, 0, 240, 51]
# PC:34 [1, 2, 2, 0, 0, 0, 240, 52] Not(ACC) [254, 2, 2, 0, 0, 0, 240, 52]
# PC:35 [254, 2, 2, 0, 0, 0, 240, 53] StoreReg(B) [254, 254, 2, 0, 0, 0, 240, 53]
# PC:36 [254, 254, 2, 0, 0, 0, 240, 54] LoadLo(Constant(1)) [1, 254, 2, 0, 0, 0, 240, 54]
# PC:37 [1, 254, 2, 0, 0, 0, 240, 55] Add(B) [255, 254, 2, 0, 0, 0, 240, 55]
# PC:38 [255, 254, 2, 0, 0, 0, 240, 56] Add(C) [1, 254, 2, 0, 0, 1, 240, 56]
# PC:39 [1, 254, 2, 0, 0, 1, 240, 57] StoreReg(B) [1, 1, 2, 0, 0, 1, 240, 57]
# PC:3a [1, 1, 2, 0, 0, 1, 240, 58] LoadLo(Constant(15)) [255, 1, 2, 0, 0, 1, 240, 58]
# PC:3b [255, 1, 2, 0, 0, 1, 240, 59] Add(SP) [239, 1, 2, 0, 0, 1, 240, 59]
# PC:3c [239, 1, 2, 0, 0, 1, 240, 60] StoreReg(SP) [239, 1, 2, 0, 0, 1, 239, 60]
# PC:3d [239, 1, 2, 0, 0, 1, 239, 61] LoadReg(B) [1, 1, 2, 0, 0, 1, 239, 61]
# PC:3e [1, 1, 2, 0, 0, 1, 239, 62] StoreMem(SP) [1, 1, 2, 0, 0, 1, 239, 62]
# PC:3f [1, 1, 2, 0, 0, 1, 239, 63] LoadLo(Constant(15)) [255, 1, 2, 0, 0, 1, 239, 63]
# PC:40 [255, 1, 2, 0, 0, 1, 239, 64] Add(SP) [238, 1, 2, 0, 0, 1, 239, 64]
# PC:41 [238, 1, 2, 0, 0, 1, 239, 65] StoreReg(SP) [238, 1, 2, 0, 0, 1, 238, 65]
# PC:42 [238, 1, 2, 0, 0, 1, 238, 66] LoadLo(Constant(5)) [5, 1, 2, 0, 0, 1, 238, 66]
# PC:43 [5, 1, 2, 0, 0, 1, 238, 67] Add(PC) [72, 1, 2, 0, 0, 0, 238, 67]
# PC:44 [72, 1, 2, 0, 0, 0, 238, 68] StoreMem(SP) [72, 1, 2, 0, 0, 0, 238, 68]
# PC:45 [72, 1, 2, 0, 0, 0, 238, 69] LoadLo(Constant(8)) [248, 1, 2, 0, 0, 0, 238, 69]
# PC:46 [248, 1, 2, 0, 0, 0, 238, 70] LoadHi(Constant(1)) [24, 1, 2, 0, 0, 0, 238, 70]
# PC:47 [24, 1, 2, 0, 0, 0, 238, 71] StoreReg(PC) [24, 1, 2, 0, 0, 0, 238, 24]
# PC:18 [24, 1, 2, 0, 0, 0, 238, 24] LoadLo(Constant(1)) [1, 1, 2, 0, 0, 0, 238, 24]
# PC:19 [1, 1, 2, 0, 0, 0, 238, 25] Add(SP) [239, 1, 2, 0, 0, 0, 238, 25]
# PC:1a [239, 1, 2, 0, 0, 0, 238, 26] LoadMem(ACC) [1, 1, 2, 0, 0, 0, 238, 26]
# PC:1b [1, 1, 2, 0, 0, 0, 238, 27] StoreReg(C) [1, 1, 1, 0, 0, 0, 238, 27]
# PC:1c [1, 1, 1, 0, 0, 0, 238, 28] LoadLo(Constant(0)) [0, 1, 1, 0, 0, 0, 238, 28]
# PC:1d [0, 1, 1, 0, 0, 0, 238, 29] LoadHi(Constant(0)) [0, 1, 1, 0, 0, 0, 238, 29]
# PC:1e [0, 1, 1, 0, 0, 0, 238, 30] Xor(C) [1, 1, 1, 0, 0, 0, 238, 30]
# PC:1f [1, 1, 1, 0, 0, 0, 238, 31] Jnz(Constant(12)) [1, 1, 1, 0, 0, 0, 238, 43]
# PC:2b [1, 1, 1, 0, 0, 0, 238, 43] LoadLo(Constant(15)) [255, 1, 1, 0, 0, 0, 238, 43]
# PC:2c [255, 1, 1, 0, 0, 0, 238, 44] Add(SP) [237, 1, 1, 0, 0, 1, 238, 44]
# PC:2d [237, 1, 1, 0, 0, 1, 238, 45] StoreReg(SP) [237, 1, 1, 0, 0, 1, 237, 45]
# PC:2e [237, 1, 1, 0, 0, 1, 237, 46] LoadLo(Constant(2)) [2, 1, 1, 0, 0, 1, 237, 46]
# PC:2f [2, 1, 1, 0, 0, 1, 237, 47] Add(SP) [239, 1, 1, 0, 0, 0, 237, 47]
# PC:30 [239, 1, 1, 0, 0, 0, 237, 48] LoadMem(ACC) [1, 1, 1, 0, 0, 0, 237, 48]
# PC:31 [1, 1, 1, 0, 0, 0, 237, 49] StoreReg(C) [1, 1, 1, 0, 0, 0, 237, 49]
# PC:32 [1, 1, 1, 0, 0, 0, 237, 50] LoadLo(Constant(1)) [1, 1, 1, 0, 0, 0, 237, 50]
# PC:33 [1, 1, 1, 0, 0, 0, 237, 51] LoadHi(Constant(0)) [1, 1, 1, 0, 0, 0, 237, 51]
# PC:34 [1, 1, 1, 0, 0, 0, 237, 52] Not(ACC) [254, 1, 1, 0, 0, 0, 237, 52]
# PC:35 [254, 1, 1, 0, 0, 0, 237, 53] StoreReg(B) [254, 254, 1, 0, 0, 0, 237, 53]
# PC:36 [254, 254, 1, 0, 0, 0, 237, 54] LoadLo(Constant(1)) [1, 254, 1, 0, 0, 0, 237, 54]
# PC:37 [1, 254, 1, 0, 0, 0, 237, 55] Add(B) [255, 254, 1, 0, 0, 0, 237, 55]
# PC:38 [255, 254, 1, 0, 0, 0, 237, 56] Add(C) [0, 254, 1, 0, 0, 1, 237, 56]
# PC:39 [0, 254, 1, 0, 0, 1, 237, 57] StoreReg(B) [0, 0, 1, 0, 0, 1, 237, 57]
# PC:3a [0, 0, 1, 0, 0, 1, 237, 58] LoadLo(Constant(15)) [255, 0, 1, 0, 0, 1, 237, 58]
# PC:3b [255, 0, 1, 0, 0, 1, 237, 59] Add(SP) [236, 0, 1, 0, 0, 1, 237, 59]
# PC:3c [236, 0, 1, 0, 0, 1, 237, 60] StoreReg(SP) [236, 0, 1, 0, 0, 1, 236, 60]
# PC:3d [236, 0, 1, 0, 0, 1, 236, 61] LoadReg(B) [0, 0, 1, 0, 0, 1, 236, 61]
# PC:3e [0, 0, 1, 0, 0, 1, 236, 62] StoreMem(SP) [0, 0, 1, 0, 0, 1, 236, 62]
# PC:3f [0, 0, 1, 0, 0, 1, 236, 63] LoadLo(Constant(15)) [255, 0, 1, 0, 0, 1, 236, 63]
# PC:40 [255, 0, 1, 0, 0, 1, 236, 64] Add(SP) [235, 0, 1, 0, 0, 1, 236, 64]
# PC:41 [235, 0, 1, 0, 0, 1, 236, 65] StoreReg(SP) [235, 0, 1, 0, 0, 1, 235, 65]
# PC:42 [235, 0, 1, 0, 0, 1, 235, 66] LoadLo(Constant(5)) [5, 0, 1, 0, 0, 1, 235, 66]
# PC:43 [5, 0, 1, 0, 0, 1, 235, 67] Add(PC) [72, 0, 1, 0, 0, 0, 235, 67]
# PC:44 [72, 0, 1, 0, 0, 0, 235, 68] StoreMem(SP) [72, 0, 1, 0, 0, 0, 235, 68]
# PC:45 [72, 0, 1, 0, 0, 0, 235, 69] LoadLo(Constant(8)) [248, 0, 1, 0, 0, 0, 235, 69]
# PC:46 [248, 0, 1, 0, 0, 0, 235, 70] LoadHi(Constant(1)) [24, 0, 1, 0, 0, 0, 235, 70]
# PC:47 [24, 0, 1, 0, 0, 0, 235, 71] StoreReg(PC) [24, 0, 1, 0, 0, 0, 235, 24]
# PC:18 [24, 0, 1, 0, 0, 0, 235, 24] LoadLo(Constant(1)) [1, 0, 1, 0, 0, 0, 235, 24]
# PC:19 [1, 0, 1, 0, 0, 0, 235, 25] Add(SP) [236, 0, 1, 0, 0, 0, 235, 25]
# PC:1a [236, 0, 1, 0, 0, 0, 235, 26] LoadMem(ACC) [0, 0, 1, 0, 0, 0, 235, 26]
# PC:1b [0, 0, 1, 0, 0, 0, 235, 27] StoreReg(C) [0, 0, 0, 0, 0, 0, 235, 27]
# PC:1c [0, 0, 0, 0, 0, 0, 235, 28] LoadLo(Constant(0)) [0, 0, 0, 0, 0, 0, 235, 28]
# PC:1d [0, 0, 0, 0, 0, 0, 235, 29] LoadHi(Constant(0)) [0, 0, 0, 0, 0, 0, 235, 29]
# PC:1e [0, 0, 0, 0, 0, 0, 235, 30] Xor(C) [0, 0, 0, 0, 0, 0, 235, 30]
# PC:1f [0, 0, 0, 0, 0, 0, 235, 31] Jnz(Constant(12)) [0, 0, 0, 0, 0, 0, 235, 31]
# PC:20 [0, 0, 0, 0, 0, 0, 235, 32] LoadLo(Constant(1)) [1, 0, 0, 0, 0, 0, 235, 32]
# PC:21 [1, 0, 0, 0, 0, 0, 235, 33] LoadHi(Constant(0)) [1, 0, 0, 0, 0, 0, 235, 33]
# PC:22 [1, 0, 0, 0, 0, 0, 235, 34] StoreReg(B) [1, 1, 0, 0, 0, 0, 235, 34]
# PC:23 [1, 1, 0, 0, 0, 0, 235, 35] LoadLo(Constant(2)) [2, 1, 0, 0, 0, 0, 235, 35]
# PC:24 [2, 1, 0, 0, 0, 0, 235, 36] Add(SP) [237, 1, 0, 0, 0, 0, 235, 36]
# PC:25 [237, 1, 0, 0, 0, 0, 235, 37] StoreReg(C) [237, 1, 237, 0, 0, 0, 235, 37]
# PC:26 [237, 1, 237, 0, 0, 0, 235, 38] LoadReg(B) [1, 1, 237, 0, 0, 0, 235, 38]
# PC:27 [1, 1, 237, 0, 0, 0, 235, 39] StoreMem(C) [1, 1, 237, 0, 0, 0, 235, 39]
# PC:28 [1, 1, 237, 0, 0, 0, 235, 40] LoadLo(Constant(6)) [6, 1, 237, 0, 0, 0, 235, 40]
# PC:29 [6, 1, 237, 0, 0, 0, 235, 41] LoadHi(Constant(6)) [102, 1, 237, 0, 0, 0, 235, 41]
# PC:2a [102, 1, 237, 0, 0, 0, 235, 42] StoreReg(PC) [102, 1, 237, 0, 0, 0, 235, 102]
# PC:66 [102, 1, 237, 0, 0, 0, 235, 102] LoadMem(SP) [72, 1, 237, 0, 0, 0, 235, 102]
# PC:67 [72, 1, 237, 0, 0, 0, 235, 103] StoreReg(PC) [72, 1, 237, 0, 0, 0, 235, 72]
# PC:48 [72, 1, 237, 0, 0, 0, 235, 72] LoadLo(Constant(1)) [1, 1, 237, 0, 0, 0, 235, 72]
# PC:49 [1, 1, 237, 0, 0, 0, 235, 73] Add(SP) [236, 1, 237, 0, 0, 0, 235, 73]
# PC:4a [236, 1, 237, 0, 0, 0, 235, 74] StoreReg(SP) [236, 1, 237, 0, 0, 0, 236, 74]
# PC:4b [236, 1, 237, 0, 0, 0, 236, 75] LoadLo(Constant(1)) [1, 1, 237, 0, 0, 0, 236, 75]
# PC:4c [1, 1, 237, 0, 0, 0, 236, 76] Add(SP) [237, 1, 237, 0, 0, 0, 236, 76]
# PC:4d [237, 1, 237, 0, 0, 0, 236, 77] StoreReg(SP) [237, 1, 237, 0, 0, 0, 237, 77]
# PC:4e [237, 1, 237, 0, 0, 0, 237, 78] LoadMem(SP) [1, 1, 237, 0, 0, 0, 237, 78]
# PC:4f [1, 1, 237, 0, 0, 0, 237, 79] StoreReg(B) [1, 1, 237, 0, 0, 0, 237, 79]
# PC:50 [1, 1, 237, 0, 0, 0, 237, 80] LoadLo(Constant(1)) [1, 1, 237, 0, 0, 0, 237, 80]
# PC:51 [1, 1, 237, 0, 0, 0, 237, 81] Add(SP) [238, 1, 237, 0, 0, 0, 237, 81]
# PC:52 [238, 1, 237, 0, 0, 0, 237, 82] StoreReg(SP) [238, 1, 237, 0, 0, 0, 238, 82]
# PC:53 [238, 1, 237, 0, 0, 0, 238, 83] LoadReg(B) [1, 1, 237, 0, 0, 0, 238, 83]
# PC:54 [1, 1, 237, 0, 0, 0, 238, 84] StoreReg(D) [1, 1, 237, 1, 0, 0, 238, 84]
# PC:55 [1, 1, 237, 1, 0, 0, 238, 85] LoadLo(Constant(1)) [1, 1, 237, 1, 0, 0, 238, 85]
# PC:56 [1, 1, 237, 1, 0, 0, 238, 86] Add(SP) [239, 1, 237, 1, 0, 0, 238, 86]
# PC:57 [239, 1, 237, 1, 0, 0, 238, 87] LoadMem(ACC) [1, 1, 237, 1, 0, 0, 238, 87]
# PC:58 [1, 1, 237, 1, 0, 0, 238, 88] StoreReg(C) [1, 1, 1, 1, 0, 0, 238, 88]
# PC:59 [1, 1, 1, 1, 0, 0, 238, 89] LoadReg(D) [1, 1, 1, 1, 0, 0, 238, 89]
# PC:5a [1, 1, 1, 1, 0, 0, 238, 90] Mul(C) [1, 1, 1, 1, 0, 0, 238, 90]
# PC:5b [1, 1, 1, 1, 0, 0, 238, 91] StoreReg(D) [1, 1, 1, 1, 0, 0, 238, 91]
# PC:5c [1, 1, 1, 1, 0, 0, 238, 92] LoadReg(D) [1, 1, 1, 1, 0, 0, 238, 92]
# PC:5d [1, 1, 1, 1, 0, 0, 238, 93] StoreReg(B) [1, 1, 1, 1, 0, 0, 238, 93]
# PC:5e [1, 1, 1, 1, 0, 0, 238, 94] LoadLo(Constant(2)) [2, 1, 1, 1, 0, 0, 238, 94]
# PC:5f [2, 1, 1, 1, 0, 0, 238, 95] Add(SP) [240, 1, 1, 1, 0, 0, 238, 95]
# PC:60 [240, 1, 1, 1, 0, 0, 238, 96] StoreReg(C) [240, 1, 240, 1, 0, 0, 238, 96]
# PC:61 [240, 1, 240, 1, 0, 0, 238, 97] LoadReg(B) [1, 1, 240, 1, 0, 0, 238, 97]
# PC:62 [1, 1, 240, 1, 0, 0, 238, 98] StoreMem(C) [1, 1, 240, 1, 0, 0, 238, 98]
# PC:63 [1, 1, 240, 1, 0, 0, 238, 99] LoadLo(Constant(6)) [6, 1, 240, 1, 0, 0, 238, 99]
# PC:64 [6, 1, 240, 1, 0, 0, 238, 100] LoadHi(Constant(6)) [102, 1, 240, 1, 0, 0, 238, 100]
# PC:65 [102, 1, 240, 1, 0, 0, 238, 101] StoreReg(PC) [102, 1, 240, 1, 0, 0, 238, 102]
# PC:66 [102, 1, 240, 1, 0, 0, 238, 102] LoadMem(SP) [72, 1, 240, 1, 0, 0, 238, 102]
# PC:67 [72, 1, 240, 1, 0, 0, 238, 103] StoreReg(PC) [72, 1, 240, 1, 0, 0, 238, 72]
# PC:48 [72, 1, 240, 1, 0, 0, 238, 72] LoadLo(Constant(1)) [1, 1, 240, 1, 0, 0, 238, 72]
# PC:49 [1, 1, 240, 1, 0, 0, 238, 73] Add(SP) [239, 1, 240, 1, 0, 0, 238, 73]
# PC:4a [239, 1, 240, 1, 0, 0, 238, 74] StoreReg(SP) [239, 1, 240, 1, 0, 0, 239, 74]
# PC:4b [239, 1, 240, 1, 0, 0, 239, 75] LoadLo(Constant(1)) [1, 1, 240, 1, 0, 0, 239, 75]
# PC:4c [1, 1, 240, 1, 0, 0, 239, 76] Add(SP) [240, 1, 240, 1, 0, 0, 239, 76]
# PC:4d [240, 1, 240, 1, 0, 0, 239, 77] StoreReg(SP) [240, 1, 240, 1, 0, 0, 240, 77]
# PC:4e [240, 1, 240, 1, 0, 0, 240, 78] LoadMem(SP) [1, 1, 240, 1, 0, 0, 240, 78]
# PC:4f [1, 1, 240, 1, 0, 0, 240, 79] StoreReg(B) [1, 1, 240, 1, 0, 0, 240, 79]
# PC:50 [1, 1, 240, 1, 0, 0, 240, 80] LoadLo(Constant(1)) [1, 1, 240, 1, 0, 0, 240, 80]
# PC:51 [1, 1, 240, 1, 0, 0, 240, 81] Add(SP) [241, 1, 240, 1, 0, 0, 240, 81]
# PC:52 [241, 1, 240, 1, 0, 0, 240, 82] StoreReg(SP) [241, 1, 240, 1, 0, 0, 241, 82]
# PC:53 [241, 1, 240, 1, 0, 0, 241, 83] LoadReg(B) [1, 1, 240, 1, 0, 0, 241, 83]
# PC:54 [1, 1, 240, 1, 0, 0, 241, 84] StoreReg(D) [1, 1, 240, 1, 0, 0, 241, 84]
# PC:55 [1, 1, 240, 1, 0, 0, 241, 85] LoadLo(Constant(1)) [1, 1, 240, 1, 0, 0, 241, 85]
# PC:56 [1, 1, 240, 1, 0, 0, 241, 86] Add(SP) [242, 1, 240, 1, 0, 0, 241, 86]
# PC:57 [242, 1, 240, 1, 0, 0, 241, 87] LoadMem(ACC) [2, 1, 240, 1, 0, 0, 241, 87]
# PC:58 [2, 1, 240, 1, 0, 0, 241, 88] StoreReg(C) [2, 1, 2, 1, 0, 0, 241, 88]
# PC:59 [2, 1, 2, 1, 0, 0, 241, 89] LoadReg(D) [1, 1, 2, 1, 0, 0, 241, 89]
# PC:5a [1, 1, 2, 1, 0, 0, 241, 90] Mul(C) [2, 1, 2, 1, 0, 0, 241, 90]
# PC:5b [2, 1, 2, 1, 0, 0, 241, 91] StoreReg(D) [2, 1, 2, 2, 0, 0, 241, 91]
# PC:5c [2, 1, 2, 2, 0, 0, 241, 92] LoadReg(D) [2, 1, 2, 2, 0, 0, 241, 92]
# PC:5d [2, 1, 2, 2, 0, 0, 241, 93] StoreReg(B) [2, 2, 2, 2, 0, 0, 241, 93]
# PC:5e [2, 2, 2, 2, 0, 0, 241, 94] LoadLo(Constant(2)) [2, 2, 2, 2, 0, 0, 241, 94]
# PC:5f [2, 2, 2, 2, 0, 0, 241, 95] Add(SP) [243, 2, 2, 2, 0, 0, 241, 95]
# PC:60 [243, 2, 2, 2, 0, 0, 241, 96] StoreReg(C) [243, 2, 243, 2, 0, 0, 241, 96]
# PC:61 [243, 2, 243, 2, 0, 0, 241, 97] LoadReg(B) [2, 2, 243, 2, 0, 0, 241, 97]
# PC:62 [2, 2, 243, 2, 0, 0, 241, 98] StoreMem(C) [2, 2, 243, 2, 0, 0, 241, 98]
# PC:63 [2, 2, 243, 2, 0, 0, 241, 99] LoadLo(Constant(6)) [6, 2, 243, 2, 0, 0, 241, 99]
# PC:64 [6, 2, 243, 2, 0, 0, 241, 100] LoadHi(Constant(6)) [102, 2, 243, 2, 0, 0, 241, 100]
# PC:65 [102, 2, 243, 2, 0, 0, 241, 101] StoreReg(PC) [102, 2, 243, 2, 0, 0, 241, 102]
# PC:66 [102, 2, 243, 2, 0, 0, 241, 102] LoadMem(SP) [72, 2, 243, 2, 0, 0, 241, 102]
# PC:67 [72, 2, 243, 2, 0, 0, 241, 103] StoreReg(PC) [72, 2, 243, 2, 0, 0, 241, 72]
# PC:48 [72, 2, 243, 2, 0, 0, 241, 72] LoadLo(Constant(1)) [1, 2, 243, 2, 0, 0, 241, 72]
# PC:49 [1, 2, 243, 2, 0, 0, 241, 73] Add(SP) [242, 2, 243, 2, 0, 0, 241, 73]
# PC:4a [242, 2, 243, 2, 0, 0, 241, 74] StoreReg(SP) [242, 2, 243, 2, 0, 0, 242, 74]
# PC:4b [242, 2, 243, 2, 0, 0, 242, 75] LoadLo(Constant(1)) [1, 2, 243, 2, 0, 0, 242, 75]
# PC:4c [1, 2, 243, 2, 0, 0, 242, 76] Add(SP) [243, 2, 243, 2, 0, 0, 242, 76]
# PC:4d [243, 2, 243, 2, 0, 0, 242, 77] StoreReg(SP) [243, 2, 243, 2, 0, 0, 243, 77]
# PC:4e [243, 2, 243, 2, 0, 0, 243, 78] LoadMem(SP) [2, 2, 243, 2, 0, 0, 243, 78]
# PC:4f [2, 2, 243, 2, 0, 0, 243, 79] StoreReg(B) [2, 2, 243, 2, 0, 0, 243, 79]
# PC:50 [2, 2, 243, 2, 0, 0, 243, 80] LoadLo(Constant(1)) [1, 2, 243, 2, 0, 0, 243, 80]
# PC:51 [1, 2, 243, 2, 0, 0, 243, 81] Add(SP) [244, 2, 243, 2, 0, 0, 243, 81]
# PC:52 [244, 2, 243, 2, 0, 0, 243, 82] StoreReg(SP) [244, 2, 243, 2, 0, 0, 244, 82]
# PC:53 [244, 2, 243, 2, 0, 0, 244, 83] LoadReg(B) [2, 2, 243, 2, 0, 0, 244, 83]
# PC:54 [2, 2, 243, 2, 0, 0, 244, 84] StoreReg(D) [2, 2, 243, 2, 0, 0, 244, 84]
# PC:55 [2, 2, 243, 2, 0, 0, 244, 85] LoadLo(Constant(1)) [1, 2, 243, 2, 0, 0, 244, 85]
# PC:56 [1, 2, 243, 2, 0, 0, 244, 86] Add(SP) [245, 2, 243, 2, 0, 0, 244, 86]
# PC:57 [245, 2, 243, 2, 0, 0, 244, 87] LoadMem(ACC) [3, 2, 243, 2, 0, 0, 244, 87]
# PC:58 [3, 2, 243, 2, 0, 0, 244, 88] StoreReg(C) [3, 2, 3, 2, 0, 0, 244, 88]
# PC:59 [3, 2, 3, 2, 0, 0, 244, 89] LoadReg(D) [2, 2, 3, 2, 0, 0, 244, 89]
# PC:5a [2, 2, 3, 2, 0, 0, 244, 90] Mul(C) [6, 2, 3, 2, 0, 0, 244, 90]
# PC:5b [6, 2, 3, 2, 0, 0, 244, 91] StoreReg(D) [6, 2, 3, 6, 0, 0, 244, 91]
# PC:5c [6, 2, 3, 6, 0, 0, 244, 92] LoadReg(D) [6, 2, 3, 6, 0, 0, 244, 92]
# PC:5d [6, 2, 3, 6, 0, 0, 244, 93] StoreReg(B) [6, 6, 3, 6, 0, 0, 244, 93]
# PC:5e [6, 6, 3, 6, 0, 0, 244, 94] LoadLo(Constant(2)) [2, 6, 3, 6, 0, 0, 244, 94]
# PC:5f [2, 6, 3, 6, 0, 0, 244, 95] Add(SP) [246, 6, 3, 6, 0, 0, 244, 95]
# PC:60 [246, 6, 3, 6, 0, 0, 244, 96] StoreReg(C) [246, 6, 246, 6, 0, 0, 244, 96]
# PC:61 [246, 6, 246, 6, 0, 0, 244, 97] LoadReg(B) [6, 6, 246, 6, 0, 0, 244, 97]
# PC:62 [6, 6, 246, 6, 0, 0, 244, 98] StoreMem(C) [6, 6, 246, 6, 0, 0, 244, 98]
# PC:63 [6, 6, 246, 6, 0, 0, 244, 99] LoadLo(Constant(6)) [6, 6, 246, 6, 0, 0, 244, 99]
# PC:64 [6, 6, 246, 6, 0, 0, 244, 100] LoadHi(Constant(6)) [102, 6, 246, 6, 0, 0, 244, 100]
# PC:65 [102, 6, 246, 6, 0, 0, 244, 101] StoreReg(PC) [102, 6, 246, 6, 0, 0, 244, 102]
# PC:66 [102, 6, 246, 6, 0, 0, 244, 102] LoadMem(SP) [72, 6, 246, 6, 0, 0, 244, 102]
# PC:67 [72, 6, 246, 6, 0, 0, 244, 103] StoreReg(PC) [72, 6, 246, 6, 0, 0, 244, 72]
# PC:48 [72, 6, 246, 6, 0, 0, 244, 72] LoadLo(Constant(1)) [1, 6, 246, 6, 0, 0, 244, 72]
# PC:49 [1, 6, 246, 6, 0, 0, 244, 73] Add(SP) [245, 6, 246, 6, 0, 0, 244, 73]
# PC:4a [245, 6, 246, 6, 0, 0, 244, 74] StoreReg(SP) [245, 6, 246, 6, 0, 0, 245, 74]
# PC:4b [245, 6, 246, 6, 0, 0, 245, 75] LoadLo(Constant(1)) [1, 6, 246, 6, 0, 0, 245, 75]
# PC:4c [1, 6, 246, 6, 0, 0, 245, 76] Add(SP) [246, 6, 246, 6, 0, 0, 245, 76]
# PC:4d [246, 6, 246, 6, 0, 0, 245, 77] StoreReg(SP) [246, 6, 246, 6, 0, 0, 246, 77]
# PC:4e [246, 6, 246, 6, 0, 0, 246, 78] LoadMem(SP) [6, 6, 246, 6, 0, 0, 246, 78]
# PC:4f [6, 6, 246, 6, 0, 0, 246, 79] StoreReg(B) [6, 6, 246, 6, 0, 0, 246, 79]
# PC:50 [6, 6, 246, 6, 0, 0, 246, 80] LoadLo(Constant(1)) [1, 6, 246, 6, 0, 0, 246, 80]
# PC:51 [1, 6, 246, 6, 0, 0, 246, 81] Add(SP) [247, 6, 246, 6, 0, 0, 246, 81]
# PC:52 [247, 6, 246, 6, 0, 0, 246, 82] StoreReg(SP) [247, 6, 246, 6, 0, 0, 247, 82]
# PC:53 [247, 6, 246, 6, 0, 0, 247, 83] LoadReg(B) [6, 6, 246, 6, 0, 0, 247, 83]
# PC:54 [6, 6, 246, 6, 0, 0, 247, 84] StoreReg(D) [6, 6, 246, 6, 0, 0, 247, 84]
# PC:55 [6, 6, 246, 6, 0, 0, 247, 85] LoadLo(Constant(1)) [1, 6, 246, 6, 0, 0, 247, 85]
# PC:56 [1, 6, 246, 6, 0, 0, 247, 86] Add(SP) [248, 6, 246, 6, 0, 0, 247, 86]
# PC:57 [248, 6, 246, 6, 0, 0, 247, 87] LoadMem(ACC) [4, 6, 246, 6, 0, 0, 247, 87]
# PC:58 [4, 6, 246, 6, 0, 0, 247, 88] StoreReg(C) [4, 6, 4, 6, 0, 0, 247, 88]
# PC:59 [4, 6, 4, 6, 0, 0, 247, 89] LoadReg(D) [6, 6, 4, 6, 0, 0, 247, 89]
# PC:5a [6, 6, 4, 6, 0, 0, 247, 90] Mul(C) [24, 6, 4, 6, 0, 0, 247, 90]
# PC:5b [24, 6, 4, 6, 0, 0, 247, 91] StoreReg(D) [24, 6, 4, 24, 0, 0, 247, 91]
# PC:5c [24, 6, 4, 24, 0, 0, 247, 92] LoadReg(D) [24, 6, 4, 24, 0, 0, 247, 92]
# PC:5d [24, 6, 4, 24, 0, 0, 247, 93] StoreReg(B) [24, 24, 4, 24, 0, 0, 247, 93]
# PC:5e [24, 24, 4, 24, 0, 0, 247, 94] LoadLo(Constant(2)) [2, 24, 4, 24, 0, 0, 247, 94]
# PC:5f [2, 24, 4, 24, 0, 0, 247, 95] Add(SP) [249, 24, 4, 24, 0, 0, 247, 95]
# PC:60 [249, 24, 4, 24, 0, 0, 247, 96] StoreReg(C) [249, 24, 249, 24, 0, 0, 247, 96]
# PC:61 [249, 24, 249, 24, 0, 0, 247, 97] LoadReg(B) [24, 24, 249, 24, 0, 0, 247, 97]
# PC:62 [24, 24, 249, 24, 0, 0, 247, 98] StoreMem(C) [24, 24, 249, 24, 0, 0, 247, 98]
# PC:63 [24, 24, 249, 24, 0, 0, 247, 99] LoadLo(Constant(6)) [6, 24, 249, 24, 0, 0, 247, 99]
# PC:64 [6, 24, 249, 24, 0, 0, 247, 100] LoadHi(Constant(6)) [102, 24, 249, 24, 0, 0, 247, 100]
# PC:65 [102, 24, 249, 24, 0, 0, 247, 101] StoreReg(PC) [102, 24, 249, 24, 0, 0, 247, 102]
# PC:66 [102, 24, 249, 24, 0, 0, 247, 102] LoadMem(SP) [72, 24, 249, 24, 0, 0, 247, 102]
# PC:67 [72, 24, 249, 24, 0, 0, 247, 103] StoreReg(PC) [72, 24, 249, 24, 0, 0, 247, 72]
# PC:48 [72, 24, 249, 24, 0, 0, 247, 72] LoadLo(Constant(1)) [1, 24, 249, 24, 0, 0, 247, 72]
# PC:49 [1, 24, 249, 24, 0, 0, 247, 73] Add(SP) [248, 24, 249, 24, 0, 0, 247, 73]
# PC:4a [248, 24, 249, 24, 0, 0, 247, 74] StoreReg(SP) [248, 24, 249, 24, 0, 0, 248, 74]
# PC:4b [248, 24, 249, 24, 0, 0, 248, 75] LoadLo(Constant(1)) [1, 24, 249, 24, 0, 0, 248, 75]
# PC:4c [1, 24, 249, 24, 0, 0, 248, 76] Add(SP) [249, 24, 249, 24, 0, 0, 248, 76]
# PC:4d [249, 24, 249, 24, 0, 0, 248, 77] StoreReg(SP) [249, 24, 249, 24, 0, 0, 249, 77]
# PC:4e [249, 24, 249, 24, 0, 0, 249, 78] LoadMem(SP) [24, 24, 249, 24, 0, 0, 249, 78]
# PC:4f [24, 24, 249, 24, 0, 0, 249, 79] StoreReg(B) [24, 24, 249, 24, 0, 0, 249, 79]
# PC:50 [24, 24, 249, 24, 0, 0, 249, 80] LoadLo(Constant(1)) [1, 24, 249, 24, 0, 0, 249, 80]
# PC:51 [1, 24, 249, 24, 0, 0, 249, 81] Add(SP) [250, 24, 249, 24, 0, 0, 249, 81]
# PC:52 [250, 24, 249, 24, 0, 0, 249, 82] StoreReg(SP) [250, 24, 249, 24, 0, 0, 250, 82]
# PC:53 [250, 24, 249, 24, 0, 0, 250, 83] LoadReg(B) [24, 24, 249, 24, 0, 0, 250, 83]
# PC:54 [24, 24, 249, 24, 0, 0, 250, 84] StoreReg(D) [24, 24, 249, 24, 0, 0, 250, 84]
# PC:55 [24, 24, 249, 24, 0, 0, 250, 85] LoadLo(Constant(1)) [1, 24, 249, 24, 0, 0, 250, 85]
# PC:56 [1, 24, 249, 24, 0, 0, 250, 86] Add(SP) [251, 24, 249, 24, 0, 0, 250, 86]
# PC:57 [251, 24, 249, 24, 0, 0, 250, 87] LoadMem(ACC) [5, 24, 249, 24, 0, 0, 250, 87]
# PC:58 [5, 24, 249, 24, 0, 0, 250, 88] StoreReg(C) [5, 24, 5, 24, 0, 0, 250, 88]
# PC:59 [5, 24, 5, 24, 0, 0, 250, 89] LoadReg(D) [24, 24, 5, 24, 0, 0, 250, 89]
# PC:5a [24, 24, 5, 24, 0, 0, 250, 90] Mul(C) [120, 24, 5, 24, 0, 0, 250, 90]
# PC:5b [120, 24, 5, 24, 0, 0, 250, 91] StoreReg(D) [120, 24, 5, 120, 0, 0, 250, 91]
# PC:5c [120, 24, 5, 120, 0, 0, 250, 92] LoadReg(D) [120, 24, 5, 120, 0, 0, 250, 92]
# PC:5d [120, 24, 5, 120, 0, 0, 250, 93] StoreReg(B) [120, 120, 5, 120, 0, 0, 250, 93]
# PC:5e [120, 120, 5, 120, 0, 0, 250, 94] LoadLo(Constant(2)) [2, 120, 5, 120, 0, 0, 250, 94]
# PC:5f [2, 120, 5, 120, 0, 0, 250, 95] Add(SP) [252, 120, 5, 120, 0, 0, 250, 95]
# PC:60 [252, 120, 5, 120, 0, 0, 250, 96] StoreReg(C) [252, 120, 252, 120, 0, 0, 250, 96]
# PC:61 [252, 120, 252, 120, 0, 0, 250, 97] LoadReg(B) [120, 120, 252, 120, 0, 0, 250, 97]
# PC:62 [120, 120, 252, 120, 0, 0, 250, 98] StoreMem(C) [120, 120, 252, 120, 0, 0, 250, 98]
# PC:63 [120, 120, 252, 120, 0, 0, 250, 99] LoadLo(Constant(6)) [6, 120, 252, 120, 0, 0, 250, 99]
# PC:64 [6, 120, 252, 120, 0, 0, 250, 100] LoadHi(Constant(6)) [102, 120, 252, 120, 0, 0, 250, 100]
# PC:65 [102, 120, 252, 120, 0, 0, 250, 101] StoreReg(PC) [102, 120, 252, 120, 0, 0, 250, 102]
# PC:66 [102, 120, 252, 120, 0, 0, 250, 102] LoadMem(SP) [124, 120, 252, 120, 0, 0, 250, 102]
# PC:67 [124, 120, 252, 120, 0, 0, 250, 103] StoreReg(PC) [124, 120, 252, 120, 0, 0, 250, 124]
# PC:7c [124, 120, 252, 120, 0, 0, 250, 124] LoadLo(Constant(1)) [1, 120, 252, 120, 0, 0, 250, 124]
# PC:7d [1, 120, 252, 120, 0, 0, 250, 125] Add(SP) [251, 120, 252, 120, 0, 0, 250, 125]
# PC:7e [251, 120, 252, 120, 0, 0, 250, 126] StoreReg(SP) [251, 120, 252, 120, 0, 0, 251, 126]
# PC:7f [251, 120, 252, 120, 0, 0, 251, 127] LoadLo(Constant(1)) [1, 120, 252, 120, 0, 0, 251, 127]
# PC:80 [1, 120, 252, 120, 0, 0, 251, 128] Add(SP) [252, 120, 252, 120, 0, 0, 251, 128]
# PC:81 [252, 120, 252, 120, 0, 0, 251, 129] StoreReg(SP) [252, 120, 252, 120, 0, 0, 252, 129]
# PC:82 [252, 120, 252, 120, 0, 0, 252, 130] LoadMem(SP) [120, 120, 252, 120, 0, 0, 252, 130]
# PC:83 [120, 120, 252, 120, 0, 0, 252, 131] StoreReg(B) [120, 120, 252, 120, 0, 0, 252, 131]
# PC:84 [120, 120, 252, 120, 0, 0, 252, 132] LoadLo(Constant(1)) [1, 120, 252, 120, 0, 0, 252, 132]
# PC:85 [1, 120, 252, 120, 0, 0, 252, 133] Add(SP) [253, 120, 252, 120, 0, 0, 252, 133]
# PC:86 [253, 120, 252, 120, 0, 0, 252, 134] StoreReg(SP) [253, 120, 252, 120, 0, 0, 253, 134]
# PC:87 [253, 120, 252, 120, 0, 0, 253, 135] LoadReg(B) [120, 120, 252, 120, 0, 0, 253, 135]
# PC:88 [120, 120, 252, 120, 0, 0, 253, 136] StoreReg(D) [120, 120, 252, 120, 0, 0, 253, 136]
# PC:89 [120, 120, 252, 120, 0, 0, 253, 137] LoadReg(D) [120, 120, 252, 120, 0, 0, 253, 137]
# PC:8a [120, 120, 252, 120, 0, 0, 253, 138] StoreReg(B) [120, 120, 252, 120, 0, 0, 253, 138]
# PC:8b [120, 120, 252, 120, 0, 0, 253, 139] LoadLo(Constant(1)) [1, 120, 252, 120, 0, 0, 253, 139]
# PC:8c [1, 120, 252, 120, 0, 0, 253, 140] Add(SP) [254, 120, 252, 120, 0, 0, 253, 140]
# PC:8d [254, 120, 252, 120, 0, 0, 253, 141] StoreReg(C) [254, 120, 254, 120, 0, 0, 253, 141]
# PC:8e [254, 120, 254, 120, 0, 0, 253, 142] LoadReg(B) [120, 120, 254, 120, 0, 0, 253, 142]
# PC:8f [120, 120, 254, 120, 0, 0, 253, 143] StoreMem(C) [120, 120, 254, 120, 0, 0, 253, 143]
# PC:90 [120, 120, 254, 120, 0, 0, 253, 144] LoadLo(Constant(3)) [3, 120, 254, 120, 0, 0, 253, 144]
# PC:91 [3, 120, 254, 120, 0, 0, 253, 145] LoadHi(Constant(9)) [147, 120, 254, 120, 0, 0, 253, 145]
# PC:92 [147, 120, 254, 120, 0, 0, 253, 146] StoreReg(PC) [147, 120, 254, 120, 0, 0, 253, 147]
# PC:93 [147, 120, 254, 120, 0, 0, 253, 147] LoadMem(SP) [14, 120, 254, 120, 0, 0, 253, 147]
# PC:94 [14, 120, 254, 120, 0, 0, 253, 148] StoreReg(PC) [14, 120, 254, 120, 0, 0, 253, 14]
# PC:0e [14, 120, 254, 120, 0, 0, 253, 14] LoadLo(Constant(1)) [1, 120, 254, 120, 0, 0, 253, 14]
# PC:0f [1, 120, 254, 120, 0, 0, 253, 15] Add(SP) [254, 120, 254, 120, 0, 0, 253, 15]
# PC:10 [254, 120, 254, 120, 0, 0, 253, 16] StoreReg(SP) [254, 120, 254, 120, 0, 0, 254, 16]
# PC:11 [254, 120, 254, 120, 0, 0, 254, 17] LoadMem(SP) [120, 120, 254, 120, 0, 0, 254, 17]
# PC:12 [120, 120, 254, 120, 0, 0, 254, 18] StoreReg(B) [120, 120, 254, 120, 0, 0, 254, 18]
# PC:13 [120, 120, 254, 120, 0, 0, 254, 19] LoadLo(Constant(1)) [1, 120, 254, 120, 0, 0, 254, 19]
# PC:14 [1, 120, 254, 120, 0, 0, 254, 20] Add(SP) [255, 120, 254, 120, 0, 0, 254, 20]
# PC:15 [255, 120, 254, 120, 0, 0, 254, 21] StoreReg(SP) [255, 120, 254, 120, 0, 0, 255, 21]
# PC:16 [255, 120, 254, 120, 0, 0, 255, 22] LoadLo(Constant(15)) [255, 120, 254, 120, 0, 0, 255, 22]
# PC:17 [255, 120, 254, 120, 0, 0, 255, 23] StoreReg(PC) [255, 120, 254, 120, 0, 0, 255, 255]
# simulation completed
